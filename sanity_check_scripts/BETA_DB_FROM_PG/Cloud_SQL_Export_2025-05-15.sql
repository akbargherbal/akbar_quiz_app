--
-- PostgreSQL database dump
--

-- Dumped from database version 15.12
-- Dumped by pg_dump version 15.12

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


--
-- Name: multi_choice_quiz_option; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_choice_quiz_option (
    id bigint NOT NULL,
    text text NOT NULL,
    "position" integer NOT NULL,
    is_correct boolean NOT NULL,
    question_id bigint NOT NULL,
    CONSTRAINT multi_choice_quiz_option_position_check CHECK (("position" >= 0))
);


--
-- Name: multi_choice_quiz_option_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.multi_choice_quiz_option ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.multi_choice_quiz_option_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: multi_choice_quiz_question; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_choice_quiz_question (
    id bigint NOT NULL,
    text text NOT NULL,
    chapter_no character varying(20) NOT NULL,
    tag character varying(100) NOT NULL,
    "position" integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    is_active boolean NOT NULL,
    quiz_id bigint NOT NULL,
    topic_id bigint,
    CONSTRAINT multi_choice_quiz_question_position_check CHECK (("position" >= 0))
);


--
-- Name: multi_choice_quiz_question_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.multi_choice_quiz_question ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.multi_choice_quiz_question_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: multi_choice_quiz_quiz; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_choice_quiz_quiz (
    id bigint NOT NULL,
    title character varying(200) NOT NULL,
    description text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    is_active boolean NOT NULL
);


--
-- Name: multi_choice_quiz_quiz_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.multi_choice_quiz_quiz ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.multi_choice_quiz_quiz_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: multi_choice_quiz_quiz_topics; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_choice_quiz_quiz_topics (
    id bigint NOT NULL,
    quiz_id bigint NOT NULL,
    topic_id bigint NOT NULL
);


--
-- Name: multi_choice_quiz_quiz_topics_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.multi_choice_quiz_quiz_topics ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.multi_choice_quiz_quiz_topics_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: multi_choice_quiz_quizattempt; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_choice_quiz_quizattempt (
    id bigint NOT NULL,
    score integer NOT NULL,
    total_questions integer NOT NULL,
    percentage double precision NOT NULL,
    start_time timestamp with time zone NOT NULL,
    end_time timestamp with time zone,
    attempt_details jsonb,
    quiz_id bigint NOT NULL,
    user_id integer
);


--
-- Name: multi_choice_quiz_quizattempt_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.multi_choice_quiz_quizattempt ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.multi_choice_quiz_quizattempt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: multi_choice_quiz_topic; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_choice_quiz_topic (
    id bigint NOT NULL,
    name character varying(100) NOT NULL,
    description text NOT NULL
);


--
-- Name: multi_choice_quiz_topic_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.multi_choice_quiz_topic ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.multi_choice_quiz_topic_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: pages_systemcategory; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.pages_systemcategory (
    id bigint NOT NULL,
    name character varying(100) NOT NULL,
    slug character varying(110) NOT NULL,
    description text NOT NULL
);


--
-- Name: pages_systemcategory_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.pages_systemcategory ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.pages_systemcategory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: pages_systemcategory_quizzes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.pages_systemcategory_quizzes (
    id bigint NOT NULL,
    systemcategory_id bigint NOT NULL,
    quiz_id bigint NOT NULL
);


--
-- Name: pages_systemcategory_quizzes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.pages_systemcategory_quizzes ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.pages_systemcategory_quizzes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: pages_usercollection; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.pages_usercollection (
    id bigint NOT NULL,
    name character varying(100) NOT NULL,
    description text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    user_id integer NOT NULL
);


--
-- Name: pages_usercollection_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.pages_usercollection ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.pages_usercollection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: pages_usercollection_quizzes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.pages_usercollection_quizzes (
    id bigint NOT NULL,
    usercollection_id bigint NOT NULL,
    quiz_id bigint NOT NULL
);


--
-- Name: pages_usercollection_quizzes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.pages_usercollection_quizzes ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.pages_usercollection_quizzes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add Quiz	7	add_quiz
26	Can change Quiz	7	change_quiz
27	Can delete Quiz	7	delete_quiz
28	Can view Quiz	7	view_quiz
29	Can add Topic	8	add_topic
30	Can change Topic	8	change_topic
31	Can delete Topic	8	delete_topic
32	Can view Topic	8	view_topic
33	Can add Quiz Attempt	9	add_quizattempt
34	Can change Quiz Attempt	9	change_quizattempt
35	Can delete Quiz Attempt	9	delete_quizattempt
36	Can view Quiz Attempt	9	view_quizattempt
37	Can add Question	10	add_question
38	Can change Question	10	change_question
39	Can delete Question	10	delete_question
40	Can view Question	10	view_question
41	Can add Option	11	add_option
42	Can change Option	11	change_option
43	Can delete Option	11	delete_option
44	Can view Option	11	view_option
45	Can add System Category	12	add_systemcategory
46	Can change System Category	12	change_systemcategory
47	Can delete System Category	12	delete_systemcategory
48	Can view System Category	12	view_systemcategory
49	Can add User Collection	13	add_usercollection
50	Can change User Collection	13	change_usercollection
51	Can delete User Collection	13	delete_usercollection
52	Can view User Collection	13	view_usercollection
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
1	pbkdf2_sha256$1000000$zWTlGc6P6KHPaKjtoU4i97$wNXp3VqUuzEj+XTyf6HMJUGlZkuMNdXvoETa40TtcnQ=	2025-05-14 19:29:31.418567+00	f	akbar			akbar.hussain.ghurbal@gmail.com	f	t	2025-05-14 11:26:23.479928+00
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	multi_choice_quiz	quiz
8	multi_choice_quiz	topic
9	multi_choice_quiz	quizattempt
10	multi_choice_quiz	question
11	multi_choice_quiz	option
12	pages	systemcategory
13	pages	usercollection
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2025-05-14 11:15:31.657953+00
2	auth	0001_initial	2025-05-14 11:15:34.921886+00
3	admin	0001_initial	2025-05-14 11:15:35.783036+00
4	admin	0002_logentry_remove_auto_add	2025-05-14 11:15:35.8958+00
5	admin	0003_logentry_add_action_flag_choices	2025-05-14 11:15:36.215247+00
6	contenttypes	0002_remove_content_type_name	2025-05-14 11:15:36.855456+00
7	auth	0002_alter_permission_name_max_length	2025-05-14 11:15:37.281325+00
8	auth	0003_alter_user_email_max_length	2025-05-14 11:15:37.70719+00
9	auth	0004_alter_user_username_opts	2025-05-14 11:15:37.923713+00
10	auth	0005_alter_user_last_login_null	2025-05-14 11:15:38.450472+00
11	auth	0006_require_contenttypes_0002	2025-05-14 11:15:38.659495+00
12	auth	0007_alter_validators_add_error_messages	2025-05-14 11:15:38.978499+00
13	auth	0008_alter_user_username_max_length	2025-05-14 11:15:39.509911+00
14	auth	0009_alter_user_last_name_max_length	2025-05-14 11:15:39.933543+00
15	auth	0010_alter_group_name_max_length	2025-05-14 11:15:40.359255+00
16	auth	0011_update_proxy_permissions	2025-05-14 11:15:40.575438+00
17	auth	0012_alter_user_first_name_max_length	2025-05-14 11:15:41.103118+00
18	multi_choice_quiz	0001_initial	2025-05-14 11:15:44.072888+00
19	pages	0001_initial	2025-05-14 11:15:46.489119+00
20	sessions	0001_initial	2025-05-14 11:15:47.136992+00
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
k31s0tsmatfw2t6dl3kqimv3roq2jncl	.eJxVjMsOwiAQRf-FtSE8hkdduvcbyMCAVA0kpV0Z_12bdKHbe865LxZwW2vYRl7CTOzMJDv9bhHTI7cd0B3brfPU27rMke8KP-jg1075eTncv4OKo35r1A7QA_hkLCRndKZUvKKCqBLaSChoEhaweAdCkY4QJ1DSoHPSZMfeH_GrN_w:1uFAFk:TYPh6Zhd6XxUehYqARBLyN6YKBjCdAGnrNr6W-S_5MM	2025-05-28 11:26:24.034371+00
q31ct9am5aw4jzzwl74ewkobbx8hrc04	.eJxVjMsOwiAQRf-FtSE8hkdduvcbyMCAVA0kpV0Z_12bdKHbe865LxZwW2vYRl7CTOzMJDv9bhHTI7cd0B3brfPU27rMke8KP-jg1075eTncv4OKo35r1A7QA_hkLCRndKZUvKKCqBLaSChoEhaweAdCkY4QJ1DSoHPSZMfeH_GrN_w:1uFAG7:hCkP6NDVOSCc7Vv_Ip1Ucf9WXeTjbp8iw_ZK_FkeTOQ	2025-05-28 11:26:47.599978+00
a20zrg1u5cwvsc7bcwshlguol04z62kz	.eJxVjMsOwiAQRf-FtSE8hkdduvcbyMCAVA0kpV0Z_12bdKHbe865LxZwW2vYRl7CTOzMJDv9bhHTI7cd0B3brfPU27rMke8KP-jg1075eTncv4OKo35r1A7QA_hkLCRndKZUvKKCqBLaSChoEhaweAdCkY4QJ1DSoHPSZMfeH_GrN_w:1uFHnH:k6ncQxqRUck1jLnXdl0eo5H373-e-MZm-KwlDlknsyc	2025-05-28 19:29:31.42577+00
\.


--
-- Data for Name: multi_choice_quiz_option; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.multi_choice_quiz_option (id, text, "position", is_correct, question_id) FROM stdin;
1	It runs all defined validation logic for the form's fields and populates `form.cleaned_data` if all validations pass, or `form.errors` if any fail.	1	t	1
2	It serializes the form data into a JSON object for API responses.	2	f	1
3	It renders the form as HTML, including any initial data or error messages.	3	f	1
4	It directly saves the form data to the database without running any validation checks.	4	f	1
5	It checks if the HTTP request method is POST before proceeding with any other operations.	5	f	1
6	To embed a list view of the related model within the parent model's list view.	1	f	2
7	To create a new admin section specifically for managing the related model.	2	f	2
8	To allow editing of related model instances directly on the parent model's add/change page.	3	t	2
9	To display related model instances as separate, read-only tables on the parent model's detail page.	4	f	2
10	To define custom actions that can be performed on related model instances from the parent model's admin page.	5	f	2
11	To set the display name of the application in the Django admin interface's application list.	1	f	3
12	To define a base URL prefix (e.g., "/quiz/") for all paths defined in that `urls.py` file.	2	f	3
13	To automatically register all views within that app with the project's root URLconf.	3	f	3
14	To enable URL namespacing, allowing the same URL name (e.g., "home") to be used in different apps without collision when reversing URLs.	4	t	3
15	To specify the database alias that should be used for models within that application.	5	f	3
16	It is the only way to pass arguments to views from a template.	1	f	4
17	It makes the website load faster by pre-compiling URL paths.	2	f	4
18	It encrypts the URL parameters for better security.	3	f	4
19	It automatically adds CSRF protection to the generated links.	4	f	4
20	It allows URLs to be changed in `urls.py` without needing to update them in every template, making the application more maintainable.	5	t	4
21	A boolean indicating whether any object matches the lookup parameters.	1	f	5
22	The total count of objects that match the lookup parameters.	2	f	5
23	A single object that matches the lookup parameters, or raises an error if not found.	3	f	5
24	A new QuerySet containing objects that match the given lookup parameters.	4	t	5
25	A dictionary representing the first object that matches the lookup parameters.	5	f	5
26	`Quiz.objects.filter(topics=my_topic.id)`	1	f	6
27	`my_topic.get_quizzes()`	2	f	6
28	`Quiz.topics.filter(topic=my_topic)`	3	f	6
29	`my_topic.quizzes.all()`	4	t	6
30	`my_topic.quiz_set.all()`	5	f	6
31	To directly authenticate a user with a username and password.	1	f	7
32	To fetch all users with administrative privileges.	2	f	7
33	To define the fields and methods for the User model.	3	f	7
34	To create a new user instance in the database.	4	f	7
35	To reliably retrieve the currently active User model, whether it's the default Django User or a custom one.	5	t	7
36	To filter query results based on GET parameters in the URL.	1	f	8
37	To automatically generate pagination links in HTML templates.	2	f	8
38	To cache the results of a database query for faster subsequent access.	3	f	8
39	To split a large list of items (e.g., a QuerySet) into several pages, making it easier to display and navigate large datasets.	4	t	8
40	To sort query results based on user-selected criteria.	5	f	8
41	It creates an object if it doesn't exist but does not update an existing one.	1	f	9
42	It always creates a new object, raising an error if an object with the lookup parameters already exists.	2	f	9
43	It updates an existing object and then immediately deletes it.	3	f	9
44	It retrieves an existing object, raising `DoesNotExist` if no match is found.	4	f	9
45	It updates an existing object matching the lookup parameters or creates a new one if no match is found.	5	t	9
46	To validate that the input is a JavaScript file.	1	f	10
47	To automatically encrypt sensitive data before saving to the database.	2	f	10
48	To store flexible, schemaless JSON data directly in a database field.	3	t	10
49	To store large binary files like images or videos.	4	f	10
50	To define a foreign key relationship to a JSON table.	5	f	10
51	To include a hidden input field containing a CSRF token, which helps protect against Cross-Site Request Forgery attacks for POST requests.	1	t	11
52	To indicate that the form should be submitted asynchronously using AJAX.	2	f	11
53	To associate the form with a specific Django model for automatic data binding.	3	f	11
54	To validate the form data on the client-side before submission.	4	f	11
55	To encrypt the form data before it is submitted to the server.	5	f	11
56	To indicate that this field is part of a unique constraint with another field.	1	f	12
57	To set a default value for the field if no value is provided.	2	f	12
58	To link the field to a specific database table column name.	3	f	12
59	To specify the name to use for the reverse relation from the related model back to the current model.	4	t	12
60	To define the verbose name of the field that will be displayed in the Django admin.	5	f	12
61	To dynamically generate a URL based on the name of a URL pattern defined in `urls.py`.	1	t	13
62	To load static files like CSS or JavaScript.	2	f	13
63	To include another template file within the current template.	3	f	13
64	To define a new URL endpoint directly within the template.	4	f	13
65	To execute a Python function and embed its return value.	5	f	13
66	It automatically populates a field with the current date and time.	1	f	14
67	It ensures that each instance of one model is related to exactly one instance of another model.	2	f	14
68	It creates a one-way link from one model to another, without a reverse relation.	3	f	14
69	It allows multiple instances of one model to be related to multiple instances of another model, often creating an intermediary table.	4	t	14
70	It stores a single, large binary file associated with a model instance.	5	f	14
71	To define which fields are required when creating a new model instance through the admin.	1	f	15
72	To automatically fill in a field (e.g., a slug) based on the content of another field (e.g., a title) as the user types in the admin form.	2	t	15
73	To make certain fields read-only after they have been initially populated.	3	f	15
74	To validate that a field's value is unique across all instances of the model.	4	f	15
75	To provide default values for fields when a new model instance is created via the admin.	5	f	15
76	It saves the form data to the database if the form is a ModelForm.	1	f	16
77	It checks if the HTTP request method is POST.	2	f	16
78	It populates the form with initial data from a model instance.	3	f	16
79	It runs all validation logic for the form's fields and the form itself, returning True if all data is valid.	4	t	16
80	It sanitizes the input data to prevent XSS attacks.	5	f	16
81	To sanitize user inputs and prevent common security vulnerabilities like XSS.	1	f	17
82	To efficiently serve static files directly from Python, especially in production environments where `DEBUG` is `False`.	2	t	17
83	To provide real-time communication capabilities using WebSockets.	3	f	17
84	To compress dynamic HTML responses generated by Django views.	4	f	17
85	To manage background tasks and asynchronous operations within Django.	5	f	17
86	Django views automatically reject GET requests if POST data is expected.	1	f	18
87	By using the `@require_POST` decorator or checking `if request.method == 'POST':`.	2	t	18
88	By setting `ALLOWED_METHODS = ['POST']` in the view function's attributes.	3	f	18
89	By using the `@csrf_exempt` decorator.	4	f	18
90	By checking `if request.is_ajax():`.	5	f	18
91	It automatically filters out records that do not meet certain criteria before they are displayed in the list view.	1	f	19
92	It defines which fields can be used for advanced search queries in the admin.	2	f	19
93	It adds a sidebar in the admin list view that allows users to filter the displayed records based on the values of specified fields.	3	t	19
94	It controls the default ordering of items in the list view based on the selected filter.	4	f	19
95	It allows users to customize the columns displayed in the list view dynamically.	5	f	19
96	Manually validate each field from `request.POST` before calling `form.is_valid()`.	1	f	20
97	Access `form.cleaned_data` first, then call `form.is_valid()` for confirmation.	2	f	20
98	Call `form.is_valid()`, then if true, access `form.cleaned_data` and potentially `form.save()`.	3	t	20
99	Render the template with the form instance; validation happens automatically in the template.	4	f	20
100	Call `form.save()` immediately, and then `form.is_valid()` to check for errors.	5	f	20
101	To define a reusable block of content that can be overridden by child templates.	1	f	21
102	To specify that the current template inherits from a parent template, allowing for reuse of common layout structures.	2	t	21
103	To conditionally render a section of the template based on a variable's value.	3	f	21
104	To include the content of another template file at the current location.	4	f	21
105	To load custom template tags or filters from a specific library.	5	f	21
106	When the referenced object is deleted, the ForeignKey field on the current object will be set to NULL.	1	f	22
107	Deletion of the referenced object is prevented if any objects still refer to it via this ForeignKey.	2	f	22
108	It specifies that the relationship should be managed through an intermediary table.	3	f	22
109	When the referenced object is deleted, the ForeignKey field is set to its default value.	4	f	22
110	When the referenced object is deleted, the object containing the ForeignKey will also be deleted.	5	t	22
111	It renders a specific template only if the user is logged in.	1	f	23
112	It checks if the user has superuser privileges.	2	f	23
113	It automatically logs in a user if their session is still active.	3	f	23
114	It encrypts the data transmitted to and from the view.	4	f	23
115	It redirects unauthenticated users to the login page before allowing access to the view.	5	t	23
116	To load static files like CSS or JavaScript into the template.	1	f	24
117	To define a block of content that can be overridden by child templates.	2	f	24
118	To dynamically generate a URL for a given view name and optional arguments, promoting maintainable URL structures.	3	t	24
119	To include the content of another template file into the current template.	4	f	24
120	To iterate over a list of items and render content for each item.	5	f	24
121	It renders the form using Tailwind CSS classes automatically.	1	f	25
122	It provides built-in integration with social authentication providers.	2	f	25
123	It sends a verification email to the user upon successful signup.	3	f	25
124	It automatically adds fields for first name, last name, and email.	4	f	25
125	It handles the complexities of user creation, including password hashing and validation, by default.	5	t	25
126	To load the Django settings from `'core.settings'` into the current Python environment.	1	f	26
127	To override any existing `DJANGO_SETTINGS_MODULE` environment variable with `'core.settings'`.	2	f	26
128	To set the `DJANGO_SETTINGS_MODULE` environment variable to `'core.settings'` only if it's not already set, ensuring Django knows which settings file to use.	3	t	26
129	To check if the `'core.settings'` file exists and is valid.	4	f	26
130	To create a default `DJANGO_SETTINGS_MODULE` if the environment variable is missing and the file doesn't exist.	5	f	26
131	To link a model to exactly one instance of another model.	1	f	27
132	To define a many-to-many relationship where an instance of one model can be related to multiple instances of another model, and vice-versa.	2	t	27
133	To create a simple text field that can store multiple comma-separated values.	3	f	27
134	To automatically create a join table that only stores primary keys without additional data.	4	f	27
135	To define a one-to-many relationship where one model instance can relate to many others, but not the other way around.	5	f	27
136	When the referenced object is deleted, all objects that have a `ForeignKey` to it will also be deleted.	1	t	28
137	When the referenced object is deleted, the `ForeignKey` field in related objects will be set to `NULL`.	2	f	28
138	It ensures that the `ForeignKey` field is automatically populated when a new object is created.	3	f	28
139	It automatically creates a reverse relationship from the referenced object back to the linking objects.	4	f	28
140	It prevents the referenced object from being deleted if any other objects link to it.	5	f	28
141	To handle internationalization and translation of text within views.	1	f	29
142	To log application errors and warnings to a file or console.	2	f	29
143	To create permanent status messages displayed on every page.	3	f	29
144	To send real-time chat messages between users.	4	f	29
145	To store temporary, one-time notifications for the user, typically displayed on the next page they visit after a redirect.	5	t	29
146	It sets up the Django environment before the command logic can run.	1	f	30
147	It registers the command with Django's management system.	2	f	30
148	It provides help text that is displayed when `python manage.py help &lt;command_name&gt;` is run.	3	f	30
149	It contains the main logic that the command executes when run.	4	t	30
150	It defines the command-line arguments that the command accepts.	5	f	30
151	To interface with cloud provider services for environment provisioning.	1	f	31
152	To automatically detect and report environment-specific bugs.	2	f	31
153	To provide tools for internationalization and localization of the Django application.	3	f	31
154	To create and manage virtual environments for Django projects.	4	f	31
155	To help manage application configuration using environment variables and .env files.	5	t	31
156	When the referenced object is deleted, all objects that have a ForeignKey pointing to it will also be deleted.	1	t	32
157	It sets a default value for the ForeignKey field if the referenced object is deleted.	2	f	32
158	It prevents the referenced object from being deleted if any other objects point to it.	3	f	32
159	It archives the related objects instead of deleting them.	4	f	32
160	When the referenced object is deleted, the ForeignKey field in related objects will be set to NULL.	5	f	32
161	Adding the project directory to `sys.path` is sufficient.	1	f	33
162	Instantiating `django.core.management.ManagementUtility`.	2	f	33
163	Call `os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')` followed by `django.setup()`.	3	t	33
164	Running the script with `python manage.py runscript your_script.py`.	4	f	33
165	Importing the desired models automatically initializes Django.	5	f	33
166	It primarily handles user authentication and permissions for accessing the model's data.	1	f	34
167	It automatically generates frontend views for creating, reading, updating, and deleting model instances.	2	f	34
168	It allows developers to define custom display, filtering, search, and editing behaviors for that model in the admin interface.	3	t	34
169	It is used to define the database schema and relationships for the model.	4	f	34
170	It is required to enable logging of changes made to the model instances.	5	f	34
171	To store large binary files encoded as JSON.	1	f	35
172	To validate that a text field contains well-formed JSON.	2	f	35
173	To define a relationship with another model that stores JSON data.	3	f	35
174	To store and query semi-structured JSON data directly in the database.	4	t	35
175	To automatically serialize all model fields into a single JSON string for API responses.	5	f	35
176	Whether the user account is currently active or disabled.	1	f	36
177	Whether the user has accepted the terms and conditions.	2	f	36
178	Whether the user has superuser privileges.	3	f	36
179	Whether the user's email address has been verified.	4	f	36
180	Whether the user has been successfully authenticated and is not an anonymous user.	5	t	36
181	It restricts access to a view to only authenticated users, redirecting unauthenticated users to the login page.	1	t	37
1148	Hardcode it directly in the settings.py file	3	f	230
182	It ensures that a view can only be accessed via POST requests.	2	f	37
183	It automatically logs in a user if their session is still valid.	3	f	37
184	It provides user information to the view's context for template rendering.	4	f	37
185	It exempts a view from CSRF protection, typically used for APIs.	5	f	37
186	`JsonResponse()`	1	f	38
187	`render()`	2	t	38
188	`get_object_or_404()`	3	f	38
189	`redirect()`	4	f	38
190	`HttpResponse()` (directly)	5	f	38
191	To execute database queries and return a QuerySet.	1	f	39
192	To define the URL pattern that maps to this view.	2	f	39
193	To manage server-side session state exclusively.	3	f	39
194	To encapsulate all information about the current HTTP request, including metadata, user data, and any submitted data.	4	t	39
195	To directly render an HTML template to the browser.	5	f	39
196	To retrieve a single object from the database or raise an Http404 exception.	1	f	40
197	To return a JSON response to the client.	2	f	40
198	To redirect the user to a different URL.	3	f	40
199	To combine a given template with a context dictionary and return an `HttpResponse` object with that rendered text.	4	t	40
200	To execute a raw SQL query against the database.	5	f	40
201	To automatically create a join table for a many-to-many relationship.	1	f	41
202	To store arbitrary JSON data that references other models.	2	f	41
203	To create a one-to-one relationship, ensuring that an instance of one model is linked to exactly one instance of another.	3	f	41
204	To establish a many-to-one relationship, linking one model instance to an instance of another model (e.g., a `Question` belonging to a `Quiz`).	4	t	41
205	To define a field that stores a list of foreign key IDs from another table.	5	f	41
206	It checks if the logged-in user has a specific set of permissions (e.g., 'can_view_profile') before allowing access to the view.	1	f	42
207	If the user is not authenticated, it redirects them to the URL specified by `settings.LOGIN_URL`, often appending the current path as a 'next' parameter.	2	t	42
208	It automatically attempts to log in a user using session cookies if their session is still valid but they are marked as anonymous.	3	f	42
209	It ensures that the HTTP request and response for the decorated view are transmitted over HTTPS.	4	f	42
210	It makes the `request.user` object available to the view function; without it, `request.user` would be `None`.	5	f	42
211	To load all environment variables from a `.env` file into the `os.environ` dictionary.	1	f	43
212	To check if the `core.settings` module can be imported successfully before proceeding.	2	f	43
213	To override any existing `DJANGO_SETTINGS_MODULE` value with 'core.settings', regardless of the environment.	3	f	43
214	To create a new settings file named `core.settings` if one does not exist.	4	f	43
215	To ensure that the `DJANGO_SETTINGS_MODULE` environment variable is set to a default value if it hasn't been set already, allowing Django to locate the project's settings.	5	t	43
216	To create a one-to-one link where each instance of one model corresponds to exactly one instance of another.	1	f	44
217	To define a field that can only store JSON data representing multiple related items.	2	f	44
218	To store a list of simple text values directly within the model's database row.	3	f	44
219	To define a many-to-many relationship, allowing multiple instances of one model to be related to multiple instances of another.	4	t	44
220	To establish a hierarchical parent-child relationship within the same model.	5	f	44
221	To efficiently serve static files by compressing them (e.g., with Gzip or Brotli) and adding versioned filenames to enable long-term caching.	1	t	45
222	To enable live reloading of static files in the browser during development.	2	f	45
223	To compile static assets like SCSS or TypeScript into CSS and JavaScript.	3	f	45
224	To collect static files from all installed apps into a single directory for deployment.	4	f	45
225	To store static files in a cloud storage service like Amazon S3 or Google Cloud Storage.	5	f	45
226	It restricts access to users with superuser (admin) privileges only.	1	f	46
227	It automatically logs in any user who attempts to access the view.	2	f	46
228	It ensures that only authenticated users can access the view; anonymous users are typically redirected to the login page.	3	t	46
229	It encrypts the HTTP response sent from the view.	4	f	46
230	It provides extra template context variables related to the logged-in user.	5	f	46
231	It is a database management tool used to run migrations and manage schema changes.	1	f	47
232	It primarily serves static files and media files for the Django application.	2	f	47
233	It acts as an intermediary between a web server (like Nginx) or load balancer and the Django application, handling requests and managing application processes.	3	t	47
234	It is a front-end JavaScript framework that interacts with the Django backend.	4	f	47
235	It is a testing framework specifically designed for Django applications.	5	f	47
236	To list all Django applications that are active for the project, enabling their models, templates, and management commands.	1	t	48
237	To list all static file directories that Django should look for.	2	f	48
238	To define the database connection parameters for the project.	3	f	48
239	To specify the order of middleware components used in the request/response cycle.	4	f	48
240	To configure the URL routing patterns for the entire project.	5	f	48
241	It allows loading these configurations from environment variables or `.env` files, keeping secrets out of version control.	1	t	49
242	It automatically generates secure default values for these settings if they are not provided.	2	f	49
243	It encrypts these settings directly within the `settings.py` file.	3	f	49
244	It replaces the need for Django's built-in settings system entirely.	4	f	49
245	It provides a web interface for managing these configurations dynamically.	5	f	49
246	They are defined directly within the template using a special `{% context %}` tag.	1	f	50
247	They are passed as a dictionary from the Django view to the `render()` function, and the template engine replaces placeholders with their values.	2	t	50
248	They are automatically fetched from the database by the template engine based on the variable name.	3	f	50
249	They are global variables accessible from any template without being explicitly passed by a view.	4	f	50
250	They are JavaScript variables that are interpolated into the HTML by the browser.	5	f	50
251	To install or update Django and its dependencies in the current Python environment.	1	f	51
252	To initialize Django's settings, applications, and environment, allowing the script to use Django's ORM and other components outside of a typical request-response cycle.	2	t	51
253	To run database migrations for the Django project.	3	f	51
254	To create a new Django project or application structure.	4	f	51
255	To start the Django development server for the project.	5	f	51
256	To validate the types of arguments passed to the command.	1	f	52
257	To define command-line arguments that the command can accept, using `parser.add_argument()`.	2	t	52
258	To provide a detailed help message for the command's arguments.	3	f	52
259	To execute sub-commands based on the provided arguments.	4	f	52
260	To parse the arguments passed to the command and store them in `self.options`.	5	f	52
261	To create a human-readable, URL-friendly version of a string, often used in URLs.	1	t	53
262	To store a short, encrypted version of the category name for security.	2	f	53
263	To provide a unique numerical identifier for the category, similar to a primary key.	3	f	53
264	To define the display order of categories in a list.	4	f	53
265	To store metadata about the category, such as its creation date or author.	5	f	53
266	It creates a new object with default values and returns it.	1	f	54
267	It redirects the user to a predefined error page specified in `settings.py`.	2	f	54
268	It returns `None`, allowing the view to handle the case of a missing object.	3	f	54
269	It logs an error and returns an empty QuerySet.	4	f	54
270	It raises an `Http404` exception, which typically results in a 404 Not Found page being displayed to the user.	5	t	54
271	To define a block of content that can be overridden by child templates.	1	f	55
272	To dynamically generate a URL path by reversing a named URL pattern, optionally with arguments.	2	t	55
273	To iterate over a list or queryset and render content for each item.	3	f	55
274	To load static files like CSS or JavaScript.	4	f	55
275	To include another template file within the current template.	5	f	55
276	It creates a composite primary key from the listed fields.	1	f	56
277	It specifies the default ordering for querysets based on multiple fields.	2	f	56
278	It ensures that each individual field listed is unique by itself.	3	f	56
279	It groups fields together visually in the Django admin form.	4	f	56
280	It enforces that a combination of specified field values must be unique across the table.	5	t	56
281	It provides a short description of what the command does, displayed in help messages.	1	f	57
282	It specifies the Django application to which the command belongs.	2	f	57
283	It defines the command-line arguments and options that the command accepts.	3	f	57
284	It contains the main logic that is executed when the command is run.	4	t	57
285	It registers the command with Django's management utility.	5	f	57
286	It enforces a strict, predefined JSON schema (like JSON Schema) at the database level for all data inserted into the field.	1	f	58
287	It provides built-in, optimized full-text search capabilities specifically for the textual content within the JSON data.	2	f	58
288	It automatically encrypts any sensitive data stored within the JSON structure before saving it to the database.	3	f	58
289	It allows storing and querying (to some extent, depending on the database) flexible, schemaless or semi-structured JSON data directly within a database field.	4	t	58
290	It automatically converts the JSON data into related Django model instances when the parent model is fetched.	5	f	58
291	To get an object or return a default object if the requested one is not found.	1	f	59
292	To check if an object exists and return a boolean, raising Http404 if an error occurs during the check.	2	f	59
293	To create a new object if one is not found, and return a 404 error if creation fails.	3	f	59
294	To fetch multiple objects and return a 404 error if the queryset is empty.	4	f	59
295	To retrieve a single object matching given lookup parameters, raising an Http404 exception if the object is not found.	5	t	59
296	The field will automatically be set to the current date and time when the model instance is first created.	1	t	60
297	The field will automatically be updated to the current date and time every time the model instance is saved.	2	f	60
298	The field will store the date and time in UTC, regardless of the project's `TIME_ZONE` setting.	3	f	60
299	The field requires manual input of date and time, but it will be validated upon saving.	4	f	60
300	The field will only store the date part, with the time set to midnight.	5	f	60
301	When accessing custom HTTP headers sent by the client, like `X-API-Key`.	1	f	61
302	Primarily when dealing with AJAX requests that use the `GET` HTTP method to fetch data without a full page reload.	2	f	61
303	When retrieving query parameters appended to the URL after a question mark (e.g., `/search/?query=django`).	3	f	61
304	When handling data submitted from an HTML form that uses the `method="POST"`, such as user login credentials or new object creation details.	4	t	61
305	When fetching data stored in the user's session, such as `request.session['user_id']`.	5	f	61
306	A one-to-one relationship, where an instance of one model is uniquely linked to an instance of another.	1	f	62
307	A field that automatically stores the date and time when a model instance is created.	2	f	62
308	A many-to-one relationship, where one model instance is related to an instance of another model.	3	t	62
309	A field that stores arbitrary JSON data.	4	f	62
310	A many-to-many relationship, allowing multiple instances of one model to be related to multiple instances of another.	5	f	62
311	To specify the default ordering for querysets retrieved for that model.	1	t	63
312	To set the human-readable name for the model.	2	f	63
313	To enforce a unique constraint on a set of fields.	3	f	63
314	To control which database table the model maps to.	4	f	63
315	To define the order in which model fields appear in the admin interface.	5	f	63
316	To render a "404 Not Found" template directly without querying the database.	1	f	64
317	To check if an object exists and return a boolean, raising Http404 only if the query itself is invalid.	2	f	64
318	To create a new object if it doesn't exist, or return a 404 error if creation fails.	3	f	64
319	To retrieve a single object from the database based on given lookup parameters, raising an `Http404` exception if the object is not found.	4	t	64
320	To retrieve a list of objects, returning an empty list if none are found and a 404 error if the model doesn't exist.	5	f	64
321	To create a foreign key relationship to a separate JSON storage table.	1	f	65
322	To render model data as JSON in Django admin.	2	f	65
323	To validate that a `CharField` contains only valid JSON.	3	f	65
324	To store arbitrary JSON-structured data (dictionaries, lists, etc.) directly in a database field.	4	t	65
325	To automatically serialize all model fields into a single JSON string for API responses.	5	f	65
326	Highlighting of search terms within the 'title' and 'description' fields in the list view.	1	f	66
327	A search box that allows users to find records by searching within the 'title' and 'description' fields.	2	t	66
328	The ability to sort the admin list view by either 'title' or 'description'.	3	f	66
329	Automatic indexing of 'title' and 'description' fields for faster database lookups.	4	f	66
330	A filter option in the sidebar for 'title' and 'description'.	5	f	66
331	To manage and serve static files and media assets efficiently in production.	1	f	67
332	To help manage project settings by reading configuration values from environment variables and/or `.env` files.	2	t	67
333	To provide tools for internationalization and localization of Django applications.	3	f	67
334	To enhance Django's built-in ORM with additional query capabilities and database features.	4	f	67
335	To simplify the creation of RESTful APIs within a Django project.	5	f	67
336	Deleting the referenced object is prevented if any objects link to it via this ForeignKey.	1	f	68
337	When the referenced object is deleted, the object containing the ForeignKey will also be deleted.	2	t	68
338	When the referenced object is deleted, the ForeignKey field will be set to its default value.	3	f	68
339	When the referenced object is deleted, the ForeignKey field will be set to NULL.	4	f	68
340	It indicates that the relationship is optional and can be left blank.	5	f	68
341	To load static files like CSS and JavaScript, and to define sections for JavaScript code.	1	f	69
342	To iterate over lists or dictionaries, and to define conditional content blocks.	2	f	69
343	To define reusable template snippets that can be included in multiple templates, and to mark sections in a base template that child templates can override.	3	t	69
344	To create custom template filters and tags for complex logic.	4	f	69
345	To directly embed Python code within templates for dynamic content generation.	5	f	69
346	It allows for creating objects with many-to-many relationships in one step.	1	f	70
347	It significantly improves performance by inserting multiple objects in a single database query, reducing database overhead.	2	t	70
348	It ensures that all objects are created within a single atomic transaction by default.	3	f	70
349	It provides more detailed error messages if an individual object creation fails.	4	f	70
350	It automatically validates each object before adding it to the list for creation.	5	f	70
351	It forces the view to be accessed only via HTTPS.	1	f	71
352	It adds extra security headers to the HTTP response for that view.	2	f	71
353	It restricts access to users with specific permissions, such as 'is_staff'.	3	f	71
354	It automatically logs in a user if their session has expired.	4	f	71
355	It ensures that only authenticated (logged-in) users can access the view; anonymous users are typically redirected to the login page.	5	t	71
356	A hierarchical relationship, like a parent-child structure within the same model.	1	f	72
357	A many-to-many relationship, where an instance of one model can be related to multiple instances of another model, and vice-versa.	2	t	72
358	A one-to-many relationship, where one model instance relates to multiple instances of another.	3	f	72
359	A one-to-one relationship, where each model instance is uniquely linked to at most one instance of another.	4	f	72
360	A relationship that only exists in memory and is not persisted to the database.	5	f	72
361	To group fields into sections (fieldsets) on the admin edit form.	1	f	73
362	To add filter options to the right sidebar of the admin change list page.	2	f	73
363	To enable search functionality across specified fields in the admin.	3	f	73
364	To define the fields that appear on the model's detail/edit form in the admin.	4	f	73
365	To specify which fields or model methods should be displayed as columns in the admin change list page for that model.	5	t	73
366	The field will be automatically updated to the current timestamp every time the model instance is saved.	1	f	74
367	The field requires manual input of a future date and time.	2	f	74
368	The field will store the timestamp of the last user login.	3	f	74
369	The field allows null values and is not automatically populated.	4	f	74
370	The field will be automatically set to the current timestamp when the model instance is first created.	5	t	74
371	It returns a 404 HTTP response directly without raising an exception.	1	f	75
372	It returns a list of all objects matching the criteria, or an empty list if none are found.	2	f	75
373	It calls `Model.objects.get()` with the given arguments and raises an Http404 exception if the object is not found.	3	t	75
374	It creates a new object if one is not found with the given arguments.	4	f	75
375	It fetches an object and automatically renders it using a template named '404.html'.	5	f	75
376	It automatically adds user information to the template context.	1	f	76
377	It ensures that the view can only be accessed via POST requests.	2	f	76
378	It restricts access to the view to only authenticated users, redirecting unauthenticated users to the login page.	3	t	76
379	It logs all access attempts to the view for security auditing.	4	f	76
380	It provides CSRF protection for forms submitted from the view.	5	f	76
381	It defines the absolute root directory on the server where all `urls.py` files for the project must be located.	1	f	77
382	It specifies the Python module (e.g., 'core.urls') that Django should use as the starting point for matching requested URL paths to views.	2	t	77
383	It sets the default global namespace for all URL patterns that are not part of an included application's URLconf.	3	f	77
384	It lists all applications whose `urls.py` files should be automatically discovered and included by Django at startup.	4	f	77
385	It configures the base URL prefix (e.g., `/api/v1/`) that will be prepended to all URL patterns defined in the project.	5	f	77
386	The different logging levels (e.g., `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`) that can be assigned to loggers.	1	f	78
387	Filters that can be applied to loggers or handlers to provide additional criteria for determining which log records are processed.	2	f	78
388	Configurations that specify how log messages are processed and where they are sent, such as writing to the console (`StreamHandler`), a file (`FileHandler`), or other destinations.	3	t	78
389	Specific logger instances for different parts of the application (e.g., 'django.request', 'myapp.views') and their respective levels.	4	f	78
390	Format strings that define the layout and content of log messages (e.g., including timestamp, level, module, message).	5	f	78
391	It controls which hosts can connect to the database server.	1	f	79
392	It specifies which IP addresses are allowed to access the Django admin interface.	2	f	79
393	It defines the trusted origins for CSRF protection.	3	f	79
394	It lists the domains from which Cross-Origin Resource Sharing (CORS) is permitted.	4	f	79
395	It helps prevent HTTP Host header attacks by validating the `Host` header of incoming requests.	5	t	79
396	The field is automatically set to the current date and time when the model instance is first created.	1	t	80
397	The field stores only the date, not the time.	2	f	80
398	The field is automatically updated to the current date and time every time the model instance is saved.	3	f	80
399	The field is used to schedule future events.	4	f	80
400	The field requires manual input of date and time upon creation and update.	5	f	80
401	It automatically creates instances of all Django models defined in the project.	1	f	81
402	It mocks all database calls, making the test run faster without actual DB interaction.	2	f	81
403	It enables Django's template rendering engine specifically for that test.	3	f	81
404	It forces the test to run using Django's development server instead of the test client.	4	f	81
405	It ensures that the test function has access to a dedicated, clean test database, and that transactions are properly managed.	5	t	81
406	To register a callback function that will be executed whenever a message is printed to the browser's JavaScript console.	1	t	82
407	To enable or disable the browser's console output for the duration of the test.	2	f	82
408	To execute a JavaScript command directly in the browser's console.	3	f	82
409	To retrieve the entire history of console messages at the end of the test.	4	f	82
410	To filter console messages based on a specific string before they are displayed.	5	f	82
1149	Generate a new one on each container startup	4	f	230
411	They allow tests to run idempotently by either creating necessary data or updating it if it already exists, ensuring a consistent test state.	1	t	83
412	They automatically mock all external API calls made by the application.	2	f	83
413	They are used exclusively for creating admin user interface elements.	3	f	83
414	They ensure that no database transactions are committed during the test.	4	f	83
415	They bypass the Django ORM entirely for faster database operations.	5	f	83
416	To serve static files exclusively during testing, separate from the main application logic.	1	f	84
417	To connect to an existing, externally running Django server for integration tests.	2	f	84
418	To run a real Django development server on a separate thread, allowing E2E tests to interact with the application through a browser via HTTP, using the test database.	3	t	84
419	To provide a mock server environment that simulates Django's behavior without actual network requests.	4	f	84
420	To manage live updates to the database during test execution, reflecting changes immediately.	5	f	84
421	The fixture is created once per test session and shared among all tests.	1	f	85
422	The fixture is only available to functions within the same class.	2	f	85
423	The fixture is created once per test module.	3	f	85
424	The fixture is created and destroyed for each test function that uses it.	4	t	85
425	The fixture's scope is determined dynamically at runtime.	5	f	85
426	Pytest style often uses simple functions with fixtures injected as arguments, rather than methods on a class inheriting from `TestCase`.	1	t	86
427	Pytest style tests are incompatible with Django's test client and require Playwright for all view testing.	2	f	86
428	`TestCase` methods automatically roll back database changes, while pytest style tests require manual cleanup.	3	f	86
429	Pytest style tests cannot use the Django ORM, whereas `TestCase` methods can.	4	f	86
430	`TestCase` is primarily for unit tests, while pytest style is only for integration tests.	5	f	86
431	It automatically generates test data for file inputs.	1	f	87
432	It encrypts sensitive data before it's written to files during tests.	2	f	87
433	It validates the syntax of the script without actually executing it.	3	f	87
434	It allows replacing parts of the system (e.g., file system calls, API requests) with controlled mock objects, isolating the code under test.	4	t	87
435	It measures the performance of file I/O operations.	5	f	87
436	They provide stable and resilient locators for test automation, as they are less likely to change due to UI styling or structural modifications compared to CSS classes or text content.	1	t	88
437	They automatically generate test scripts based on user interactions with the web page.	2	f	88
438	They allow for direct manipulation of JavaScript variables within the page from the test script.	3	f	88
439	They improve the accessibility of web pages for users with disabilities.	4	f	88
440	They are used by Django to identify which template fragments should be updated dynamically.	5	f	88
441	To prevent any JavaScript console output from appearing in the test runner's logs.	1	f	89
442	To inject custom JavaScript into the page to simulate console errors.	2	f	89
443	To directly modify the DOM based on console messages.	3	f	89
444	To listen for and record JavaScript console messages (errors, warnings) from the browser during E2E tests.	4	t	89
445	To validate the HTML structure of the page based on console output.	5	f	89
446	It appends "testuser" to any existing text in the input field.	1	f	90
447	It sets the `value` attribute of the input field directly using JavaScript, bypassing keyboard events.	2	f	90
448	It checks if the input field's value is "testuser".	3	f	90
449	It clears the input field identified by the locator and then types "testuser" into it.	4	t	90
450	It fills the first visible input field on the page with "testuser", regardless of the locator.	5	f	90
451	It encrypts log messages generated during tests for security.	1	f	91
452	It automatically mocks all logging calls to prevent logs from being written during tests.	2	f	91
453	It significantly speeds up test execution by disabling logging.	3	f	91
454	It standardizes log configuration for tests, often directing output to specific files for easier debugging.	4	t	91
455	It integrates test logs directly into the Django admin interface.	5	f	91
456	To automatically generate test data based on the structure of your Django models.	1	f	92
457	To compare the output of a function with a pre-recorded "golden" output file.	2	f	92
458	To measure the code coverage of your tests.	3	f	92
459	To apply patches to the Python standard library to fix bugs during a test run.	4	f	92
460	To replace parts of your system under test with mock objects, allowing you to isolate tests from external dependencies (like file system or network calls) and control their behavior.	5	t	92
461	To create a reference to an element or elements on the page based on a selector, allowing for actions and assertions on those elements.	1	t	93
462	To navigate the browser to a new URL.	2	f	93
463	To execute arbitrary JavaScript code in the context of the page.	3	f	93
464	To wait for a specific network request to complete.	4	f	93
465	To take a screenshot of the current page.	5	f	93
466	It automatically sends the screenshot to a bug tracking system.	1	f	94
467	It extracts all text content from the page into a log file.	2	f	94
468	It pauses the test execution and opens browser developer tools.	3	f	94
469	It provides a visual snapshot of the page state at the time of failure, helping to identify UI issues.	4	t	94
470	It captures a video recording of the entire test session.	5	f	94
471	A tool for measuring the performance and load times of Django views.	1	f	95
472	A mock Django server that simulates HTTP responses without actually running the application.	2	f	95
473	A running Django development server on a dynamic port, connected to the test database, allowing browser tests to interact with the application.	3	t	95
474	A way to directly execute Django management commands within a test function.	4	f	95
475	A client for making HTTP requests to the application without needing a browser, similar to Django's test client.	5	f	95
476	Modify `sys.argv` directly within the test function before importing the script.	1	f	96
477	Create a temporary file with arguments and redirect `sys.stdin` to it.	2	f	96
478	Use `@patch.object(sys, 'argv', ['script_name.py', '--arg1', 'value1'])` to simulate command-line arguments.	3	t	96
479	Use `argparse.ArgumentParser.parse_args()` with a list of strings in the test.	4	f	96
480	The `pytest` runner automatically handles `sys.argv` based on test function parameters.	5	f	96
481	It ensures that the test function has access to a properly set up test database, rolling back changes after the test.	1	t	97
482	It indicates that the test is specifically for testing Django's database migration system.	2	f	97
483	It automatically mocks all database calls, making the test run faster without hitting a real database.	3	f	97
484	It provides the test function with a `client` fixture for making HTTP requests to the Django application.	4	f	97
485	It enables Django's template rendering engine for the test.	5	f	97
486	It starts a real Django development server on a dynamic port, running against the test database, allowing browser tests to interact with the application as a user would.	1	t	98
487	It directly populates the test database with data from a live production server.	2	f	98
488	It allows tests to make HTTP requests to external services by proxying them through a live server.	3	f	98
489	It captures server-side logs and errors during the test execution.	4	f	98
490	It provides a mock server environment that simulates HTTP responses without actually running the Django application.	5	f	98
491	To start a live Django development server on a dynamic port, connected to the test database, for E2E/browser tests.	1	t	99
492	To capture and analyze server logs generated during test execution.	2	f	99
493	To provide a pre-populated in-memory SQLite database for faster tests.	3	f	99
494	To mock HTTP requests to external services during tests.	4	f	99
495	To serve static files directly from the file system without Django's involvement.	5	f	99
496	To serve static files for the Django application during testing.	1	f	100
497	To provide a mock Django server environment that simulates HTTP requests and responses without actually starting a network server.	2	f	100
498	To start a real Django development server on a dynamic port, allowing end-to-end tests (e.g., with Playwright) to interact with the application through HTTP requests against a test database.	3	t	100
499	To directly interact with Django's ORM and models within a test function, automatically managing test database creation and teardown.	4	f	100
500	To capture and assert against logs generated by the Django application during a test run.	5	f	100
501	To change the zoom level of the page content without altering the viewport dimensions.	1	f	101
502	To simulate different screen sizes (e.g., mobile, tablet, desktop) to test how the web page layout adapts.	2	t	101
503	To control the network speed for simulating different connection qualities.	3	f	101
504	To define the size of screenshots taken by Playwright.	4	f	101
505	To set the default font size for the web page being tested.	5	f	101
506	It runs the test in a separate process to isolate it from other tests.	1	f	102
507	It enables Django's template debugging features for the test.	2	f	102
508	It automatically mocks all external API calls made during the test.	3	f	102
509	It ensures the test has access to a Django database, typically setting up a test database and handling transactions.	4	t	102
510	It specifically runs the test against a PostgreSQL database, ignoring other configurations.	5	f	102
511	To mark tests as expected to fail or to be skipped under certain conditions.	1	f	103
512	To provide a fixed baseline of data or state for tests, promoting reusability and reducing setup duplication.	2	t	103
513	To automatically generate test cases based on a set of input parameters.	3	f	103
514	To directly assert the output of functions without writing explicit assert statements.	4	f	103
515	To group related tests into classes for better organization.	5	f	103
516	To parameterize a test function, allowing it to run multiple times with different inputs.	1	f	104
517	To define a custom assertion that can be used within test functions.	2	f	104
518	To group related test functions into a test class.	3	f	104
519	To mark a test function to be skipped under certain conditions.	4	f	104
520	To provide a reusable setup and teardown mechanism for tests, supplying test functions with data or objects they need.	5	t	104
521	`expect()` provides more detailed error messages specific to CSS frameworks like Tailwind.	1	f	105
522	`expect()` includes built-in auto-waiting, retrying the assertion until the condition is met or a timeout occurs.	2	t	105
523	`expect()` only works for elements that are initially rendered, not for dynamically added ones.	3	f	105
524	`expect()` bypasses CSS visibility rules and checks only for DOM presence.	4	f	105
525	`expect()` directly modifies the DOM to make the element visible if it's hidden.	5	f	105
526	To mock HTTP requests to external services during unit tests.	1	f	106
527	To manage and apply database migrations before tests run.	2	f	106
528	To provide a pre-populated in-memory SQLite database for faster testing.	3	f	106
529	To start a real Django development server on a dynamic port, connected to the test database, for use in end-to-end tests.	4	t	106
530	To capture and assert HTTP requests and responses made by the Django test client.	5	f	106
531	To group related tests into a single executable unit.	1	f	107
532	To define the assertions that determine if a test passes or fails.	2	f	107
533	To report test results to a continuous integration server.	3	f	107
534	To provide a fixed baseline of data, state, or objects (like a logged-in browser page) that tests can reliably use for setup.	4	t	107
535	To generate parameterized versions of a test function with different inputs.	5	f	107
536	To interact with a live, running Django development server for end-to-end testing.	1	f	108
537	To manage JavaScript execution and browser events in Django templates.	2	f	108
538	To simulate HTTP requests to Django views without needing a full browser or running a live server.	3	t	108
539	To configure Django settings specifically for a single test function.	4	f	108
540	To directly manipulate database records for setting up test data.	5	f	108
541	It captures JavaScript console errors and page errors from the browser during the test.	1	f	109
542	It is a fixture for managing database transactions, ensuring tests are isolated.	2	f	109
543	It starts a real Django development server on a dynamic port, connected to the test database, allowing E2E tests to interact with the application as a user would.	3	t	109
544	It provides a mock server environment that simulates HTTP responses without actually running the Django application.	4	f	109
545	It allows tests to directly call Django view functions with a simulated request object.	5	f	109
546	Use `unittest.mock.patch` to redirect file system calls (e.g., `Path.glob`, `Path.is_dir`) to a temporary, controlled directory.	1	t	110
547	Run tests with read-only permissions for the project's data directories.	2	f	110
548	Always create dummy files directly in the script's target directory and clean them up manually.	3	f	110
549	Temporarily rename the actual project directory (e.g., `QUIZ_COLLECTIONS`) before running the test.	4	f	110
550	Embed all test file content directly as strings within the test script.	5	f	110
551	HTMX requires writing extensive JavaScript code for every dynamic interaction.	1	f	111
552	HTMX replaces the Django templating engine with its own server-side rendering logic.	2	f	111
553	HTMX is primarily designed for building native mobile applications from web technologies.	3	f	111
554	HTMX manages all application state entirely on the client-side using a virtual DOM.	4	f	111
555	HTMX typically fetches HTML fragments from the server to update parts of a page, rather than JSON to be rendered by client-side templates.	5	t	111
556	To declare a new Alpine component scope and define its initial reactive data (state).	1	t	112
557	To fetch data from a remote API endpoint when the component is initialized.	2	f	112
558	To bind an HTML element's attribute to a JavaScript expression.	3	f	112
559	To conditionally render an HTML element based on a JavaScript expression.	4	f	112
560	To execute a JavaScript function when an event (like a click) occurs on an element.	5	f	112
561	A way to store key/value pairs in the browser that persist only for the duration of the page session (i.e., until the browser tab is closed).	1	t	113
562	A mechanism for real-time communication between the browser and the server using WebSockets.	2	f	113
563	A way to store key/value pairs in the browser that persist even after the browser is closed and reopened.	3	f	113
564	An API for accessing the user's file system to read and write files.	4	f	113
565	A method to store data on the server-side, associated with the user's session.	5	f	113
566	A Django URL endpoint that processes the form data and returns an HTML fragment.	1	t	114
567	A CSS class name to style the form submission button.	2	f	114
568	The path to a static HTML file to replace the entire page.	3	f	114
569	A client-side data store like `localStorage`.	4	f	114
570	A JavaScript function defined in an external `.js` file.	5	f	114
571	To declare a new Alpine component scope and its initial reactive data.	1	t	115
572	To bind an HTML attribute's value to a JavaScript expression.	2	f	115
573	To conditionally render an HTML element based on a JavaScript expression.	3	f	115
574	To fetch data from a remote API endpoint.	4	f	115
575	To loop over an array and render an HTML element for each item.	5	f	115
576	`'Cache-Control': 'no-cache'`	1	f	116
577	`'Content-Type': 'application/json'`	2	t	116
578	`'Authorization': 'Bearer YOUR_TOKEN'`	3	f	116
579	`'Accept': 'application/json'`	4	f	116
580	`'X-Requested-With': 'XMLHttpRequest'`	5	f	116
581	To loop over an array or object and create HTML elements for each item.	1	f	117
582	To conditionally render an HTML element based on a JavaScript expression.	2	f	117
583	To bind the value of an HTML element to a JavaScript variable in the component's data.	3	f	117
584	To define the initial data state for an Alpine.js component.	4	f	117
585	To execute a JavaScript expression once when an Alpine.js component is initialized.	5	t	117
586	It lists all the JavaScript files that should be included in the PWA's service worker for offline caching.	1	f	118
587	It specifies the exact URL route (e.g., `/app_manifest.json`) where the PWA's web app manifest file will be served from.	2	f	118
588	It defines the name that is displayed to the user when they are prompted to install the PWA on their device (e.g., on the home screen).	3	t	118
589	It sets the internal Python package name that Django uses for locating the PWA's service worker logic and manifest file.	4	f	118
590	It determines the primary background color used for the PWA's splash screen when it is launched by the user.	5	f	118
591	To iterate over an array and render an HTML element for each item.	1	f	119
592	To conditionally render an HTML element based on a JavaScript expression.	2	f	119
593	To declare a new reactive component scope and define its initial state (data).	3	t	119
594	To bind an HTML element's attribute to a JavaScript expression.	4	f	119
595	To execute JavaScript code when an element is clicked.	5	f	119
596	To fetch external data from a URL and make it available to the component.	1	f	120
597	To declare a new Alpine component scope and define its initial reactive data.	2	t	120
598	To bind an HTML element's visibility to a JavaScript expression.	3	f	120
599	To execute a JavaScript function when an element is clicked.	4	f	120
600	To define a reusable template that can be instantiated multiple times.	5	f	120
601	To execute a JavaScript function when an event (like a click) occurs on an element.	1	f	121
602	To declare a new Alpine component scope and initialize its reactive data.	2	t	121
603	To conditionally render an HTML element based on a JavaScript expression.	3	f	121
604	To fetch data from a remote API endpoint when the component is initialized.	4	f	121
605	To bind an HTML element's attribute to a JavaScript expression.	5	f	121
606	It declares a new Alpine.js component scope and initializes its reactive data state.	1	t	122
607	It fetches data from a Django view context variable and makes it available to JavaScript.	2	f	122
608	It defines a block of HTML that will only be rendered if a certain JavaScript condition is true.	3	f	122
609	It specifies a JavaScript function to be called when the element is clicked.	4	f	122
610	It binds an HTML element's visibility to a JavaScript boolean property.	5	f	122
611	To fetch data from a remote API endpoint and make it available to the template.	1	f	123
612	To define CSS styles that are conditionally applied to an element.	2	f	123
613	To bind the element's visibility to a Django context variable.	3	f	123
614	To execute a JavaScript function when the element is first initialized in the DOM.	4	f	123
615	To declare a new Alpine component scope and define its reactive data.	5	t	123
616	To securely transmit JSON data by encrypting it.	1	f	124
617	To parse a JSON string received from an API response into a JavaScript object.	2	f	124
618	To pretty-print a JavaScript object for debugging purposes in the console.	3	f	124
619	To convert a JavaScript object or value into a JSON string, typically for sending it in the body of an HTTP request.	4	t	124
620	To validate if a given string is a well-formed JSON structure.	5	f	124
621	It defines a global JavaScript variable accessible throughout the page.	1	f	125
622	It fetches data from a remote API endpoint and binds it to the element.	2	f	125
623	It initializes a new reactive component scope with data and behavior for that element and its children.	3	t	125
624	It specifies the URL to which form data within the element should be submitted.	4	f	125
625	It conditionally renders the HTML element based on a JavaScript expression.	5	f	125
626	To execute JavaScript code after a specified delay or at regular intervals.	1	f	126
627	To define and manage local browser storage (localStorage or sessionStorage).	2	f	126
628	To parse JSON data received from a server into JavaScript objects.	3	f	126
629	To directly manipulate the HTML Document Object Model (DOM) by selecting and modifying elements.	4	f	126
630	To make asynchronous HTTP requests to servers, allowing retrieval or submission of data.	5	t	126
631	A web worker for background processing.	1	f	127
632	A CSS stylesheet for styling the quiz elements.	2	f	127
633	A JSON payload to be sent to the Django server.	3	f	127
634	A Django form class definition.	4	f	127
635	The data (state) and methods (behavior) for an Alpine.js component.	5	t	127
636	It conditionally renders the HTML element based on a JavaScript expression.	1	f	128
637	It fetches data from a remote API endpoint and binds it to the element.	2	f	128
638	It iterates over an array and creates multiple HTML elements.	3	f	128
639	It initializes a new Alpine component scope, defining its reactive data and functions.	4	t	128
640	It applies CSS styles to the element dynamically.	5	f	128
641	PUT	1	f	129
642	DELETE	2	f	129
643	GET	3	f	129
644	HEAD	4	f	129
645	POST	5	t	129
646	To fetch JSON data from a remote server.	1	f	130
647	To convert a JavaScript object or value into a JSON formatted string.	2	f	130
648	To convert a JSON formatted string into a JavaScript object or value.	3	t	130
2038	The core `playwright` library.	3	t	408
649	To validate if a string is in correct JSON format without converting it.	4	f	130
650	To define a new JSON object directly in JavaScript code.	5	f	130
651	To optimize code performance by pre-allocating resources.	1	f	131
652	To define a block of code that should only execute if a certain condition is true.	2	f	131
653	To handle potential runtime errors (exceptions) gracefully, allowing the program to continue execution or fail in a controlled manner.	3	t	131
654	To create a loop that retries an operation until it succeeds.	4	f	131
655	To declare variables that are local to a specific block of code.	5	f	131
656	It resolves symbolic links and returns the canonical path.	1	f	132
657	It can only be used for absolute paths, not relative ones.	2	f	132
658	It automatically creates the directory if it does not exist.	3	f	132
659	It provides a platform-independent way to construct paths and improves code readability compared to string concatenation.	4	t	132
660	It performs faster file I/O operations than using string paths.	5	f	132
661	Calling the `Path.join()` method (e.g., `base_path.join("subdir", "file.txt")`).	1	f	133
662	Using the slash (`/`) operator (e.g., `base_path / "subdir" / "file.txt"`).	2	t	133
663	Appending segments to a list and then joining with `Path.from_segments()`.	3	f	133
664	Using string concatenation with `os.path.sep` (e.g., `str(base_path) + os.path.sep + "file.txt"`).	4	f	133
665	Using the `os.path.join()` function (e.g., `os.path.join(base_path, "subdir", "file.txt")`).	5	f	133
666	Both handlers write to a file, but `StreamHandler` does so in a more continuous, "streaming" fashion.	1	f	134
667	`FileHandler` reads log configuration from a file, while `StreamHandler` streams logs over a network.	2	f	134
668	`FileHandler` is for errors only, while `StreamHandler` is for all log levels.	3	f	134
669	`FileHandler` writes log messages to a specified file, while `StreamHandler` writes them to a stream (e.g., `sys.stdout` or `sys.stderr`).	4	t	134
670	`FileHandler` archives old log files, while `StreamHandler` displays logs in real-time.	5	f	134
671	They are the only way to interact with network file systems.	1	f	135
672	They provide an object-oriented interface for path operations, making code more readable and less prone to errors related to path separators.	2	t	135
673	They automatically handle file compression and decompression.	3	f	135
674	They provide built-in support for version control systems like Git.	4	f	135
675	They are significantly faster for all file I/O operations.	5	f	135
676	A generator yielding `Path` objects for files and directories matching a given pattern.	1	t	136
677	A single `Path` object for the first match found, or `None`.	2	f	136
678	A list of strings representing the absolute paths of matching files.	3	f	136
679	A dictionary where keys are filenames and values are `Path` objects.	4	f	136
680	A boolean indicating whether any files match the pattern.	5	f	136
681	To disable logging for specific parts of an application.	1	f	137
682	To filter log messages based on their severity level (e.g., INFO, WARNING, ERROR).	2	f	137
683	To format the layout of log messages (e.g., including timestamp, logger name, message).	3	f	137
684	To create a named logger instance that can be used to emit log messages.	4	f	137
685	To determine where log messages are sent (e.g., to a file, to the console, over the network).	5	t	137
686	It flushes all pending log messages to their handlers.	1	f	138
687	It returns the name of the current module as a string.	2	f	138
688	It configures the default logging level for all loggers.	3	f	138
689	It retrieves a logger instance that is specific to the current module, allowing for hierarchical logging configuration.	4	t	138
690	It creates a new root logger for the application.	5	f	138
691	They are primarily used for interacting with remote file systems over a network.	1	f	139
692	They are specifically designed for handling very large files that don't fit in memory.	2	f	139
693	They provide an object-oriented way to handle file paths, making operations like joining paths or checking existence more intuitive and cross-platform compatible.	3	t	139
694	They offer built-in support for version controlling files directly through Python.	4	f	139
695	They automatically compress files when reading or writing, saving disk space.	5	f	139
696	To exclusively handle URL routing within a Django application.	1	f	140
697	To provide an object-oriented way to represent and manipulate file system paths, improving cross-platform compatibility and readability.	2	t	140
698	To manage environment variables for application configuration.	3	f	140
699	To perform complex mathematical operations on path segments.	4	f	140
700	To directly interact with database path configurations.	5	f	140
701	To set the global logging level for the entire application.	1	f	141
702	To get the root logger instance, which handles all unconfigured log messages.	2	f	141
703	To create a new log file named after the current module.	3	f	141
704	To get a logger instance specific to the current module, allowing for hierarchical logging.	4	t	141
705	To directly write a log message to the console.	5	f	141
706	To define a block of code that will always execute, regardless of whether an error occurs or not.	1	f	142
707	To pause the execution of the program for a specified duration.	2	f	142
708	To conditionally execute a block of code based on whether a specific variable is true or false.	3	f	142
709	To create a loop that iterates a specific number of times or until a condition is met.	4	f	142
710	To handle potential errors (exceptions) that might occur during the execution of the code in the `try` block, allowing the program to manage them gracefully.	5	t	142
711	To extract tabular data from an HTML webpage into a list of DataFrames.	1	f	143
712	To load a Pandas DataFrame or other Python object that was previously saved (serialized) in Python's pickle format.	2	t	143
713	To parse JSON data from a file or string into a Python dictionary or list.	3	f	143
714	To read data from a CSV file into a Pandas DataFrame, automatically inferring data types.	4	f	143
715	To connect to a SQL database and execute a query, returning the results as a DataFrame.	5	f	143
716	It serializes Python objects, allowing complex data structures like DataFrames to be stored and retrieved.	1	t	144
717	It is primarily used for storing image data in a compressed format.	2	f	144
718	It is a human-readable text format, similar to JSON or CSV.	3	f	144
719	It is a database file format, like SQLite.	4	f	144
720	It can only store simple data types like strings and numbers.	5	f	144
721	A configuration file format used by the `pickle` library for database settings.	1	f	145
722	A type of executable script specific to the Pandas library.	2	f	145
723	A file format used for serializing Python objects, often Pandas DataFrames, into a byte stream.	3	t	145
724	A compressed archive format like ZIP, specifically for Python scripts.	4	f	145
725	A plain text file format similar to CSV, but with a `.pkl` extension.	5	f	145
726	Require the DataFrame to always provide options as a Python list object.	1	f	146
727	Use regular expressions to identify and extract options.	2	f	146
728	Always split by comma, as JSON is a subset of comma-separated values.	3	f	146
729	Attempt to parse as JSON first; if it fails, split by comma.	4	t	146
730	Use `ast.literal_eval()` for all string-based option lists.	5	f	146
731	Django's development server cannot bind to the `$PORT` environment variable required by Cloud Run.	1	f	147
732	Production WSGI servers automatically integrate with Cloud Logging without any configuration in Django settings.	2	f	147
733	Cloud Run only allows containers running Gunicorn or Uvicorn; other servers are blocked by the platform.	3	f	147
734	Development servers are typically single-threaded, insecure, and not designed to handle production load efficiently or reliably.	4	t	147
735	Production WSGI servers are required to enable Cloud Run's automatic scaling features.	5	f	147
736	To trigger automated database backups before deploying a new revision.	1	f	148
737	To allow Cloud Run to determine if a container instance is ready to serve traffic and if it's still responsive (liveness).	2	t	148
738	To provide a public endpoint for end-users to check the overall status of the application.	3	f	148
739	To automatically collect application performance metrics like CPU and memory usage.	4	f	148
740	To securely manage environment variables and secrets for the application container.	5	f	148
741	Larger images prevent the use of multi-stage builds in the Dockerfile optimization process.	1	f	149
742	Cloud Run imposes strict limits on image size (e.g., 100MB), causing deployments to fail if exceeded.	2	f	149
743	Unnecessarily large images slow down container startup times during scaling events and deployments, impacting responsiveness.	3	t	149
744	Security scanning tools cannot effectively analyze Docker images exceeding 1GB in size.	4	f	149
745	Large images consume excessive Cloud Storage space, leading to high storage costs unrelated to Cloud Run execution.	5	f	149
746	Cloud Run automatically assigns a zero-value IP address for security.	1	f	150
747	The maximum number of instances allowed for the service is set to zero.	2	f	150
748	The deployment process takes zero seconds due to pre-warmed instances.	3	f	150
749	The application's code must be refactored to handle zero concurrent requests.	4	f	150
750	Cloud Run can automatically reduce the number of running container instances to zero when there is no incoming traffic, reducing costs.	5	t	150
751	Built-in support for running any type of relational database directly within the service instance.	1	f	151
752	Direct access to the underlying server hardware for fine-grained performance tuning.	2	f	151
753	Persistent file storage attached to each instance, suitable for storing user uploads directly.	3	f	151
754	A requirement to manually configure and manage load balancers for handling traffic.	4	f	151
755	Automatic scaling based on request traffic, including scaling down to zero instances to save costs when idle.	5	t	151
756	It only supports applications written in specific languages like Go and Node.js.	1	f	152
757	It runs applications directly from source code without needing containers.	2	f	152
758	Billing is based on a fixed monthly fee regardless of usage.	3	f	152
759	It requires manual provisioning and patching of underlying virtual machines.	4	f	152
760	It can automatically scale the number of container instances down to zero when there is no traffic, reducing idle costs.	5	t	152
761	Providing a fully managed PostgreSQL database integrated with the container.	1	f	153
762	Packaging the application with all its dependencies (code, interpreter, libraries) for consistent execution across different environments.	2	t	153
763	Offering a built-in Content Delivery Network (CDN) for static assets included in the image.	3	f	153
764	Automatically scaling the application based on incoming traffic without any configuration.	4	f	153
2039	A GUI tool for managing Playwright tests.	4	f	408
765	Encrypting all application secrets directly within the container image file system.	5	f	153
766	Creating unnecessarily large container images due to not using techniques like multi-stage builds or `.dockerignore`.	1	t	154
767	Exposing the application port using the `EXPOSE` instruction, which is mandatory for Cloud Run.	2	f	154
768	Using `CMD` instead of `ENTRYPOINT` to specify the container's startup command.	3	f	154
769	Using official Python slim base images which lack necessary system tools.	4	f	154
770	Installing Python dependencies using `pip install -r requirements.txt` within the Dockerfile.	5	f	154
771	It simplifies the process of installing Python dependencies using `pip`.	1	f	155
772	It enables zero-downtime deployments on Cloud Run.	2	f	155
773	It helps create smaller final images by discarding build tools and intermediate files not needed for runtime.	3	t	155
774	It automatically configures health checks for the Cloud Run service.	4	f	155
775	It allows running multiple applications within the same container instance.	5	f	155
776	Automatically scaling the application based on incoming traffic without needing containers.	1	f	156
777	Managing DNS records and SSL certificates for web applications.	2	f	156
778	Packaging the application and all its dependencies (code, libraries, interpreter) into a single, consistent unit that runs identically anywhere.	3	t	156
779	Storing and managing application secrets securely.	4	f	156
780	Providing a fully managed PostgreSQL database service.	5	f	156
781	It conflicts with the Cloud SQL Auth Proxy when running in the same container.	1	f	157
782	It does not support serving static files, which is essential for web applications.	2	f	157
783	It is single-threaded, insecure, and not designed for production loads, leading to poor performance and instability.	3	t	157
784	It requires root privileges to run, which is blocked by Cloud Run's security model.	4	f	157
785	It cannot bind to the `$PORT` environment variable required by Cloud Run.	5	f	157
786	Development servers consume significantly more memory than production WSGI servers.	1	f	158
787	Production WSGI servers are required to enable Cloud Run's automatic scaling features.	2	f	158
788	Development servers are single-threaded, insecure, and not designed for handling production loads, leading to poor performance and instability.	3	t	158
789	Cloud Run specifically blocks requests directed at development servers.	4	f	158
790	Only production WSGI servers can bind to the port specified by the `$PORT` environment variable.	5	f	158
791	Docker eliminates the need for a Python web framework like Django or Flask.	1	f	159
792	Docker containers inherently provide zero-downtime deployments.	2	f	159
793	Packaging the application and all its dependencies ensures consistency across different environments.	3	t	159
794	Containers automatically scale the application based on traffic without any configuration.	4	f	159
795	It provides a fully managed database service integrated with the application.	5	f	159
796	To automatically migrate database schemas between different SQL database engines (e.g., MySQL to PostgreSQL).	1	f	160
797	To expose a Cloud SQL instance with a Private IP address directly to the public internet for temporary access.	2	f	160
798	To provide secure, encrypted connections to Cloud SQL instances using IAM authentication, without needing IP whitelisting or manual SSL configuration.	3	t	160
799	To act as a connection pooler, managing database connections directly on the Cloud SQL instance itself.	4	f	160
800	To create read replicas of a Cloud SQL instance in different GCP regions.	5	f	160
801	It encrypts data in transit between the application and the database, which is otherwise unencrypted.	1	f	161
802	Establishing new database connections is resource-intensive; pooling reuses existing connections, reducing latency and preventing exhaustion of connection limits.	2	t	161
803	It allows multiple Cloud Run services to share the exact same database connection simultaneously.	3	f	161
804	Cloud SQL requires connection pooling to be enabled before automated backups can function correctly.	4	f	161
805	Connection pooling enforces transactionality (ACID properties) which Django's ORM cannot guarantee on its own.	5	f	161
806	Django's ORM performs significantly slower when using hardcoded credentials compared to fetched ones.	1	f	162
807	It violates GCP's terms of service regarding credential management.	2	f	162
808	Credentials committed to version control (like Git) become accessible to anyone who can read the repository.	3	t	162
809	Hardcoded credentials prevent the use of the Cloud SQL Auth Proxy for secure connections.	4	f	162
810	Cloud Build pipelines cannot function correctly if credentials are not stored in environment variables.	5	f	162
811	It is primarily used to manage database schema migrations.	1	f	163
812	It allows the application to bypass database connection limits.	2	f	163
813	It distributes query load across multiple database read replicas.	3	f	163
814	It automatically encrypts database credentials stored in the application.	4	f	163
815	It reduces latency and database load by reusing established connections instead of creating a new one for every request.	5	t	163
816	Private IP eliminates the need for database user authentication (usernames/passwords).	1	f	164
817	Private IP enables automatic failover to different regions, which Public IP does not support.	2	f	164
818	The database instance is not directly exposed to the public internet, reducing the attack surface significantly.	3	t	164
819	Private IP automatically encrypts all data stored within the database using stronger algorithms.	4	f	164
820	Connections using Private IP do not require the Cloud SQL Auth Proxy for secure access.	5	f	164
821	The Cloud SQL Auth Proxy.	1	t	165
822	Using SSH tunneling through a Compute Engine instance.	2	f	165
823	Configuring "Authorized Networks" with your local machine's public IP address.	3	f	165
824	Directly connecting using the instance's IP address and standard PostgreSQL tools.	4	f	165
825	Embedding database credentials directly into the application's connection string.	5	f	165
826	It provides a fully managed, scalable, and reliable relational database service, removing operational burdens like patching and backups.	1	t	166
827	It eliminates the need for database migrations (`manage.py migrate`) when changing models.	2	f	166
828	It allows storing the PostgreSQL database file directly within the application's Docker container for portability.	3	f	166
829	It offers significantly lower latency than SQLite for single-user local development environments.	4	f	166
830	It automatically converts all Django ORM queries written for SQLite into optimized PostgreSQL syntax.	5	f	166
831	It reduces the latency and resource overhead associated with establishing new database connections for each request.	1	t	167
832	It allows Django applications to use SQLite features with a PostgreSQL backend.	2	f	167
833	It automatically scales the Cloud SQL instance's CPU and RAM based on connection count.	3	f	167
834	It encrypts database credentials stored within the application.	4	f	167
835	It prevents SQL injection attacks by sanitizing all incoming queries.	5	f	167
836	Forgetting to set up automated backups, risking data loss.	1	f	168
837	Using insufficient instance sizing, leading to performance bottlenecks.	2	f	168
838	Configuring maintenance windows during peak application traffic hours.	3	f	168
839	Not using connection pooling, potentially exhausting database connections.	4	f	168
840	Hardcoding credentials, which poses a severe security risk if the code repository is compromised.	5	t	168
841	To provide secure, authenticated, and encrypted connections to Cloud SQL instances using IAM credentials, without needing IP whitelisting or manual SSL configuration.	1	t	169
842	To automatically scale Cloud SQL instances based on connection load.	2	f	169
843	To perform automated backups of Cloud SQL databases.	3	f	169
844	To directly pool database connections within the application code.	4	f	169
845	To migrate data from SQLite to PostgreSQL in Cloud SQL.	5	f	169
846	It prevents the database instance from being directly accessible from the public internet, reducing the attack surface.	1	t	170
847	It automatically enables end-to-end encryption for all database connections.	2	f	170
848	It eliminates the need for database user authentication (usernames/passwords).	3	f	170
849	It guarantees lower latency connections from Cloud Run services in the same region.	4	f	170
850	It allows using the Cloud SQL Auth Proxy without IAM credentials.	5	f	170
851	It simplifies connecting from local development machines without needing the Cloud SQL Auth Proxy.	1	f	171
852	It eliminates the need for database user authentication (passwords).	2	f	171
853	It automatically enables end-to-end encryption for all database connections.	3	f	171
854	It makes the database instance inaccessible directly from the public internet, reducing the attack surface.	4	t	171
855	It provides significantly higher connection limits compared to Public IP.	5	f	171
856	It requires a service account key file (JSON) to be explicitly loaded from the container's file system.	1	f	172
857	It uses the attached identity provided by the GCP environment; client libraries automatically fetch credentials from the metadata server (Application Default Credentials).	2	t	172
858	It uses short-lived access tokens obtained directly from Secret Manager on every request.	3	f	172
859	It authenticates using the Google Account credentials of the developer who deployed the service.	4	f	172
860	Authentication is handled automatically by Cloud Build during the deployment process, requiring no action from the running application.	5	f	172
861	Fetch the required secret from Secret Manager inside each web request handler that needs it to ensure the latest version is always used.	1	f	173
862	Use the `gcloud secrets access` command via a subprocess call within the Python code for each access.	2	f	173
863	Store secrets retrieved from Secret Manager in environment variables within the running container for faster access.	3	f	173
864	Fetch secrets needed by the application once during startup/initialization and cache them in memory for the lifetime of the process.	4	t	173
865	Batch secret access calls for multiple secrets into a single API request whenever possible within a function.	5	f	173
866	Ensuring all users authenticate with multi-factor authentication.	1	f	174
867	Granting only the minimum set of permissions necessary for a user or service account to perform its specific task.	2	t	174
868	Storing all access keys directly within the application code for easy access.	3	f	174
869	Using only predefined IAM roles and avoiding custom roles for simplicity.	4	f	174
870	Assigning the `Project Owner` role to all service accounts to ensure they never lack permissions.	5	f	174
871	Store secrets directly in environment variables instead of using Secret Manager.	1	f	175
872	Call the `access_secret_version` API within each function or request handler that needs the secret.	2	f	175
873	Create a new Secret Manager client instance for every secret access call.	3	f	175
874	Disable versioning for all secrets to speed up access.	4	f	175
1150	Use Cloud Run's built-in secret service (--django-secret flag)	5	f	230
875	Fetch secrets once during application startup and cache them in application configuration or global variables.	5	t	175
876	Ensuring that all users and service accounts have multi-factor authentication enabled.	1	f	176
877	Granting only the minimum set of permissions necessary for a user or service account to perform its intended function on the most specific resource possible.	2	t	176
878	Using only custom IAM roles instead of predefined roles for better security auditing.	3	f	176
879	Assigning the `Project Viewer` role as the default permission for all new service accounts.	4	f	176
880	Allowing any service account within a project to access any other resource in the same project by default.	5	f	176
881	Service accounts represent non-human identities (applications/services), while user accounts represent individual people.	1	t	177
882	Service accounts have project-wide permissions by default, unlike user accounts.	2	f	177
883	User accounts are used for billing, while service accounts are used for resource creation.	3	f	177
884	Only user accounts can be granted IAM roles; service accounts use API keys.	4	f	177
885	Service accounts authenticate via passwords, while user accounts use downloadable key files.	5	f	177
886	Secrets stored in Secret Manager are automatically injected into the application's memory without needing client libraries.	1	f	178
887	Using Secret Manager eliminates the need to configure IAM permissions for the application's service account.	2	f	178
888	Secret Manager offers significantly faster read access compared to retrieving environment variables within a container.	3	f	178
889	Environment variables cannot be set dynamically during Cloud Run service deployment, unlike Secret Manager values.	4	f	178
890	Secret Manager provides centralized storage, versioning, fine-grained access control (IAM), and auditing specifically designed for secrets.	5	t	178
891	Using Application Default Credentials (ADC), which automatically picks up the attached service account identity.	1	t	179
892	Passing the GCP user account's username and password as environment variables.	2	f	179
893	Configuring the Secret Manager client library with no authentication, relying on VPC network security.	3	f	179
894	Downloading a service account key file (JSON) and embedding it in the container image.	4	f	179
895	Generating short-lived access tokens manually using the `gcloud` command.	5	f	179
896	It allows storing multiple unrelated secrets under the same secret name.	1	f	180
897	It facilitates secret rotation by allowing new versions to be added, provides an audit trail, and enables rollback to previous versions if needed.	2	t	180
898	It encrypts each version of the secret with a different key for enhanced security.	3	f	180
899	It reduces the cost associated with storing secrets compared to unversioned secrets.	4	f	180
900	It automatically updates the application code to use the latest secret version upon deployment.	5	f	180
901	It prompts the user for their Google account username and password during application startup.	1	f	181
902	It uses environment variables like `GOOGLE_ACCESS_TOKEN` passed during deployment.	2	f	181
903	It connects directly using the Cloud Run service's public IP address.	3	f	181
904	It requires a service account key file (JSON) to be explicitly loaded from the container's filesystem.	4	f	181
905	It automatically uses Application Default Credentials (ADC) to fetch credentials from the instance metadata server associated with the attached service account.	5	t	181
906	Assigning the "Project Owner" role to all service accounts for maximum flexibility.	1	f	182
907	Ensuring that all secrets are stored using the oldest available version for compatibility.	2	f	182
908	Requiring multi-factor authentication for all principals accessing any resource.	3	f	182
909	Granting only the minimum permissions necessary for a user or service account to perform its specific task, on the most specific resource possible.	4	t	182
910	Using user accounts instead of service accounts for all application authentication.	5	f	182
911	Pass them as command-line arguments to the Gunicorn startup command.	1	f	183
912	Hardcode them directly into the Django `settings.py` file for simplicity.	2	f	183
913	Store them as plain text environment variables in the Cloud Run service configuration.	3	f	183
914	Commit encrypted credential files directly into the Git repository.	4	f	183
915	Store them in Secret Manager and grant the Cloud Run service account the `Secret Manager Secret Accessor` role for specific secrets.	5	t	183
916	It allows developers to bypass the CI process and deploy directly to production in emergencies.	1	f	184
917	It reduces the risk of introducing bugs or breaking changes into production by allowing testing in progressively production-like environments first.	2	t	184
918	It significantly speeds up the build process by running deployment steps in parallel across all environments.	3	f	184
919	It eliminates the need for automated tests, as issues can be caught manually in the staging environment.	4	f	184
920	It ensures that the exact same infrastructure configuration is used across all environments, including database sizes and network settings.	5	f	184
921	It reduces the final size of the Docker image artifact produced by the build.	1	f	185
922	It ensures that security vulnerabilities found in dependencies are automatically patched during the build process.	2	f	185
923	It is required to enable the deployment step to Cloud Run within the `cloudbuild.yaml` file.	3	f	185
924	It allows the build process to run offline without needing access to package repositories like PyPI.	4	f	185
925	It significantly speeds up build times by avoiding redundant downloads of Python packages (`pip install`) if requirements haven't changed.	5	t	185
2040	The `pytest` test runner itself.	5	f	408
926	Network latency issues between Cloud Build runners and the code repository host.	1	f	186
927	Bugs within the Cloud Build service itself that cause intermittent test failures.	2	f	186
928	Discrepancies in dependencies, missing environment variables, or lack of access to required services (like a test database) in the CI environment.	3	t	186
929	The CI environment running tests significantly faster, exposing timing-related bugs not seen locally.	4	f	186
930	The Cloud Build environment using an incompatible CPU architecture compared to the local machine.	5	f	186
931	By manually downloading dependencies before starting the Cloud Build trigger.	1	f	187
932	By installing all dependencies globally on the Cloud Build worker machines.	2	f	187
933	By using the `--no-cache-dir` flag during `pip install`.	3	f	187
934	By using multi-stage Docker builds exclusively.	4	f	187
935	By structuring the Dockerfile to install requirements before copying application code, leveraging Docker layer caching, or using Cloud Build cache volumes.	5	t	187
936	It stores the environment variables and secrets needed by the application during runtime.	1	f	188
937	It configures the trigger conditions (e.g., push to branch) that start a Cloud Build execution.	2	f	188
938	It specifies the IAM permissions required for the Cloud Build service account to operate.	3	f	188
939	It defines the series of steps (commands run in specific builder containers) that Cloud Build executes to perform tasks like testing, building artifacts, and deploying.	4	t	188
940	It contains the source code of the application that needs to be built and deployed.	5	f	188
941	To store the environment variables and secrets needed by the application at runtime.	1	f	189
942	To specify the IAM permissions required by the Cloud Build service account.	2	f	189
943	To define the sequence of steps (like testing, building images, deploying) that constitute the CI/CD pipeline.	3	t	189
944	To manage the database schema migrations for the Django application.	4	f	189
945	To configure the auto-scaling parameters for the Cloud Run service.	5	f	189
946	To automatically deploy every code change that passes tests directly into the production environment.	1	f	190
947	To manage infrastructure configurations using code (Infrastructure-as-Code).	2	f	190
948	To perform manual code reviews and quality assurance checks before merging code.	3	f	190
949	To package the final application artifact (e.g., Docker image) for manual deployment.	4	f	190
950	To frequently integrate code changes into a shared repository and verify each integration with automated builds and tests to detect issues early.	5	t	190
951	Using `pip freeze &gt; requirements.txt` which creates unstable builds; fix by manually listing only top-level dependencies.	1	f	191
952	Not caching dependencies, leading to slow builds; fix by leveraging Docker layer caching or Cloud Build cache volumes.	2	t	191
953	Installing test dependencies in the final runtime image; fix by using multi-stage builds to exclude them.	3	f	191
954	Forgetting to grant the Cloud Build service account network access; fix by assigning the `Project Editor` role.	4	f	191
955	Running `pip install` with the `--no-cache-dir` flag which prevents caching; fix by removing this flag.	5	f	191
956	Cloud Build intentionally introduces random failures to test code resilience.	1	f	192
957	Local development environments typically run tests much faster than CI environments.	2	f	192
958	Cloud Build does not support running database-dependent tests.	3	f	192
959	Missing environment variables, incorrect service account permissions for needed resources (like a test DB), or slight differences in dependency versions.	4	t	192
960	The Python version used by the Cloud Build builder image is incompatible with Django.	5	f	192
961	A sequence of commands to be executed, each typically running within a specified container image (builder).	1	t	193
962	The final deployment configuration for Cloud Run, including environment variables.	2	f	193
963	The network settings and firewall rules for the build environment.	3	f	193
964	The source code repository and branch that trigger the build.	4	f	193
965	The IAM permissions required by the Cloud Build service account.	5	f	193
966	To manage infrastructure provisioning using tools like Terraform.	1	f	194
967	To automatically deploy every successful build directly to the production environment.	2	f	194
968	To automatically build and test code changes frequently to detect integration errors early.	3	t	194
969	To manually trigger deployments after successful testing.	4	f	194
970	To monitor application performance and logs in real-time.	5	f	194
971	To optimize the application's performance through automated load testing.	1	f	195
972	To manually review and approve code changes before they are merged.	2	f	195
973	To frequently integrate code changes and automatically build and test them to detect issues early.	3	t	195
974	To automatically deploy every successful build directly to the production environment.	4	f	195
975	To provision and manage the cloud infrastructure required for the application.	5	f	195
976	It automatically uses Application Default Credentials (ADC) obtained from the Cloud Run environment's metadata server, leveraging the attached service account's permissions.	1	t	196
977	It reads credentials directly from environment variables named `GCS_ACCESS_KEY` and `GCS_SECRET_KEY`.	2	f	196
978	It requires the path to a service account key file to be explicitly configured in Django's `settings.py` via the `GS_CREDENTIALS` setting.	3	f	196
979	Authentication must be manually performed within each Django view that interacts with Cloud Storage.	4	f	196
980	It relies on the Cloud SQL Auth Proxy to handle authentication for Cloud Storage access.	5	f	196
981	To grant temporary, direct browser access for end-users to upload or download specific private objects securely.	1	t	197
982	To provide the Django backend service account with long-term administrative access to the bucket.	2	f	197
983	To configure Cross-Origin Resource Sharing (CORS) policies on the bucket.	3	f	197
984	To replace the need for IAM permissions entirely when accessing bucket data.	4	f	197
985	To serve all public static assets (CSS, JS) globally via the Cloud CDN.	5	f	197
986	Object storage requires manual data sharding, whereas file systems handle this automatically.	1	f	198
987	File systems offer significantly higher scalability and durability compared to object storage.	2	f	198
988	Accessing object storage is typically faster for small, frequently modified files than using a file system.	3	f	198
989	Object storage uses a flat namespace and immutable objects accessed via API, while file systems are hierarchical and allow in-place modification.	4	t	198
990	Object storage is primarily designed for temporary data, while file systems provide persistent storage.	5	f	198
991	It automatically compresses static assets using formats like Brotli, which Cloud Storage cannot do natively.	1	f	199
992	It caches content closer to users globally, reducing latency and potentially lowering egress costs from Cloud Storage.	2	t	199
993	It provides authentication and authorization for accessing static assets, removing the need for bucket permissions.	3	f	199
994	It allows running server-side code (like Cloud Functions) at the edge to manipulate static assets before serving.	4	f	199
995	It integrates directly with Django's `collectstatic` command to manage asset deployment.	5	f	199
996	Storing files directly on the Cloud Run instance filesystem is reliable due to persistent storage.	1	f	200
997	Proxying large file uploads through the Cloud Run instance is inefficient; use direct-to-GCS uploads via Signed URLs instead.	2	t	200
998	Cloud Run instances have unlimited disk space, making direct uploads easy but costly.	3	f	200
999	Signed URLs expire too quickly for large uploads; increase expiration time to several hours.	4	f	200
1000	Forgetting to configure CORS on the Cloud Run service; enable CORS in the Django application.	5	f	200
1001	It significantly slows down upload speeds due to increased permission checking by Cloud Storage.	1	f	201
1002	It creates a major security risk, allowing anyone on the internet to upload arbitrary files, potentially leading to abuse and increased costs.	2	t	201
1003	It prevents the use of Signed URLs for managing uploads, as the bucket is already public.	3	f	201
1004	It disables object versioning for the entire bucket, preventing recovery from accidental deletions.	4	f	201
1005	It makes the bucket incompatible with Cloud CDN for serving assets.	5	f	201
1006	To provide permanent public read access to specific objects within an otherwise private bucket.	1	f	202
1007	To serve static website content directly from a Cloud Storage bucket over HTTPS.	2	f	202
1008	To allow service accounts to authenticate to Cloud Storage without requiring IAM roles assigned.	3	f	202
1009	To grant temporary, specific permission (e.g., upload a file with a specific name) directly to an end-user's browser, allowing them to upload to a private bucket without needing GCP credentials.	4	t	202
1010	To trigger Cloud Functions automatically whenever a file is uploaded via the signed URL.	5	f	202
1011	To compress static assets using algorithms like Brotli and Gzip.	1	f	203
1012	To automatically run `collectstatic` whenever static files change in the repository.	2	f	203
1013	To provide authentication for accessing private static assets stored in GCS.	3	f	203
1014	To manage DNS records pointing to the Cloud Storage bucket.	4	f	203
1015	To cache assets at edge locations closer to users, reducing latency and potentially lowering GCS egress costs.	5	t	203
1016	Accessing files in Cloud Storage is significantly faster than accessing files on a local file system due to GCP's network.	1	f	204
1017	Cloud Storage buckets have strict size limits per object, unlike file systems which handle arbitrarily large files.	2	f	204
1018	Object storage uses a flat namespace and objects are typically immutable (replaced, not modified in place), accessed via APIs, designed for massive scale. File systems are hierarchical and allow in-place modification.	3	t	204
1019	Cloud Storage encrypts objects by default, whereas file systems require manual encryption setup.	4	f	204
1020	File systems provide versioning for files automatically, while Cloud Storage requires explicit configuration.	5	f	204
1021	The Cloud Storage bucket does not have a CORS policy configured to allow requests (like PUT) from the origin `https://myapp.com`.	1	t	205
1022	Cloud CDN is improperly configured and blocking the upload request.	2	f	205
1023	The file being uploaded exceeds the maximum size limit for the bucket.	3	f	205
1024	The Signed URL generated by the backend has expired before the upload attempt.	4	f	205
1025	The service account used to generate the Signed URL lacks the necessary IAM permissions on the bucket.	5	f	205
1026	To configure the Cloud CDN to cache the static files from the Cloud Storage bucket.	1	f	206
1027	To generate Signed URLs for all static files stored in the Cloud Storage bucket.	2	f	206
1028	To download static files from the Cloud Storage bucket to the local Cloud Run instance filesystem.	3	f	206
1029	To find all static files (CSS, JS, images) from Django apps and upload them to the specified Cloud Storage bucket.	4	t	206
1030	To compress and minify static files before they are served by the Django development server.	5	f	206
1151	It provides a required security layer between Cloud Run and Django	1	f	231
1031	Uploaded files will not be publicly accessible by default, and access will be controlled primarily via IAM or Signed URLs.	1	t	207
1032	Access Control Lists (ACLs) are completely disabled in favor of Uniform Bucket-Level Access (IAM).	2	f	207
1033	It encrypts the files at rest using customer-managed encryption keys.	3	f	207
1034	Only the Django application's service account can read the files; Signed URLs cannot be generated.	4	f	207
1035	All uploaded files will be automatically readable by anyone on the internet.	5	f	207
1036	Temporarily making the entire bucket publicly writable during the upload process.	1	f	208
1037	Using legacy ACLs to grant the user's Google account temporary write access.	2	f	208
1038	Proxying the entire file upload through the backend application running on Cloud Run.	3	f	208
1039	The backend application generates a time-limited Signed URL with PUT permissions, which the browser then uses to upload the file directly to GCS.	4	t	208
1040	Embedding the application's service account key directly in the frontend JavaScript.	5	f	208
1041	Storing files locally on Cloud Run instances violates GCP's terms of service.	1	f	209
1042	Files stored on Cloud Run instances cannot be accessed via HTTP requests.	2	f	209
1043	Cloud Run instances are ephemeral, have limited disk space, and don't share a filesystem, whereas Cloud Storage offers durable, scalable object storage.	3	t	209
1044	Cloud Storage automatically compresses files, saving significant space compared to local storage.	4	f	209
1045	Cloud Storage provides faster read/write access than the local filesystem of Cloud Run instances.	5	f	209
1046	CORS is required by Cloud Storage to validate the integrity of the uploaded file using checksums.	1	f	210
1047	The `django-storages` library requires CORS to be enabled on the bucket before it can generate signed URLs.	2	f	210
1048	GCP Billing uses CORS configuration to correctly attribute egress costs associated with signed URL downloads.	3	f	210
1049	CORS headers provide an extra layer of encryption for file uploads originating from web browsers.	4	f	210
1050	Web browsers enforce the same-origin policy, blocking JavaScript from making requests (like PUT uploads) to a different domain (GCS) unless the server (GCS bucket) explicitly allows it via CORS headers.	5	t	210
1051	The IAM role required for a service account to write custom metrics to Cloud Monitoring.	1	f	211
1052	A dashboard displaying real-time performance graphs and log entries for a specific service.	2	f	211
1053	A configuration file that specifies how application logs should be formatted for ingestion into Cloud Logging.	3	f	211
1054	A set of conditions based on metrics or logs that, when met, trigger notifications to specified channels (e.g., email, Slack).	4	t	211
1055	The schedule on which automated monitoring reports are generated and emailed to stakeholders.	5	f	211
1056	Setting the log level to DEBUG for all loggers to ensure no messages are missed, regardless of performance impact.	1	f	212
1057	Writing logs directly to standard output (`print` statements) and letting the Cloud Run agent handle formatting and sending.	2	f	212
1058	Using the `BackgroundThreadTransport` to batch logs and send them asynchronously, reducing the impact on request handling time.	3	t	212
1059	Disabling logging entirely during peak traffic hours to maximize application throughput.	4	f	212
1060	Manually constructing JSON strings for each log message instead of using the library's handler.	5	f	212
1061	Increased Cloud Monitoring costs due to the excessive number of alert evaluations being performed.	1	f	213
1062	Degraded application performance because the alerting system consumes too many resources.	2	f	213
1063	Inability to create new alert policies once a certain fatigue threshold is reached.	3	f	213
1064	Automatic suspension of the GCP project due to violation of alerting quotas.	4	f	213
1065	Responders start ignoring notifications, potentially missing genuinely critical alerts when they occur.	5	t	213
1066	To automatically visualize logs within the Cloud Monitoring dashboard without configuration.	1	f	214
1067	To reduce the cost associated with Cloud Monitoring by replacing standard metrics.	2	f	214
1068	To configure the scaling parameters for the Cloud Run service.	3	f	214
1069	To track application-specific business logic or performance indicators (e.g., orders processed, cache hit rate) that aren't captured by default infrastructure metrics.	4	t	214
1070	To enable basic logging functionality for the application.	5	f	214
1071	To store detailed application log messages directly within the Cloud Monitoring service instead of Cloud Logging.	1	f	215
1072	To define the visual appearance (charts, graphs) of monitoring dashboards in the GCP Console.	2	f	215
1073	To override the standard metrics (like CPU Utilization) provided by GCP services with more accurate application-level data.	3	f	215
1074	To trigger automated rollbacks of Cloud Run deployments when standard metrics exceed certain thresholds.	4	f	215
1075	To track application-specific performance indicators or business events (e.g., 'orders processed', 'cache hit rate') that are not covered by standard GCP infrastructure metrics.	5	t	215
1076	To replace the need for structured logging by converting all log entries into metrics.	1	f	216
1077	To track application-specific business logic or performance indicators not covered by standard GCP metrics.	2	t	216
1078	To visualize the cost breakdown of different GCP services used by the application.	3	f	216
1079	To automatically adjust Cloud Run's scaling parameters based on application behavior.	4	f	216
1080	To provide real-time debugging information directly within the application code.	5	f	216
1081	It allows for easy programmatic filtering, searching, and analysis of logs based on specific fields (keys/values), enabling better monitoring and alerting.	1	t	217
1082	Plain text logs cannot be viewed in the Google Cloud Console Logs Explorer interface.	2	f	217
1083	Structured logging automatically redacts sensitive information like passwords and API keys from log entries.	3	f	217
1084	Structured logs consume significantly less storage space in Cloud Logging compared to plain text logs.	4	f	217
1085	Only structured logs can be automatically associated with the originating Cloud Run service or Cloud Function.	5	f	217
1086	To automatically add HTTP request context to every log entry.	1	f	218
1087	To filter log messages based on severity level before they are processed by the handler.	2	f	218
1088	To improve application performance by batching logs and sending them asynchronously in a separate thread.	3	t	218
1089	To encrypt log messages before they are sent to the Cloud Logging API.	4	f	218
1090	To ensure logs are written synchronously, guaranteeing delivery before the application proceeds.	5	f	218
1091	To improve application performance by batching log entries and sending them to the Cloud Logging API asynchronously in a separate thread.	1	t	219
1092	To route logs based on severity level to different Cloud Logging sinks.	2	f	219
1093	To enable logging detailed stack traces only when running in a background thread.	3	f	219
1094	To ensure logs are written to Cloud Storage as a backup before being sent to Cloud Logging.	4	f	219
1095	To automatically add structured context like HTTP request details to every log entry.	5	f	219
1096	It automatically encrypts log data before it is sent to Cloud Logging.	1	f	220
1097	It allows logs to be easily parsed, filtered, searched, and used for creating metrics or alerts based on specific fields within the log entry.	2	t	220
1098	It significantly reduces the volume of log data generated, lowering storage costs.	3	f	220
1099	It eliminates the need to include timestamps in log messages.	4	f	220
1100	It is the only format supported by the standard Python `logging` module.	5	f	220
1101	A metric measuring the CPU load generated by the Cloud Monitoring agent.	1	f	221
1102	The maximum number of alerts that can be configured within a single GCP project.	2	f	221
1103	The inability of the alerting system to detect certain types of critical failures.	3	f	221
1104	The delay between an incident occurring and the corresponding alert notification being sent.	4	f	221
1105	A situation where responders start ignoring alerts due to excessive noise from poorly configured or non-actionable notifications.	5	t	221
1106	A service account key and the region where the monitored resource resides.	1	f	222
1107	The source code of the application and its associated Dockerfile.	2	f	222
1108	A dashboard configuration file and a list of users authorized to view it.	3	f	222
1109	A condition (monitoring a metric or log query against a threshold) and one or more notification channels (where to send alerts).	4	t	222
1110	A Cloud Storage bucket for storing alert history and a Pub/Sub topic for triggering actions.	5	f	222
1111	It makes log messages more readable for humans directly in the console output.	1	f	223
1112	It allows for easy filtering, searching, and programmatic analysis of logs based on specific fields in Cloud Logging.	2	t	223
1113	It automatically redacts sensitive information like passwords from log entries.	3	f	223
1114	It is the only format supported by the Cloud Monitoring dashboard's Log Panels.	4	f	223
1115	It significantly reduces the volume of log data generated, lowering costs.	5	f	223
1116	Apache with mod_wsgi using 16 processes	1	f	224
1117	gunicorn with 32 workers and no threading	2	f	224
1118	gunicorn with 1 worker and 1 thread to minimize memory usage	3	f	224
1119	gunicorn with 2-3 workers and 4 threads per worker	4	t	224
1120	Django's development server with debug disabled	5	f	224
1121	It validates that migrations will work in the cloud environment	1	f	225
1122	It converts Django migrations to SQL-specific syntax	2	f	225
1123	It provides temporary admin credentials to the database	3	f	225
1124	It automatically generates the migration files based on your models	4	f	225
1125	It creates a secure, authenticated connection tunnel from your local machine to your Cloud SQL instance without requiring firewall rules	5	t	225
1126	ENTRYPOINT ["python", "manage.py", "collectstatic"]	1	f	226
1127	DJANGO collectstatic --noinput	2	f	226
1128	EXEC python manage.py collectstatic --noinput	3	f	226
1129	CMD python manage.py collectstatic --noinput	4	f	226
1130	RUN python manage.py collectstatic --noinput	5	t	226
1131	SERVICE_URL	1	t	227
1132	APP_DOMAIN	2	f	227
1133	GOOGLE_SERVICE_DOMAIN	3	f	227
1134	CLOUD_RUN_URL	4	f	227
1135	DJANGO_HOST	5	f	227
1136	secretmanager.googleapis.com	1	f	228
1137	cloudbuild.googleapis.com	2	f	228
1138	run.googleapis.com	3	f	228
1139	sqladmin.googleapis.com	4	f	228
1140	appengine.googleapis.com	5	t	228
1141	Cloud SQL, as the database instance runs continuously even when there is no traffic	1	t	229
1142	Secret Manager access fees	2	f	229
1143	Cloud Run compute resources	3	f	229
1144	Container Registry storage	4	f	229
1145	Cloud Build minutes	5	f	229
1146	Store it in a file within the Docker image	1	f	230
1147	Store it in Google Secret Manager and inject it as an environment variable using the --set-secrets flag	2	t	230
1152	It compresses the Django code base to reduce container size	2	f	231
1153	It's a required component to access Cloud SQL databases	3	f	231
1154	It allows the web server to serve static files directly and efficiently, often with better caching behavior	4	t	231
1155	It manages database connection pooling	5	f	231
1156	It automatically compresses all static files	1	f	232
1157	It's critical for security as it disables detailed error pages and other development helpers that could expose sensitive information	2	t	232
1158	It prevents users from accessing the admin interface	3	f	232
1159	It's required by Google Cloud Run to enable the service	4	f	232
1160	It improves application performance by at least 50%	5	f	232
1161	It disables SSL for development environments only	1	f	233
1162	It forces all HTTP requests to be redirected to HTTPS	2	f	233
1163	It enables SSL certificate verification for all outgoing requests	3	f	233
1164	It specifies the path to the SSL certificate files	4	f	233
1165	It tells Django to trust the X-Forwarded-Proto header from Google's load balancers to correctly identify secure HTTPS requests	5	t	233
1166	It grants the Cloud Run service admin privileges to the database	1	f	234
1167	It creates a new Cloud SQL instance during deployment	2	f	234
1168	It creates a direct public connection to your database	3	f	234
1169	It syncs your local database schema to Cloud SQL	4	f	234
1170	It provisions a Cloud SQL Auth Proxy sidecar container that creates a secure connection tunnel to your Cloud SQL instance	5	t	234
1171	It ensures Django will start properly since all dependencies are loaded first	1	f	235
1172	It's required by Google Cloud Run's security protocols	2	f	235
1173	It allows Django to validate the requirements before installing the application	3	f	235
1174	It leverages Docker's layer caching mechanism to speed up subsequent builds if only application code changes	4	t	235
1175	It prevents Python package conflicts with the container's base image	5	f	235
1176	It defines which files should be backed up before deployment	1	f	236
1177	It's required by Google Cloud Build to identify Django applications	2	f	236
1178	It tells Cloud Run which files to exclude from logging	3	f	236
1179	It tells Docker what not to copy into the container image, keeping the image small, speeding up builds, and avoiding including sensitive files	4	t	236
1180	It specifies which Docker commands are allowed to run inside the container	5	f	236
1181	It integrates natively with Django's development server	1	f	237
1182	It eliminates the need to use Docker containers	2	f	237
1183	It scales down to zero instances when not in use, saving costs by only charging when requests are being processed	3	t	237
1184	It provides unlimited free storage for Django applications	4	f	237
1185	It automatically handles database migrations during deployment	5	f	237
1186	It enables traffic encryption for the specified port	1	f	238
1187	It opens the specified port on the container to the public internet	2	f	238
1188	It documents which port the application will listen on inside the container, but does not actually publish the port	3	t	238
1189	It maps an external port to an internal container port	4	f	238
1190	It tells Cloud Run which port to route traffic to	5	f	238
1191	Your tables will be created but without any constraints or indexes	1	f	239
1192	Your application will likely show database errors as the schema doesn't exist in Cloud SQL	2	t	239
1193	The container will fail to start entirely	3	f	239
1194	Cloud Run will detect and run missing migrations	4	f	239
1195	Django will automatically run migrations on the first request	5	f	239
1196	python manage.py runserver 0.0.0.0:8080	1	f	240
1197	gunicorn core.wsgi:application --bind 0.0.0.0:8080	2	t	240
1198	nginx -c /etc/nginx/django.conf	3	f	240
1199	uwsgi --http :8080 --module core.wsgi	4	f	240
1200	django-admin start --production --port=8080	5	f	240
1201	Secret Manager Admin	1	f	241
1202	Storage Object Viewer	2	f	241
1203	Cloud Run Secret User	3	f	241
1204	IAM Security Manager	4	f	241
1205	Secret Manager Secret Accessor	5	t	241
1206	Django's development server doesn't support serving static files in the cloud	1	f	242
1207	Django's development server cannot run in Docker containers	2	f	242
1208	gunicorn is required to connect to Cloud SQL databases	3	f	242
1209	The built-in Django development server is not suitable for production as it's insecure and inefficient, while gunicorn is a robust production-grade WSGI server	4	t	242
1210	gunicorn is the only web server compatible with Google Cloud Run	5	f	242
1211	postgresql://USER:PASSWORD@/DATABASE?host=/cloudsql/PROJECT:REGION:INSTANCE	1	t	243
1212	postgres://USER:PASSWORD@INSTANCE_IP:5432/DATABASE	2	f	243
1213	django-db://USER:PASSWORD@cloudsql/DATABASE	3	f	243
1214	sql://google/PROJECT/REGION/INSTANCE/DATABASE?user=USER=PASSWORD	4	f	243
1215	cloudsql://PROJECT:REGION:INSTANCE/DATABASE/USER/PASSWORD	5	f	243
1216	8080	1	f	244
1217	3306	2	f	244
1218	5432	3	t	244
1219	1433	4	f	244
1220	27017	5	f	244
1221	It prevents Python from generating .pyc compiled files, reducing clutter in the container	1	t	245
1222	It disables all file writing operations in Python	2	f	245
1223	It forces Python to compile all code at container startup	3	f	245
1224	It forces Django to serve only static files	4	f	245
1225	It prevents Django from writing to the database	5	f	245
1226	It compiles Python code to binary format for faster execution	1	f	246
1227	It limits Python's memory usage in the container	2	f	246
1228	It ensures Python output (like logs) is sent straight to the terminal without buffering, making logs immediately visible	3	t	246
1229	It disables Python's garbage collection to improve performance	4	f	246
1230	It tells Django to use asynchronous views only	5	f	246
1231	The command that gets executed when a container starts from the image	1	t	247
1232	The list of files to include in the container	2	f	247
1233	The URL path where the application will be accessible	3	f	247
1234	Commands to run during the image build process	4	f	247
1235	The maximum memory allocation for the container	5	f	247
1236	It provides automatic backups that larger instances don't have	1	f	248
1237	It can automatically scale to handle traffic spikes	2	f	248
1238	It significantly reduces the ongoing cost while still providing sufficient performance for low-traffic applications	3	t	248
1239	It has built-in Django ORM optimizations	4	f	248
1240	It allows more concurrent connections than larger instances	5	f	248
1241	It configures Google Cloud Storage to automatically synchronize with Django	1	f	249
1242	It disables static file access in production environments	2	f	249
1243	It specifies which static files should be excluded from the deployment	3	f	249
1244	It specifies the storage backend for static files, allowing Whitenoise to compress files and add version hashes for improved caching	4	t	249
1245	It defines the URL pattern that will be used to access static files	5	f	249
1246	Only the admin interface will be inaccessible	1	f	250
1247	Static files won't be served properly	2	f	250
1248	Cloud Run will automatically add the correct hosts during deployment	3	f	250
1249	Django will respond with a "Bad Request (400)" error when accessed, as it's a security measure against HTTP Host header attacks	4	t	250
1250	The application will work normally but with reduced security	5	f	250
1251	CSRF tokens must be stored in Google Cloud Storage instead of cookies	1	f	251
1252	CSRF_TRUSTED_ORIGINS needs to include the Cloud Run service URL because Cloud Run sits behind Google's load balancers	2	t	251
1253	A custom CSRF middleware must be written specifically for Cloud Run	3	f	251
1254	Cloud Run automatically handles CSRF protection without Django configuration	4	f	251
1255	CSRF protection must be disabled entirely on Cloud Run	5	f	251
1256	Google requires all Cloud Run applications to use environment variables	1	f	252
1257	It follows the 12-Factor App methodology, keeping secrets out of code and allowing Cloud Run to inject settings during deployment	2	t	252
1258	Environment variables are faster to process than configuration files	3	f	252
1259	It's the only way to override settings in the Django settings.py file	4	f	252
1260	Django can only read configuration from environment variables in production	5	f	252
1261	It sets the default directory inside the container, making subsequent paths simpler as all commands will be relative to /app	1	t	253
1262	Google Cloud Run requires the application to be in the /app directory	2	f	253
1263	It automatically creates Django's application structure	3	f	253
1264	It's required to access Cloud SQL databases from containers	4	f	253
1265	Django will only run from a directory named /app in production environments	5	f	253
1266	It disables all security features in Cloud Run	1	f	254
1267	It enables anonymous admin access to your Django application	2	f	254
1268	It makes your service accessible to the public internet without requiring Google account login	3	t	254
1269	It permits connections to your database without credentials	4	f	254
1270	It allows your service to access other Google Cloud services without authentication	5	f	254
1271	Compute Engine	1	f	255
1272	Kubernetes Engine	2	f	255
1273	Cloud Build	3	t	255
1274	Container Registry	4	f	255
1275	App Engine Flex	5	f	255
1276	Use Google's dependency service instead of pip install	1	f	256
1277	Create a separate builder stage that installs dependencies, then copy them to the runtime stage to keep the final image lean	2	t	256
1278	Install all dependencies globally in the base system to ensure they're available to all containers	3	f	256
1279	Download dependencies at runtime when the container starts	4	f	256
1280	Bundle all dependencies directly in the application code to avoid installation	5	f	256
1281	It ensures consistent packaging of the application and all its dependencies across different environments	1	t	257
1282	It automatically optimizes your Django code to run 3x faster	2	f	257
1283	It eliminates the need for a database in Django applications	3	f	257
1284	It allows Django to run without a WSGI server	4	f	257
1285	It provides full administrative access to Google Cloud Platform	5	f	257
1286	On the local machine, with files uploaded to Cloud Storage separately	1	f	258
1287	During the Docker image build process (in the Dockerfile) so static files are included in the image	2	t	258
2869	<code>models.DateField</code>	4	f	574
1288	After deployment, as part of the container startup process	3	f	258
1289	Only in development environments as static files are not needed in production	4	f	258
1290	Automatically by Cloud Run during the deployment	5	f	258
1291	Gunicorn is optional but whitenoise is required by Cloud Run	1	f	259
1292	Gunicorn is the WSGI server that runs your Django application, while whitenoise is middleware that efficiently serves static files	2	t	259
1293	Gunicorn is a development server while whitenoise is a production server	3	f	259
1294	Gunicorn manages database connections while whitenoise handles HTTP requests	4	f	259
1295	Gunicorn serves static files while whitenoise handles Python code execution	5	f	259
1296	Public IP whitelisting	1	f	260
1297	Django's database router	2	f	260
1298	A direct VPC network connection	3	f	260
1299	Google Cloud Connector plugin	4	f	260
1300	The Cloud SQL Auth Proxy sidecar container	5	t	260
1301	Django's ORM features are limited when using SQLite in production	1	f	261
1302	Cloud Run instances have ephemeral filesystems - any data written to the container is lost when it restarts or scales down	2	t	261
1303	SQLite cannot handle more than one concurrent connection	3	f	261
1304	SQLite databases are incompatible with Python when running in containers	4	f	261
1305	Google charges extra fees for file-based databases in Cloud Run	5	f	261
1306	It enables encrypted communication between microservices	1	f	262
1307	It encrypts all environment variables in the container	2	f	262
1308	It sets a password for accessing the Cloud Run service	3	f	262
1309	It creates new secrets in Secret Manager during deployment	4	f	262
1310	It maps secrets from Secret Manager to environment variables inside the container	5	t	262
1311	postgresql://cloudsql/USER:PASSWORD@PROJECT:REGION:INSTANCE/DATABASE	1	f	263
1312	postgresql://USER:PASSWORD@PROJECT:REGION:INSTANCE/DATABASE	2	f	263
1313	postgresql://USER@/DATABASE?host=/cloudsql/PROJECT:REGION:INSTANCE	3	t	263
1314	postgresql://googlecloud/USER:PASSWORD/DATABASE/PROJECT:REGION:INSTANCE	4	f	263
1315	postgresql://USER:PASSWORD@localhost/DATABASE?project=PROJECT=REGION	5	f	263
1316	SignupView	1	f	264
1317	RegistrationView	2	f	264
1318	CreateView	3	t	264
1319	UserView	4	f	264
1320	FormView	5	f	264
1321	<code>request.user.has_perm('app_label.permission_codename')</code>	1	t	265
1322	<code>django.contrib.auth.check_perm(request.user, 'app_label.permission_codename')</code>	2	f	265
1323	<code>user_permissions.contains('app_label.permission_codename')</code>	3	f	265
1324	<code>request.user.is_permitted('app_label.permission_codename')</code>	4	f	265
1325	<code>request.user.permissions.check('app_label.permission_codename')</code>	5	f	265
1326	To restrict which admin pages a set of users can access	1	f	266
1327	To implement multi-tenancy by isolating users into separate databases	2	f	266
1328	To organize users for messaging and notification purposes	3	f	266
1329	To assign permissions to multiple users at once, implementing role-based access control	4	t	266
1330	To categorize users for analytics and reporting purposes	5	f	266
1331	<code>{% if user.has_perm.app_label.permission_codename %}</code>	1	f	267
1332	<code>{% if perms.app_label.permission_codename %}</code>	2	t	267
1333	<code>{% if user_permissions.app_label.permission_codename %}</code>	3	f	267
1334	<code>{% if user|has_permission:app_label.permission_codename %}</code>	4	f	267
1335	<code>{% if user.permissions.permission_codename %}</code>	5	f	267
1336	It provides a login form at the top of the rendered template	1	f	268
1337	It validates that the current user has the required permissions to access the view	2	f	268
1338	It restricts access to the view to authenticated users only, redirecting unauthenticated users to the login page	3	t	268
1339	It creates a new login session if the user's previous session has expired	4	f	268
1340	It adds the current user object to the template context automatically	5	f	268
1341	The user's complete User object including all permissions	1	f	269
1342	The user's session expiration timestamp and authentication level	2	f	269
1343	The user's ID (stored as '_auth_user_id' in the session data)	3	t	269
1344	A JWT token containing the user's identity and permissions	4	f	269
1345	The user's username and a hash of their password	5	f	269
1346	It allows the user to create and modify other user accounts	1	f	270
1347	It permits the user to change site-wide settings but not individual model instances	2	f	270
1348	It restricts the user to only superuser-specific views and functions	3	f	270
1349	It gives the user access to the admin interface but still requires explicit permissions	4	f	270
1350	It grants the user all permissions automatically, bypassing normal permission checks	5	t	270
1351	It encrypts the form data during transmission	1	f	271
1352	It validates that the form was generated by the server and not modified	2	f	271
1353	It prevents the browser from caching the form submission	3	f	271
1354	It generates a secure token to prevent Cross-Site Request Forgery attacks	4	t	271
1355	It creates a unique session ID for the login attempt	5	f	271
2870	<code>models.BooleanField</code>	5	f	574
1356	The user is redirected to an access denied page defined in settings.PERMISSION_DENIED_URL	1	f	272
1357	The user is redirected to the homepage with an error message	2	f	272
1358	The view returns None and the request continues to the next matching URL pattern	3	f	272
1359	The decorator logs the attempt and lets the view execute normally	4	f	272
1360	A PermissionDenied exception is raised, resulting in a 403 Forbidden response	5	t	272
1361	phone_number	1	t	273
1362	last_name	2	f	273
1363	is_superuser	3	f	273
1364	is_active	4	f	273
1365	is_staff	5	f	273
1366	Because AuthenticationMiddleware depends on session data being loaded to retrieve user authentication information	1	t	274
1367	Because SessionMiddleware must create new sessions for users who log in through AuthenticationMiddleware	2	f	274
1368	Because AuthenticationMiddleware needs to save user data to the session after authentication	3	f	274
1369	Middleware order doesn't matter; it's just a convention in Django	4	f	274
1370	Because Django processes middleware in reverse order during request processing	5	f	274
1371	is_staff allows viewing admin pages, while is_superuser allows making changes	1	f	275
1372	is_staff grants access to the Django admin interface, while is_superuser automatically grants all permissions	2	t	275
1373	is_staff allows read access to all models, while is_superuser allows write access	3	f	275
1374	is_staff can only access model data, while is_superuser can access system settings	4	f	275
1375	is_staff is for employees, while is_superuser is for site administrators	5	f	275
1376	In plain text, but only accessible to superusers	1	f	276
1377	As encrypted plain text that can be decrypted with the application's secret key	2	f	276
1378	As base64-encoded strings that are decoded at login time	3	f	276
1379	As secure password hashes, not as plain text	4	t	276
1380	In a separate encrypted database table referenced by foreign key	5	f	276
1381	@requires_permission('app_label.permission_codename')	1	f	277
1382	@auth_with_perm('app_label.permission_codename')	2	f	277
1383	@has_permission('app_label.permission_codename')	3	f	277
1384	@permission_required('app_label.permission_codename')	4	t	277
1385	@user_has_perm('app_label.permission_codename')	5	f	277
1386	Set a success message using the messages framework	1	f	278
1387	Redirect to the login page so they can enter their credentials	2	f	278
1388	Create a default profile linked to the user account	3	f	278
1389	Log the user in immediately using login(request, user)	4	t	278
1390	Send a verification email to activate their account	5	f	278
1391	<code>url(r'^accounts/', django.contrib.auth.urls)</code>	1	f	279
1392	<code>path('accounts/', include('django.contrib.auth.urls'))</code>	2	t	279
1393	<code>path('auth/', import('django.contrib.auth.urls'))</code>	3	f	279
1394	<code>path('login/', django.contrib.auth.views.LoginView.as_view())</code>	4	f	279
1395	<code>router.register('authentication', django.contrib.auth.urls)</code>	5	f	279
1396	They are redirected to the homepage	1	f	280
1397	They are redirected to their profile page	2	f	280
1398	They remain on the login success page	3	f	280
1399	They are redirected to the URL specified in LOGIN_REDIRECT_URL setting	4	f	280
1400	They are redirected back to the original page they were trying to access	5	t	280
1401	SessionMiddleware	1	f	281
1402	AuthenticationMiddleware	2	t	281
1403	UserMiddleware	3	f	281
1404	CsrfViewMiddleware	4	f	281
1405	IdentityMiddleware	5	f	281
1406	Manually, by defining a permissions tuple in the model's Meta class	1	f	282
1407	Using a management command like python manage.py createperms	2	f	282
1408	Through the admin interface, by clicking "Create Permissions" for each model	3	f	282
1409	By specifying them in settings.py under PERMISSION_CLASSES	4	f	282
1410	Automatically, when running migrations, Django creates add, change, delete, and view permissions for each model	5	t	282
1411	'django.contrib.staticfiles'	1	t	283
1412	'django.contrib.auth'	2	f	283
1413	'django.contrib.sessions'	3	f	283
1414	'django.contrib.contenttypes'	4	f	283
1415	'django.contrib.admin'	5	f	283
1416	RegistrationForm	1	f	284
1417	AccountCreationForm	2	f	284
1418	SignUpForm	3	f	284
1419	UserCreationForm	4	t	284
1420	NewUserForm	5	f	284
1421	DEFAULT_REDIRECT_URL	1	f	285
1422	AUTH_REDIRECT	2	f	285
1423	LOGIN_REDIRECT_URL	3	t	285
1424	SUCCESS_URL	4	f	285
1425	AFTER_LOGIN_PATH	5	f	285
1426	Assign individual permissions directly to each user	1	f	286
1427	Create a separate Role model with a foreign key to User	2	f	286
1428	Define roles as boolean fields (is_editor, is_moderator) on the User model	3	f	286
1429	Create Groups with appropriate permissions, and assign users to these groups	4	t	286
1430	Use custom middleware that checks each user's role on every request	5	f	286
1431	To hide the logout parameters from the URL for security reasons	1	f	287
1432	Because logout operations require a larger payload than GET requests can handle	2	f	287
1433	To ensure the browser doesn't cache the logout request	3	f	287
1434	Because Django's authentication system only recognizes POST requests for state changes	4	f	287
1435	To prevent Cross-Site Request Forgery (CSRF) attacks where malicious sites could log users out without their consent	5	t	287
1436	It specifies where to redirect users after successful login, often pointing to the protected page they were trying to access	1	t	288
1437	It determines which authentication backend to use for validation	2	f	288
1438	It specifies an alternate URL to use if login fails	3	f	288
1439	It controls which fields are required in the login form	4	f	288
1440	It indicates which login template to use for rendering the form	5	f	288
1441	A special user instance that AuthenticationMiddleware attaches to request.user when no user is authenticated	1	t	289
1442	A system user that owns background tasks and automated processes	2	f	289
1443	A way to grant limited permissions to unauthenticated visitors	3	f	289
1444	A base class that must be subclassed to create custom user models	4	f	289
1445	A placeholder user created for guests who browse the site without logging in	5	f	289
1446	Whether the current user has any permissions	1	f	290
1447	Whether the current user is logged in	2	t	290
1448	Whether the current user has confirmed their account	3	f	290
1449	Whether the current user has a valid email address	4	f	290
1450	Whether the current user has staff privileges	5	f	290
1451	To indicate if a user has logged in at least once	1	f	291
1452	To differentiate between regular users and admin users	2	f	291
1453	To track whether a user is currently logged into the application	3	f	291
1454	To indicate whether a user account can log in, allowing accounts to be disabled without deletion	4	t	291
1455	To mark whether a user has confirmed their email address	5	f	291
1456	"What could go wrong?"	1	t	292
1457	"Is this code well-documented?"	2	f	292
1458	"What new features can be added?"	3	f	292
1459	"How can this feature be implemented faster?"	4	f	292
1460	"Does this code meet the exact specification?"	5	f	292
1461	Any name is acceptable as long as it is decorated with `@pytest.fixture`.	1	f	293
1462	Descriptive, lowercase with underscores (e.g., `published_article`, `admin_user`).	2	t	293
1463	Uppercase with underscores, to denote them as constants (e.g., `PUBLISHED_ARTICLE_FIXTURE`).	3	f	293
1464	Short and abbreviated to save typing (e.g., `pub_art`, `adm_usr`).	4	f	293
1465	CamelCase, prefixed with `fixture` (e.g., `fixturePublishedArticle`).	5	f	293
1466	It's not crucial; Django automatically resets `settings.MEDIA_ROOT` after each test.	1	f	294
1467	To commit the changes made to `settings.MEDIA_ROOT` permanently to the Django configuration.	2	f	294
1468	To allow the temporary media files to be accessible after the test session completes.	3	f	294
1469	Because `settings.MEDIA_ROOT` cannot be modified by fixtures with `function` scope.	4	f	294
1470	To prevent side effects and ensure other tests or parts of the system are not affected by the temporary change.	5	t	294
1471	Testing empty states is primarily for performance benchmarking of initial data loads.	1	f	295
1472	These states need to be handled gracefully with helpful prompts, rather than causing errors or blank pages.	2	t	295
1473	Empty states often reveal critical security vulnerabilities related to data access.	3	f	295
1474	These states are irrelevant as users quickly populate data, making them transient.	4	f	295
1475	Initial states are where most malicious input attacks are targeted.	5	f	295
1476	To measure which lines of application code are executed by the test suite.	1	t	296
1477	To provide a graphical interface for writing and debugging pytest tests.	2	f	296
1478	To profile the performance and speed of individual test functions.	3	f	296
1479	To enforce a minimum test coverage percentage before code can be merged.	4	f	296
1480	To automatically generate tests for uncovered parts of the application.	5	f	296
1481	A single tuple containing all names, then all widths, then all heights.	1	f	297
1482	A string containing comma-separated values for each viewport, e.g., "mobile,375,667;desktop,1920,1080".	2	f	297
1483	A list of dictionaries, where each dictionary must have "name_val", "width_val", "height_val" keys.	3	f	297
1484	A dictionary where keys are "name", "width", "height" and values are lists of their respective settings.	4	f	297
1485	A list of tuples, where each tuple contains values corresponding to "name", "width", and "height".	5	t	297
1486	Writing a separate Python script to generate setup data and importing it.	1	f	298
1487	Creating a base test class with a shared `setUp` method.	2	f	298
1488	Extracting the common setup logic into `pytest` fixtures.	3	t	298
1489	Copying and pasting the setup code but adding comments to explain its purpose.	4	f	298
1490	Using global variables defined at the top of the test file.	5	f	298
1491	View responses to HTTP requests, including template rendering and context data.	1	f	299
1492	Interactions between Django views and the ORM for database operations.	2	f	299
1493	Performance of API endpoints under simulated load conditions.	3	f	299
1494	Complete user registration and login flows, including UI interaction.	4	f	299
1495	Model methods with custom logic, form validation, and utility functions.	5	t	299
1496	It skips the test discovery phase and runs tests from a specified list.	1	f	300
1497	It runs tests in a silent mode, suppressing all output except for final summary.	2	f	300
1498	It allows any output sent to standard output (e.g., via <code>print()</code> statements) during test execution to be displayed in the console.	3	t	300
1499	It serializes test results to a file for later analysis.	4	f	300
1500	It sorts the test execution order alphabetically.	5	f	300
1501	It will result in a command-line error, as the <code>-v</code> and <code>-s</code> options are mutually exclusive.	1	f	301
1502	It shows only the output from <code>print()</code> statements, suppressing most of `pytest`'s own test status reporting.	2	f	301
1503	It produces verbose output for test statuses and additionally saves all <code>print()</code> statement outputs to a separate summary log file.	3	f	301
1504	It makes the output verbose, but <code>print()</code> statements from tests are still captured and only shown if a test fails.	4	f	301
1505	It provides verbose output (e.g., full test names and statuses) AND displays any <code>print()</code> statements from tests immediately in the console.	5	t	301
1506	<code>UserApiTest.py</code>	1	f	302
1507	<code>api.user.test.py</code>	2	f	302
1508	<code>test_user_api.py</code>	3	t	302
1509	<code>check_user_api.py</code>	4	f	302
1510	<code>user_api_tests_v2.py</code>	5	f	302
1511	It links directly to external wiki pages containing detailed documentation for articles.	1	f	303
1512	It ensures the article content is grammatically correct and well-written.	2	f	303
1513	It clearly describes the scenario, action, and expected outcomes for a specific functionality.	3	t	303
1514	It uses advanced `pytest` features that are inherently self-documenting for all types of users.	4	f	303
1515	It measures the load time of the article page under public access.	5	f	303
1516	It indicates a Python module import path for `pytest` to resolve.	1	f	304
1517	It separates command-line arguments passed directly to the test function.	2	f	304
1518	It signifies a comment that `pytest` will ignore.	3	f	304
1519	It is used to specify an alias for the test being run.	4	f	304
1520	It separates parts of a Pytest Node ID, specifying a path within the test collection tree.	5	t	304
1521	If the setup logic changes, it must be updated in every instance, which is error-prone.	1	t	305
1522	It prevents the use of advanced pytest features like parametrization.	2	f	305
1523	It automatically leads to cleaner separation between "Arrange", "Act", and "Assert" phases.	3	f	305
1524	It requires using a more complex testing framework than pytest.	4	f	305
1525	It makes the test suite run significantly slower due to code duplication.	5	f	305
1526	Inside a dedicated `tests/` directory within the 'polls' app directory (e.g., `polls/tests/`).	1	t	306
1527	In a single, project-level `tests/` directory at the root of the project.	2	f	306
1528	In a separate Git repository dedicated solely to tests for all applications.	3	f	306
1529	Within the Django project directory (e.g., `my_project/tests/`).	4	f	306
1530	Directly within the 'polls' app directory in a file named `polls_tests.py`.	5	f	306
1531	A test suite dominated by slow and brittle End-to-End tests, with few unit or integration tests.	1	t	307
1532	A test suite exclusively composed of unit tests, neglecting integration and E2E aspects.	2	f	307
1533	A test suite where integration tests form the largest layer, exceeding unit tests.	3	f	307
1534	A test suite with many unit tests and many integration tests, but very few End-to-End tests.	4	f	307
1535	A test suite that perfectly balances the number of tests across all three layers.	5	f	307
1536	To run a test only if the `condition` is true, otherwise skip it.	1	f	308
1537	To skip all subsequent tests in a file if the `condition` in one test is met.	2	f	308
1538	To skip a test if the specified `condition` evaluates to true at collection time.	3	t	308
1539	To mark a test as expected to fail if the `condition` is true.	4	f	308
1540	To conditionally parametrize a test based on the `condition`.	5	f	308
1541	<code>class</code>	1	f	309
1542	<code>module</code>	2	f	309
1543	<code>function</code>	3	t	309
1544	<code>session</code>	4	f	309
1545	<code>package</code> (not a standard pytest scope mentioned in text)	5	f	309
1546	<code>FAIL</code> indicates a problem with test setup; <code>ERROR</code> indicates a problem with the assertion itself.	1	f	310
1547	<code>FAIL</code> means an <code>assert</code> statement evaluated to false; <code>ERROR</code> means an unhandled Python exception (other than <code>AssertionError</code>) occurred.	2	t	310
1548	<code>FAIL</code> stops all further test execution; <code>ERROR</code> allows other tests to continue.	3	f	310
1549	<code>FAIL</code> is for integration tests; <code>ERROR</code> is for unit tests.	4	f	310
1550	<code>FAIL</code> means a syntax error in the test code; <code>ERROR</code> means a logical flaw in the application code.	5	f	310
1551	To set up all preconditions, initialize variables, and prepare data necessary for the test.	1	t	311
1552	To verify that the outcome of the action performed matches the expected result.	2	f	311
1553	To archive the test case for future reference.	3	f	311
1554	To analyze the test results and report any failures.	4	f	311
1555	To execute the specific piece of code or functionality that is being tested.	5	f	311
1556	They manage setup and/or provide resources needed for tests.	1	t	312
1557	They are only used for testing Django model methods.	2	f	312
1558	They require manual teardown in every test function.	3	f	312
1559	They replace the need for writing any `assert` statements.	4	f	312
1560	They primarily focus on generating human-readable test names.	5	f	312
1561	The test suite becomes too fast, not allowing enough time for proper system validation.	1	f	313
1562	Unit tests become overly complex as they try to cover integration scenarios.	2	f	313
1563	Interactions and contracts between components may go untested, leading to hidden integration bugs.	3	t	313
1564	It leads to an over-reliance on mocking, reducing confidence in real component interactions.	4	f	313
1565	E2E tests become too simple and fail to cover critical user flows adequately.	5	f	313
1566	Increased hosting costs due to inefficient code that wasn't optimized by tests.	1	f	314
1567	Reduced development velocity due to fear of refactoring and managing a brittle system.	2	t	314
1568	Higher software licensing fees for bug tracking systems.	3	f	314
1569	The need to purchase more powerful development machines for manual testing.	4	f	314
1570	Mandatory compliance audits that fail due to lack of test documentation.	5	f	314
1571	To enforce a specific coding style across the refactored modules.	1	f	315
1572	To suggest better algorithms for the code being refactored.	2	f	315
1573	To identify which parts of the code are most in need of refactoring.	3	f	315
1574	To act as a safety net by ensuring the external behavior of the code remains unchanged.	4	t	315
1575	To automatically rewrite parts of the code to improve its performance.	5	f	315
1576	The test environment is cleaned up and reset to its initial state.	1	f	316
1577	All external dependencies and services are mocked or stubbed.	2	f	316
1578	A single, focused piece of code or functionality under test is executed.	3	t	316
1579	Test data is generated dynamically based on current system time.	4	f	316
1580	Multiple assertions are made to check various aspects of the system state.	5	f	316
1581	<code>pytest</code>	1	t	317
1582	<code>pytest --all</code>	2	f	317
1583	<code>python run_tests.py</code>	3	f	317
1584	<code>execute_pytest_suite</code>	4	f	317
1585	<code>manage.py test --pytest</code>	5	f	317
1586	<code>pytest -k "profile and edit or view"</code> (Incorrect precedence)	1	f	318
1587	<code>pytest -k "(profile and edit) or view"</code>	2	f	318
1588	<code>pytest -k "profile and (edit or view)"</code>	3	t	318
1589	<code>pytest -k "profile &amp; (edit | view)"</code> (Shell operators usually not for pytest expressions)	4	f	318
1590	<code>pytest -k "profile" -k "edit or view"</code>	5	f	318
1591	User authentication and authorization in tests.	1	f	319
1592	Code coverage reporting and test parametrization.	2	f	319
1593	Fixture naming conventions and test discovery.	3	f	319
1594	Database transaction management and logging levels.	4	f	319
1595	Test performance and test isolation.	5	t	319
1596	To ensure the function is only run once per test session, regardless of scope.	1	f	320
1597	To automatically parametrize the function with various inputs.	2	f	320
1598	To mark the function as a provider of a resource or context for tests.	3	t	320
1599	To convert the function's output into a JSON report.	4	f	320
1600	To indicate that the function is a test case itself.	5	f	320
1601	Higher scopes (like `session`) execute teardown before lower scopes (like `function`).	1	f	321
1602	Teardown logic always runs immediately after the `yield` statement, before the test even starts.	2	f	321
1603	Teardown for all fixtures, regardless of scope, is executed in a random order.	3	f	321
1604	The scope only affects the setup phase; teardown always runs at the end of the entire test session.	4	f	321
1605	Teardown runs after the last use of the fixture within that specific scope (e.g., after the test function for `function` scope, after all tests in class for `class` scope).	5	t	321
1606	The ability of tests to predict future software failures.	1	f	322
1607	Systematic verification of critical system components before "takeoff" (deployment).	2	t	322
1608	The complexity involved in setting up an initial test environment.	3	f	322
1609	The speed and automation capabilities of modern testing frameworks.	4	f	322
1610	The need for multiple developers to review tests before they are run.	5	f	322
1611	`FAILED on mobile viewport (375x812) in test_layout`	1	f	323
1612	`test_my_responsive_feature.py::test_layout FAILED (mobile viewport)`	2	f	323
1613	`test_my_responsive_feature.py::test_layout[mobile-375-812] FAILED`	3	t	323
1614	`Error in test_my_responsive_feature.py -- Mobile layout incorrect.`	4	f	323
1615	`test_layout::mobile::responsive_feature FAILED`	5	f	323
1616	An assertion <code>assert 1 == 1</code> passes.	1	f	324
1617	An assertion <code>assert user.is_active == False</code> fails because <code>user.is_active</code> is <code>True</code>.	2	f	324
1618	The test function completes successfully without any <code>assert</code> statements.	3	f	324
1619	A <code>TypeError</code> occurs when trying to add a string to an integer within the test function before any assertion is reached.	4	t	324
1620	A test is decorated with <code>@pytest.mark.skipif(True, reason="...")</code>.	5	f	324
1621	<code>pytest products/tests/test_views.py:TestProductListView</code> (uses single colon)	1	f	325
1622	<code>pytest products/tests/test_views.py -c TestProductListView</code>	2	f	325
1623	<code>pytest products/tests/test_views.py::TestProductListView</code>	3	t	325
1624	<code>pytest TestProductListView from products/tests/test_views.py</code>	4	f	325
1625	<code>pytest products/tests/test_views.py --class TestProductListView</code>	5	f	325
1626	Add a comment like <code># PYTEST_MARKER: integration</code> inside the test function's docstring.	1	f	326
1627	Call <code>pytest.add_marker("integration", test_user_api_interaction)</code> within the test file.	2	f	326
1628	Decorate the function with <code>@pytest.mark.integration</code>.	3	t	326
1629	By ensuring the test function name starts with <code>test_integration_</code>.	4	f	326
1630	Set an attribute on the function: <code>test_user_api_interaction.marker = "integration"</code>.	5	f	326
1631	External Dependencies  Environment.	1	t	327
1632	User Inputs.	2	f	327
1633	Application States.	3	f	327
1634	Business Logic.	4	f	327
1635	User Experience  Usability.	5	f	327
1636	It primarily serves to satisfy QA department requirements for code coverage.	1	f	328
1637	It eliminates the need for manual testing entirely.	2	f	328
1638	It serves as a proactive catalyst for better software development practices and architectural quality.	3	t	328
1639	Its main value is in generating detailed performance metrics for the application.	4	f	328
1640	It is solely a reactive measure to fix issues found by users.	5	f	328
1641	It provides a faster feedback loop and makes debugging more efficient by isolating test execution.	1	t	329
1642	It can replace the need to ever run the full test suite if done consistently.	2	f	329
1643	It guarantees 100% code coverage for the selected tests.	3	f	329
1644	It is the only method `pytest` offers for running tests in parallel.	4	f	329
1645	It automatically generates more detailed test reports for only the specified tests.	5	f	329
1646	<code>pytest --run-marked smoke</code>	1	f	330
1647	<code>pytest -k smoke</code> (This would match "smoke" in test names, not markers)	2	f	330
1648	<code>pytest @smoke</code>	3	f	330
1649	<code>pytest -m smoke</code>	4	t	330
1650	<code>pytest --marker smoke</code> (The option is <code>-m</code>)	5	f	330
1651	When you want `pytest` to quit immediately after the first test failure occurs.	1	f	331
1652	When you require detailed output from <code>print()</code> statements within your tests to be displayed.	2	f	331
1653	When you desire minimal console output, primarily focusing on the final test summary (e.g., "X tests passed, Y failed").	3	t	331
1654	When you need to query the installed `pytest` version and its plugins.	4	f	331
1655	When you want to quantify the percentage of code covered by the tests.	5	f	331
1656	Delete the commented-out test code, as version control (like Git) retains its history if needed.	1	t	332
1657	Rewrite the test to check for the absence of the removed feature.	2	f	332
1658	Uncomment the test and mark it with `@pytest.mark.xfail` because it's expected to fail.	3	f	332
1659	Move the commented-out test to a separate "archive" test file.	4	f	332
1660	Leave the test commented out as a record of past functionality.	5	f	332
1661	Move the complex logic into helper functions called by the single long test function.	1	f	333
1662	Mark the long test with `@pytest.mark.slow` and run it less frequently.	2	f	333
1663	Decompose the long test into multiple smaller, focused test functions, each verifying one specific aspect of behavior.	3	t	333
1664	Add more comments within the long test to clearly delineate its different sections.	4	f	333
1665	Convert the long test into an end-to-end test using Playwright to ensure the full workflow is covered.	5	f	333
1666	They often result in slower test execution compared to using XPath locators.	1	f	334
1667	They make it difficult to test applications with dynamic content loaded via JavaScript.	2	f	334
1668	They cannot locate elements hidden by responsive design media queries.	3	f	334
1669	They are highly susceptible to breaking due to minor, unrelated UI structure or styling changes.	4	t	334
1670	They are not supported by all web browsers or testing tools like Playwright.	5	f	334
1671	Race conditions due to the test script not intelligently waiting for asynchronous operations (like AJAX calls) to complete.	1	t	335
1672	Using outdated browser versions that have known rendering bugs.	2	f	335
1673	Inconsistent network bandwidth affecting asset loading times for every test run.	3	f	335
1674	Minor syntax errors in the test script that are only occasionally triggered.	4	f	335
1675	Variations in CPU speed of the machine running the tests.	5	f	335
1676	`pytest` will run all tests that have ever failed in the history of the project for that cache.	1	f	336
1677	`pytest` will automatically run all tests in the entire suite to confirm overall stability.	2	f	336
1678	`pytest` will report that no tests ran because no tests failed in the immediately preceding (<code>--lf</code>) execution.	3	t	336
1679	`pytest` will run <code>test_A</code> again, as it was the last test targeted by <code>--lf</code>.	4	f	336
1680	`pytest` will prompt you to confirm whether to clear the "last-failed" cache.	5	f	336
1681	To force `pytest` to run all tests in a strictly sequential, non-parallel mode.	1	f	337
1682	To silence all warnings generated by `pytest` and its plugins during the test run.	2	f	337
1743	It lacks a specific <code>@helper</code> decorator required by <code>pytest</code>.	3	f	349
1683	To disable `pytest`'s default output capturing, allowing <code>print()</code> statements and other standard output from tests to be displayed immediately on the console.	3	t	337
1684	To save the detailed test results, including standard output, to a specified file instead of printing to the console.	4	f	337
1685	To automatically skip all tests that have been marked with the <code>@pytest.mark.slow</code> decorator.	5	f	337
1686	To make the fixture execute asynchronously.	1	f	338
1687	To separate the setup phase of the fixture from its teardown phase, allowing resource management.	2	t	338
1688	To pause the test execution until an external condition is met.	3	f	338
1689	To return multiple values from the fixture to the test function simultaneously.	4	f	338
1690	To indicate that the fixture should only run if a specific condition is true.	5	f	338
1691	By calling `pytest.add_marker("compute_intensive")` inside the test function.	1	f	339
1692	By creating a file named `compute_intensive.marker` in the same directory.	2	f	339
1693	By naming the test function `test_compute_intensive_complex_calculation()`.	3	f	339
1694	By decorating the test function with `@pytest.mark.compute_intensive`.	4	t	339
1695	By adding a comment `# MARKER: compute_intensive` above the test function.	5	f	339
1696	To verify that the actual outcome of the "Act" phase matches the expected outcome.	1	t	340
1697	To document the steps taken during the "Arrange" and "Act" phases.	2	f	340
1698	To activate the specific behavior or function being tested.	3	f	340
1699	To report the test execution time and resource consumption.	4	f	340
1700	To gather all necessary input data and objects for the test.	5	f	340
1701	By scanning for functions decorated with <code>@pytest.test_function</code>.	1	f	341
1702	By requiring all test functions to be explicitly registered in the <code>pytest.ini</code> file.	2	f	341
1703	By looking for functions whose names start with <code>test_</code> within files named <code>test_*.py</code> or <code>*_test.py</code>.	3	t	341
1704	By executing any function that includes an <code>assert</code> statement.	4	f	341
1705	By running all functions defined in files located in a directory named <code>discover_tests</code>.	5	f	341
1706	Wrap the test's assertions in a `try...except AssertionError:` block.	1	f	342
1707	Add a conditional `if False:` at the beginning of the test.	2	f	342
1708	Comment out the entire test function.	3	f	342
1709	Mark the test with `@pytest.mark.skip(reason="Feature temporarily disabled")`.	4	t	342
1710	Use `pytest.exit("Skipping due to disabled feature")` inside the test.	5	f	342
1711	Arrange	1	f	343
1712	Assemble	2	f	343
1713	Act	3	t	343
1714	Announce	4	f	343
1715	Assert	5	f	343
1716	When you want to generate a historical list of all tests that have failed at any point during the project's lifecycle.	1	f	344
1717	When running tests for the very first time in a newly cloned project or a clean environment.	2	f	344
1718	When you need to rigorously ensure that a recent fix has not introduced any regressions across the entire test suite.	3	f	344
1719	For the final, comprehensive test run before committing code or deploying to a CI environment.	4	f	344
1720	When engaged in a tight debugging loop for one or a few specific tests, desiring the absolute fastest feedback on a targeted fix.	5	t	344
1721	`yield` fixtures allow teardown logic to be skipped if the test passes quickly.	1	f	345
1722	Manual `try...finally` blocks offer better performance for teardown operations.	2	f	345
1723	Fixtures centralize teardown logic, improving reusability and readability, and ensuring it runs even if the test fails.	3	t	345
1724	Manual `try...finally` blocks are more compatible with older versions of pytest.	4	f	345
1725	`yield` fixtures can only perform teardown for database-related resources.	5	f	345
1726	An error in `pytest-cov` that leads to incorrect reporting of coverage percentages.	1	f	346
1727	A situation where high coverage masks serious performance issues in the application.	2	f	346
1728	Becoming overly focused on achieving a specific coverage percentage, potentially leading to low-value tests.	3	t	346
1729	The inability of coverage tools to work with projects that use multiple programming languages.	4	f	346
1730	The tendency for coverage tools to miss reporting on dynamically generated code.	5	f	346
1731	They define the verbosity level of output for specific groups of tests.	1	f	347
1732	They enforce a specific testing paradigm (like BDD or TDD) on the marked tests.	2	f	347
1733	They replace the need for descriptive test function names by using short marker codes.	3	f	347
1734	They are the primary mechanism for passing parameters and fixtures to test functions.	4	f	347
1735	They allow categorization of tests by concept or characteristic, enabling selective execution and specialized handling.	5	t	347
1736	By calling test helper functions that individually manage each resource.	1	f	348
1737	By requesting other fixtures (like `page`, `live_server`, `temporary_admin_user`) as parameters and using their outputs in its setup phase.	2	t	348
1738	By using global variables to share state between different resource setup functions.	3	f	348
1739	By defining all setup logic for all resources within its own code, without relying on other fixtures.	4	f	348
1740	By inheriting from a base class that provides all necessary resource management methods.	5	f	348
1741	Helper functions are always ignored by <code>pytest</code>, regardless of naming.	1	f	349
1742	Its name does not start with <code>test_</code>.	2	t	349
1744	It is not located within a class named <code>TestHelperFunctions</code>.	4	f	349
1745	It does not contain any <code>assert</code> statements.	5	f	349
1746	The class name must be decorated with `@pytest.mark.test_class`.	1	f	350
1747	The class name must exactly match the module name it's testing (e.g., `UserModel` for `user_model.py`).	2	f	350
1748	Any class containing methods prefixed with `test_` will be discovered.	3	f	350
1749	The class name must be prefixed with `Test` (e.g., `TestUserModel`).	4	t	350
1750	The class name must be suffixed with `_Test` (e.g., `UserModel_Test`).	5	f	350
1751	Typical "happy path" data.	1	f	351
1752	Valid but unusual data (boundary or extreme values).	2	t	351
1753	Malicious inputs (attempting to exploit vulnerabilities).	3	f	351
1754	Missing data (required information not provided).	4	f	351
1755	Invalid data (violating defined rules or types).	5	f	351
1756	It combines the results of the outer `locator` and the `inner_locator` into a single list.	1	f	352
1757	It checks if the `inner_locator` is visually contained within the bounds of the outer `locator`'s elements.	2	f	352
1758	It ensures that the `inner_locator` matches an element that is a direct child of the elements found by the outer `locator`.	3	f	352
1759	It narrows down the selection of the outer `locator` to elements that contain at least one descendant matching the `inner_locator`.	4	t	352
1760	It verifies that the `inner_locator` element has the same attributes as the outer `locator`'s elements.	5	f	352
1761	To ensure all images and stylesheets are fully rendered before proceeding.	1	f	353
1762	Immediately after every <code>page.goto()</code> call to ensure maximum page stability.	2	f	353
1763	When you only need the basic DOM structure to be available for interaction.	3	f	353
1764	When a page makes numerous background AJAX requests after initial load, and you need to wait for this activity to subside.	4	t	353
1765	When testing applications that do not use any network requests.	5	f	353
1766	The default browser stylesheet's value for the "color" property of that element type.	1	f	354
1767	The literal value written in the CSS stylesheet (e.g., "red" or "#FF0000") before browser computation.	2	f	354
1768	The final computed CSS value for the "color" property as determined by the browser.	3	t	354
1769	The "color" value inherited directly from the element's immediate parent, ignoring other styles.	4	f	354
1770	The value specified only in the element's inline <code>style</code> attribute.	5	f	354
1771	It's a user-centric locator that aligns with accessibility best practices and is resilient to minor HTML structure changes if labels are stable.	1	t	355
1772	It bypasses the need for <code>data-testid</code> attributes in the admin templates.	2	f	355
1773	It's the only way to locate fields within the Django admin interface due to its unique HTML structure.	3	f	355
1774	It automatically waits for the label text to appear, even if the input field is not yet present.	4	f	355
1775	It's faster than using ID-based locators like <code>page.locator("#id_username")</code>.	5	f	355
1776	CSS Selectors by `id` (e.g., `page.locator("#stable-id")`).	1	f	356
1777	User-Facing Locators (e.g., `get_by_role`, `get_by_text`).	2	t	356
1778	Test ID Locators (e.g., `get_by_test_id()`).	3	f	356
1779	CSS Selectors by `class` (e.g., `page.locator(".meaningful-class")`).	4	f	356
1780	XPath Locators for complex DOM structures.	5	f	356
1781	Playwright will automatically start a temporary Django development server to handle the request.	1	f	357
1782	Playwright will serve a cached version of the page if it was previously visited.	2	f	357
1783	The `page.goto()` call will hang indefinitely waiting for a server response.	3	f	357
1784	The Django test `client` will intercept the request and provide a response internally.	4	f	357
1785	The browser will report a "connection refused" error, and the Playwright test will fail.	5	t	357
1786	Case-insensitivity is not a supported feature for the <code>to_contain_text</code> assertion.	1	f	358
1787	By using a special assertion modifier like <code>.case_insensitive.to_contain_text()</code>.	2	f	358
1788	By manually converting the expected text to lowercase, e.g., <code>to_contain_text("text".lower())</code>.	3	f	358
1789	By passing the optional argument <code>ignore_case=True</code> to the assertion.	4	t	358
1790	It performs a case-insensitive match by default; no extra arguments are needed.	5	f	358
1791	Linking multiple test assertions to a single locator.	1	f	359
1792	Using a single, long CSS selector that connects multiple elements with `&gt;` or space combinators.	2	f	359
1793	Combining multiple locator calls sequentially, where each operates within the context of the previous one.	3	t	359
1794	Storing locators in a chain-like data structure for later use.	4	f	359
1795	A Playwright feature that automatically finds the shortest path to an element.	5	f	359
1796	<code>page.mouse.drag(source_locator, target_locator)</code>	1	f	360
1797	<code>source_locator.drag_to(target_locator)</code>	2	t	360
1798	<code>page.drag_and_drop(source_locator, target_x_offset, target_y_offset)</code>	3	f	360
1799	<code>source_locator.drop_on(target_locator)</code>	4	f	360
1800	<code>source_locator.move_to(target_locator).release()</code>	5	f	360
1801	To make the test compatible with older browsers that do not support direct value manipulation.	1	f	361
1802	To slow down the test execution to match human interaction speed for better observation.	2	f	361
2037	The `django-pytest` plugin.	2	f	408
1803	To bypass any JavaScript event listeners and directly set the element's value attribute.	3	f	361
1804	To ensure that client-side logic like real-time validation, dynamic UI updates, or auto-suggestions dependent on these events are triggered.	4	t	361
1805	To primarily test the browser's event handling capabilities rather than the application's logic.	5	f	361
1806	It pauses execution for exactly 5000ms and then checks for visibility once.	1	f	362
1807	It only uses the timeout if the initial visibility check fails, then retries once after 5000ms.	2	f	362
1808	It repeatedly checks (polls) if the element is visible, passing if true within 5000ms, or failing if not.	3	t	362
1809	It checks visibility once and fails immediately if not visible, ignoring the timeout.	4	f	362
1810	It waits for any change in the DOM for up to 5000ms, then checks visibility.	5	f	362
1811	The "Props Master," responsible for managing static assets and media files.	1	f	363
1812	The "Director," coordinating the setup and teardown of the `live_server` and database.	2	f	363
1813	The "Scriptwriter," defining the test scenarios in a human-readable format.	3	f	363
1814	The "Audience," passively observing the server logs and responses.	4	f	363
1815	The "Actor," performing user interactions with the web application (navigating, clicking, filling forms).	5	t	363
1816	Always, as <code>press()</code> provides a more realistic simulation of user typing than <code>fill()</code>.	1	f	364
1817	For filling entire forms with data, as it's more efficient than multiple <code>fill()</code> calls.	2	f	364
1818	When an input field is disabled, as <code>press()</code> can sometimes bypass this.	3	f	364
1819	When the input field requires encrypted text.	4	f	364
1820	For simulating single special key presses (e.g., 'Escape', 'Tab') or when individual <code>keydown</code>/<code>keyup</code> events are critical for the tested functionality.	5	t	364
1821	<code>expect(page.locator("#spinner")).not_to_exist(timeout=5000)</code>	1	f	365
1822	<code>while (page.locator("#spinner").is_visible()): page.wait_for_timeout(100)</code>	2	f	365
1823	<code>expect(page.locator("#spinner").count()).to_equal(0, timeout=5000)</code>	3	f	365
1824	<code>expect(page.locator("#spinner")).to_be_hidden(timeout=5000)</code>	4	t	365
1825	<code>page.wait_for_timeout(5000)</code>	5	f	365
1826	To the currently focused element on the page, or the document body if no element has specific focus.	1	t	366
1827	To all elements on the page that have an event listener for the 'Escape' key.	2	f	366
1828	Always to the first focusable element in the DOM order.	3	f	366
1829	To a specific element that must be passed as an argument to <code>page.keyboard.press()</code>.	4	f	366
1830	To the element most recently interacted with via a <code>.click()</code> or <code>.fill()</code> action.	5	f	366
1831	Asserting that loading indicators (like spinners) have disappeared as the primary confirmation of success.	1	f	367
1832	Writing assertions that check the internal JavaScript state of the application rather than visible UI elements.	2	f	367
1833	Using generic assertions like `expect(page).to_have_url(...)` for all outcomes, as they are less prone to timing issues.	3	f	367
1834	Asserting the definite, final outcome of an operation (e.g., a success message is visible, an element's state has changed) rather than transient intermediate states.	4	t	367
1835	Always adding a fixed `time.sleep()` or `page.wait_for_timeout()` before each assertion to allow dynamic content to load.	5	f	367
1836	Because E2E testing tools are incapable of simulating error conditions or invalid inputs.	1	f	368
1837	To reduce the amount of test data setup required for E2E tests.	2	f	368
1838	Because happy paths are the only scenarios that provide real value to users.	3	f	368
1839	To keep E2E tests more focused, less brittle, and manageable, as error conditions are often better tested at lower levels.	4	t	368
1840	To ensure E2E tests run faster than unit tests, maintaining a quick feedback loop.	5	f	368
1841	<code>page.locator("#colors-select").select_option("R"); page.locator("#colors-select").select_option("B")</code>	1	f	369
1842	You must click each option individually after holding a modifier key.	2	f	369
1843	<code>page.locator("#colors-select").select_option("R, B")</code>	3	f	369
1844	<code>page.locator("#colors-select").select_option(["R", "B"])</code>	4	t	369
1845	<code>page.locator("#colors-select").multiselect(["R", "B"])</code>	5	f	369
1846	It waits only as long as necessary for an element to become actionable, reducing both flakiness from waiting too little and slowness from waiting too much.	1	t	370
1847	It always waits for a globally configured fixed timeout before every action, ensuring consistency.	2	f	370
1848	It uses machine learning to predict optimal wait times based on previous test runs.	3	f	370
1849	It primarily relies on the browser's internal loading events, which are faster than manual sleeps.	4	f	370
1850	It performs all actionability checks in parallel, significantly reducing overall wait times.	5	f	370
1851	Playwright automatically updates `data-testid` values when linked CSS classes change.	1	f	371
1852	`data-testid` allows locators to ignore all CSS classes on an element.	2	f	371
1853	`data-testid` can be used as an alternative to class names for applying CSS styles.	3	f	371
1854	CSS refactoring tools are designed to preserve `data-testid` attributes by default.	4	f	371
1855	`data-testid` attributes are independent of styling, so tests using them are not affected by class name changes.	5	t	371
1856	<code>assert not agree_checkbox.is_checked()</code>	1	f	372
1857	<code>expect(agree_checkbox).to_be_empty()</code>	2	f	372
1858	<code>expect(agree_checkbox).to_have_value("false")</code>	3	f	372
1859	<code>expect(agree_checkbox).not_to_be_checked()</code>	4	t	372
1860	<code>expect(agree_checkbox).is_unchecked()</code>	5	f	372
1861	To automatically generate mock data for all models in the Django project.	1	f	373
1862	To directly configure the `live_server` with static file handling and middleware.	2	f	373
1863	To launch the Playwright browser instance and provide the `page` fixture.	3	f	373
1864	To ensure that all ORM queries made by `live_server` are logged for debugging.	4	f	373
1865	To manage an isolated test database, ensuring data integrity and predictability for each test.	5	t	373
1866	Any element that displays visible text content to the user.	1	f	374
1867	Static text-displaying elements like <code>&lt;h1&gt;</code> or <code>&lt;p&gt;</code>.	2	f	374
1868	Image (<code>&lt;img&gt;</code>) elements, specifically to check their <code>src</code> attribute.	3	f	374
1869	Generic container elements like <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code>.	4	f	374
1870	Form control elements such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>.	5	t	374
1871	Check the network requests and responses that occurred prior to the failure.	1	f	375
1872	Identify JavaScript performance bottlenecks that might have caused the element to load slowly.	2	f	375
1873	Determine if the browser version used by Playwright is outdated.	3	f	375
1874	Visually verify if the element was present, visible, or if the page was in an unexpected state (e.g., showing an error or a popup).	4	t	375
1875	Automatically fix the locator for the missing element.	5	f	375
1876	The page's `load` event, which typically fires after the main document and its resources (stylesheets, images) have loaded.	1	t	376
1877	The `commit` event, which fires as soon as the browser receives response headers.	2	f	376
1878	The `networkidle` event, which fires when there are no active network connections for a short period.	3	f	376
1879	It does not wait by default; explicit waits must always be added by the user.	4	f	376
1880	The `DOMContentLoaded` event, which fires after the HTML document is parsed but before all resources are loaded.	5	f	376
1881	It must be an absolute URL, including the scheme (e.g., `http://` or `https://`) and hostname.	1	t	377
1882	It should be a Django URL name (e.g., `'my_app:my_view'`) which Playwright resolves internally.	2	f	377
1883	It can be a relative path if a base URL has been previously set using <code>page.set_base_url()</code>.	3	f	377
1884	It must always be an `https` URL for security reasons.	4	f	377
1885	It is limited to URLs on `localhost` or `127.0.0.1` unless configured otherwise.	5	f	377
1886	To execute JavaScript on the login page to simulate user interaction.	1	f	378
1887	To submit login credentials via POST and automatically follow any redirect to the next page.	2	t	378
1888	To ensure the test runs in a completely isolated environment without database access.	3	f	378
1889	To make a GET request to the login URL and follow any subsequent links on the page.	4	f	378
1890	To pre-populate the login form fields before submitting them.	5	f	378
1891	It automatically handles URL encoding for query parameters.	1	f	379
1892	It ensures the `live_server` is running before attempting to get the URL.	2	f	379
1893	It provides a full absolute URL, eliminating the need for `live_server.url`.	3	f	379
1894	It makes tests more resilient to changes in URL paths, as long as the URL name remains consistent.	4	t	379
1895	It translates the URL into a format Playwright can understand better than a simple string.	5	f	379
1896	It checks if an `&lt;h1&gt;` element exists and returns `True` or `False`.	1	f	380
1897	It immediately returns the `&lt;h1&gt;` DOM element itself.	2	f	380
1898	It takes a screenshot of all `&lt;h1&gt;` elements on the page.	3	f	380
1899	It creates a Playwright Locator object that represents a way to find the first `&lt;h1&gt;` element on the page.	4	t	380
1900	It scrolls the page to the first `&lt;h1&gt;` element.	5	f	380
1901	To submit a form on the current page.	1	f	381
1902	To define the base URL for all subsequent relative path navigations.	2	f	381
1903	To retrieve the current URL of the browser page.	3	f	381
1904	To instruct the browser to load the web page specified by the `url` argument.	4	t	381
1905	To scroll the page to make a specific element visible.	5	f	381
1906	Because radio button groups are designed such that unselecting one option is achieved by selecting another in the same group; there's no direct user action to simply "uncheck" one.	1	t	382
1907	Because <code>.uncheck()</code> on a radio button will clear the selection for the entire group, which is rarely desired.	2	f	382
1908	Because <code>.uncheck()</code> is an alias for <code>.clear()</code> which is not applicable to radio buttons.	3	f	382
1909	Because <code>.uncheck()</code> for radio buttons is deprecated and will be removed in future Playwright versions.	4	f	382
1910	Because radio buttons can only be unchecked using <code>locator.click()</code> if they are currently checked.	5	f	382
1911	To pause test execution until the browser page reaches a specific stage in its loading lifecycle (e.g., 'load', 'domcontentloaded').	1	t	383
1912	To wait for the URL of the page to change to a specific value.	2	f	383
1913	To wait for a specific element to become visible on the page.	3	f	383
1914	To ensure all network requests initiated by the page have completed successfully.	4	f	383
1915	To check if the page has loaded without any JavaScript errors.	5	f	383
1916	It will do nothing, and the checkbox will remain checked (the operation is idempotent).	1	t	384
1917	It will throw an error because the checkbox is already in the desired state.	2	f	384
1918	It will log a warning but leave the checkbox checked.	3	f	384
1919	It will uncheck and then re-check the checkbox.	4	f	384
1920	It will uncheck the checkbox.	5	f	384
1921	`live_server.url` automatically includes CSRF tokens required for POST requests.	1	f	385
1922	`live_server.url` forces Playwright to use a specific browser version compatible with Django.	2	f	385
1923	Using `localhost:8000` directly is faster but less reliable than `live_server.url`.	3	f	385
1924	`live_server` runs the Django app with an isolated test database and provides a reliable URL for the test environment.	4	t	385
1925	It's the only way Playwright can access Django's static files.	5	f	385
1926	To test individual Django model methods for correctness in isolation.	1	f	386
1927	To achieve 100% code coverage for all application modules.	2	f	386
1928	To run as quickly as possible to provide immediate feedback on code changes.	3	f	386
1929	To validate the entire application flow from the user's perspective, including UI and all backend services.	4	t	386
1930	To check the interaction between specific pairs of components, like a view and a form.	5	f	386
1931	It installs Microsoft Edge as the default browser for Playwright.	1	f	387
1932	It compiles the Playwright browser drivers from source code.	2	f	387
1933	It creates a new virtual environment specifically for Playwright testing.	3	f	387
1934	It checks for compatibility issues between your Python version and Playwright.	4	f	387
1935	It downloads and installs the `pytest-playwright` package from PyPI, making its features available to `pytest`.	5	t	387
1936	By checking if `response.request['USER_IS_AUTHENTICATED']` is true.	1	f	388
1937	By parsing the HTML response for the presence of a "Logout" button.	2	f	388
1938	By checking `response.wsgi_request.user.is_authenticated`.	3	t	388
1939	By ensuring `response.status_code` is 302 (Redirect).	4	f	388
1940	By directly querying the session table in the database.	5	f	388
1941	`client` executes JavaScript too slowly for effective E2E testing with Playwright.	1	f	389
1942	`client` can only test views that return JSON responses, not HTML.	2	f	389
1943	`client` always uses the production database, making isolated E2E tests impossible.	3	f	389
1944	`client` does not run a real HTTP server, which Playwright requires to interact with the application over the network.	4	t	389
1945	`client` cannot handle POST requests, only GET requests, limiting its E2E testing capabilities.	5	f	389
1946	<code>expect(page.locator("#status").text_content() == "Updated").to_be_true(timeout=3000)</code>	1	f	390
1947	<code>page.wait_for_timeout(3000); expect(page.locator("#status")).to_have_text("Updated")</code>	2	f	390
1948	<code>expect(page.locator("#status")).to_have_text("Updated", timeout=3000)</code>	3	t	390
1949	<code>expect(page.locator("#status")).to_be_visible(); expect(page.locator("#status")).to_contain_text("Updated")</code>	4	f	390
1950	<code>page.wait_for_function("() =&gt; document.getElementById('status').innerText === 'Updated'", timeout=3000)</code>	5	f	390
1951	To improve the accessibility of web pages for users with assistive technologies.	1	f	391
1952	To provide stable, test-specific hooks for locating elements, decoupled from styling or structural details.	2	t	391
1953	To enable easier CSS styling by providing unique hooks for style rules.	3	f	391
1954	To pass custom data from the backend Django application to frontend JavaScript.	4	f	391
1955	To optimize Playwright's element lookup performance.	5	f	391
1956	<code>expect(country_dropdown_locator.text_content()).to_contain("CA")</code>	1	f	392
1957	<code>expect(country_dropdown_locator).to_have_attribute("selected_value", "CA")</code>	2	f	392
1958	<code>assert country_dropdown_locator.get_selected_value() == "CA"</code>	3	f	392
1959	<code>expect(country_dropdown_locator.locator("option[selected]")).to_have_text("CA")</code>	4	f	392
1960	<code>expect(country_dropdown_locator).to_have_value("CA")</code>	5	t	392
1961	To mock HTTP requests, allowing E2E tests to run without an actual web server.	1	f	393
1962	To provide a direct Python API for interacting with Django views, bypassing the HTTP layer.	2	f	393
1963	To run a real Django development server in a separate thread that is configured to use the same isolated test database as the test setup.	3	t	393
1964	To connect the Playwright browser directly to the development database defined in `settings.py`.	4	f	393
1965	To generate static HTML files of Django views for Playwright to interact with, speeding up E2E tests.	5	f	393
1966	Finding elements on the page using selectors (locators).	1	f	394
1967	Navigating to URLs, going back/forward, and reloading.	2	f	394
1968	Taking screenshots of the page or specific elements.	3	f	394
1969	Directly modifying Django model instances in the database.	4	t	394
1970	Clicking buttons, filling forms, and typing text.	5	f	394
1971	It forces the input field to accept more characters than its <code>maxlength</code> attribute allows; discouraged as it's non-standard.	1	f	395
1972	It fills the field without triggering any JavaScript events; discouraged as it doesn't mimic user behavior.	2	f	395
1973	It performs the fill operation with a much shorter timeout; discouraged as it can lead to flakiness.	3	f	395
1974	It encrypts the text being filled for sensitive data; discouraged due to performance overhead.	4	f	395
1975	It bypasses actionability checks; discouraged because it can hide real issues like filling a disabled field.	5	t	395
1976	`page.get_by_text("Submit Details", exact=True)`	1	f	396
1977	`page.locator("button")`	2	f	396
1978	`page.locator("css=button:nth-of-type(1)")`	3	f	396
1979	`page.get_by_role("button", name="Submit Details")`	4	t	396
1980	`page.locator("xpath=//button[contains(text(),'Submit Details')]")`	5	f	396
1981	Playwright will immediately throw a "NoSuchElementException" and fail the test.	1	f	397
1982	Playwright will skip the click action and proceed to the next line of the test.	2	f	397
1983	Playwright will automatically execute any JavaScript on the page to try and make the button appear.	3	f	397
1984	Playwright will pause indefinitely until the button appears, potentially hanging the test.	4	f	397
1985	Playwright will retry finding the element and checking its actionability until a timeout is reached.	5	t	397
1986	`expect(page.locator("text=Data saved successfully!")).to_be_visible()` and `expect(page.locator("button#submit-button")).to_be_disabled()`.	1	t	398
1987	`page.wait_for_timeout(2000)` followed by `assert "Saving..." not in page.content()`.	2	f	398
1988	`expect(page.locator("button#submit-button")).not_to_have_class("loading")`.	3	f	398
1989	Checking the network tab to ensure the API call returned a 200 status code.	4	f	398
1990	`expect(page.locator("text=Saving...")).to_be_hidden()`.	5	f	398
1991	The locator used to find the element is incorrect and matches no elements.	1	f	399
1992	Another element, like a modal dialog or a sticky header, is covering the target element.	2	t	399
1993	The target element has <code>visibility: hidden</code> CSS property.	3	f	399
1994	The target element is not yet attached to the DOM.	4	f	399
1995	The element is disabled via the <code>disabled</code> attribute.	5	f	399
1996	Using <code>page.get_by_label("Visible Label Text")</code>.	1	t	400
1997	Using a complex XPath based on its position in the DOM.	2	f	400
1998	Using <code>page.locator("*[type='checkbox']")</code> and then filtering by index.	3	f	400
1999	Using <code>page.locator("input:nth-child(3)")</code> based on its order.	4	f	400
2000	Using <code>page.locator(".form-control.pretty-checkbox")</code> based on CSS classes.	5	f	400
2001	A utility for generating test data for web forms.	1	f	401
2002	A single, isolated browser tab with a clean context for each test.	2	t	401
2003	The global browser instance shared across all tests in a session.	3	f	401
2004	A connection to the Django test database.	4	f	401
2005	The main `pytest` configuration object for browser tests.	5	f	401
2006	By passing <code>null</code> or an empty string as the expected value, e.g., <code>expect(locator).to_have_attribute("aria-label", null)</code>.	1	f	402
2007	This is not directly possible; <code>to_have_attribute</code> always requires an expected value to be specified.	2	f	402
2008	By providing only the attribute name as an argument, e.g., <code>expect(locator).to_have_attribute("aria-label")</code>.	3	t	402
2009	By using a separate assertion method like <code>expect(locator).attribute_exists("aria-label")</code>.	4	f	402
2010	By retrieving the attribute and checking if it's not null: <code>expect(locator.get_attribute("aria-label")).not_to_be_null()</code>.	5	f	402
2011	They are brittle and likely to break if the HTML structure changes even slightly.	1	t	403
2012	They cannot target elements with dynamically generated class names.	2	f	403
2013	They only work for static HTML pages, not dynamic web applications.	3	f	403
2014	They are not supported by Playwright's locator engine.	4	f	403
2015	They significantly slow down test execution compared to ID selectors.	5	f	403
2016	To force the click event even if the element is hidden or disabled.	1	f	404
2017	To automatically fix minor HTML errors on the page.	2	f	404
2018	To log detailed information about the element's CSS properties.	3	f	404
2019	To ensure the element is in a state where a user could realistically interact with it, thereby improving test reliability.	4	t	404
2020	To speed up test execution by skipping unnecessary interactions.	5	f	404
2021	This functionality is not available; multiple viewport screenshots must be stitched together manually.	1	f	405
2022	By first scrolling to the bottom of the page using <code>page.evaluate("window.scrollTo(0, document.body.scrollHeight)")</code>.	2	f	405
2023	By passing the argument `full_page=True`.	3	t	405
2024	By setting a very large viewport size using `page.set_viewport_size()`.	4	f	405
2025	By using `page.screenshot(mode="full")`.	5	f	405
2026	The `page` object is a global variable automatically available in all test files.	1	f	406
2027	The `Page` type hint automatically instantiates and provides the object.	2	f	406
2028	By declaring `page` as a function argument, `pytest` injects the fixture.	3	t	406
2029	The `page` object is inherited from a base test class.	4	f	406
2030	The test must explicitly call <code>pytest_playwright.get_page()</code> at the beginning.	5	f	406
2031	The element has <code>opacity: 0</code>.	1	t	407
2032	The element has <code>visibility: visible</code>.	2	f	407
2033	The element has a width and height greater than zero pixels.	3	f	407
2034	The element is fully on-screen and not obscured.	4	f	407
2035	The element contains text content.	5	f	407
2036	Browser-specific drivers like `chromedriver` or `geckodriver`.	1	f	408
2041	The state of other radio buttons in the group is unaffected.	1	f	409
2042	All other radio buttons in the group also become checked, if the group allows multiple selections.	2	f	409
2043	If another radio button in the same group was selected, it becomes unselected.	3	t	409
2044	It throws an error if any other radio button in the group is already checked.	4	f	409
2045	It unchecks all other radio buttons in the group, then re-checks the original one if it was selected.	5	f	409
2046	Standard Python `assert` cannot be used with Playwright page objects.	1	f	410
2047	`expect` can automatically take screenshots on assertion failure, while `assert` cannot.	2	f	410
2048	`expect` often includes built-in auto-waiting and retry capabilities, making assertions more robust against timing issues.	3	t	410
2049	`expect` assertions execute significantly faster than standard Python `assert`.	4	f	410
2050	`expect` allows for assertions on server-side Django code, not just browser content.	5	f	410
2051	It requires explicit <code>page.waitForTimeout()</code> calls before every assertion to ensure stability.	1	f	411
2052	It can only be used to assert conditions on pages with purely static HTML content.	2	f	411
2053	It automatically waits for the asserted condition to be met before failing the test.	3	t	411
2054	It executes assertions significantly faster than other testing libraries by skipping rendering checks.	4	f	411
2055	It provides detailed error messages but does not include any auto-waiting mechanisms.	5	f	411
2056	"Enter a valid email address."	1	f	412
2057	No error message, as `error_messages` only applies to format validation.	2	f	412
2058	"This field is required."	3	f	412
2059	A generic "Invalid input for email." message.	4	f	412
2060	"Kindly supply your email."	5	t	412
2061	It feeds a simulated request object directly into Django's request-handling machinery, bypassing network and web server layers.	1	t	413
2062	It launches a headless browser instance to make real HTTP requests to `localhost`.	2	f	413
2063	It only calls the view function directly, skipping URL routing and middleware.	3	f	413
2064	It primarily mocks the database interactions and returns pre-defined responses.	4	f	413
2065	It connects to a separate Django test server process over a socket.	5	f	413
2066	It effectively bypasses CSRF checks by setting `request.csrf_processing_done = True`.	1	t	414
2067	CSRF protection is disabled globally when `pytest-django` is active.	2	f	414
2068	It raises a `CSRFVerificationFailed` exception that must be caught in the test.	3	f	414
2069	It automatically includes a universal test CSRF token valid for all POSTs.	4	f	414
2070	It requires manually fetching a CSRF token from a GET request and including it in the POST data.	5	f	414
2071	It's populated after `form.save()` is called, containing data written to the database.	1	f	415
2072	It's an alias for `form.data` but ensures all values are strings.	2	f	415
2073	It's populated immediately when the form is bound with data; it contains the raw submitted data.	3	f	415
2074	It's populated only if `form.is_valid()` returns `False`; it contains fields that passed validation alongside error messages.	4	f	415
2075	It's populated after `form.is_valid()` successfully returns `True`; it contains validated and "cleaned" data, often converted to appropriate Python types.	5	t	415
2076	A single string with the final URL after all redirects.	1	f	416
2077	A dictionary mapping original URLs to redirected URLs.	2	f	416
2078	A list of tuples, each containing `(url, status_code)` for every redirect encountered.	3	t	416
2079	The `redirect_chain` attribute is only available on the original redirect response, not the final one.	4	f	416
2080	A boolean indicating if any redirect occurred.	5	f	416
2081	It enables detailed logging of SQL queries executed by `form.save()`.	1	f	417
2082	It provides access to the `form.save()` method; without it, `ModelForm` instances don't have this method.	2	f	417
2083	It automatically mocks all database calls, so `form.save()` doesn't actually hit the database.	3	f	417
2084	It pre-populates the database with default fixtures required for `ModelForm` tests.	4	f	417
2085	It ensures that a dedicated test database is set up for the test run and properly torn down afterwards, allowing safe database interactions.	5	t	417
2086	The message will be in `response.context['django_messages']` of the final response.	1	f	418
2087	By calling `get_messages(response.wsgi_request)` on the final `response` object (after the redirect is followed).	2	t	418
2088	Messages added before a redirect are only testable if `follow=False`.	3	f	418
2089	By calling `get_messages()` on `response.redirect_chain[0].wsgi_request`.	4	f	418
2090	The message is lost because `follow=True` creates a new request context without messages.	5	f	418
2091	The context is not directly accessible; only rendered HTML can be checked.	1	f	419
2092	Via `response.template_context_data`, which is a JSON string.	2	f	419
2093	By parsing `response.content` and extracting variable values.	3	f	419
2094	Through the `response.context` attribute.	4	t	419
2095	Using `django.test.signals.context_rendered.connect()` and a signal handler.	5	f	419
2096	Primarily mock the underlying fields and assert that the property accesses them.	1	f	420
2097	Convert the property to a regular method for easier mocking during tests.	2	f	420
2098	Only test that the property returns `True` or `False` without checking specific conditions.	3	f	420
2099	Check the property's value once with default field values, assuming other combinations are covered by field validation tests.	4	f	420
2100	Create model instances with various combinations of field values that affect `is_eligible`, then assert the property's value for each instance.	5	t	420
2101	Write a new combined method `get_published_by_author(author)` and test that instead.	1	f	421
2102	Use raw SQL to verify the combined filtering logic, then assert the QuerySet methods match this SQL.	2	f	421
2103	Create posts by various authors, some published and some not. Then call `Post.objects.all().by_author(specific_author).published()` and assert the count and content of the result.	3	t	421
2104	Test `published()` and `by_author()` in complete isolation, assuming chaining will work if individual methods do.	4	f	421
2105	Mock the `published()` method when testing `by_author()` and vice-versa.	5	f	421
2106	The `backend` argument is only necessary if you have more than one authentication backend configured.	1	f	422
2107	Some Django features or third-party apps rely on `request.user.backend` being set for permission checks or other logic.	2	t	422
2108	If not provided, `force_login` will attempt to guess the backend, which can be slow.	3	f	422
2109	It tells `force_login` which password hashing algorithm to expect for the user, even though it doesn't check it.	4	f	422
2110	It's required for `force_login` to actually create a session for the user.	5	f	422
2111	`form.errors.email` provides direct access to the error string.	1	f	423
2112	By accessing `form.errors['email']`, which returns an `ErrorList` of messages.	2	t	423
2113	By calling `form.get_error_messages('email')`.	3	f	423
2114	The errors are only available in `form.non_field_errors()` if `email` is invalid.	4	f	423
2115	By checking `form.fields['email'].errors`.	5	f	423
2116	<code>PYTEST_PLUGINS</code>	1	f	424
2117	<code>DJANGO_SECRET_KEY</code>	2	f	424
2118	<code>PYTHONPATH</code>	3	f	424
2119	<code>TEST_DATABASE_NAME</code>	4	f	424
2120	<code>DJANGO_SETTINGS_MODULE</code>	5	t	424
2121	The `initial` value is used, but `form.is_bound` becomes `False` for that field.	1	f	425
2122	The form will always raise a `KeyError` during binding because 'subject' is missing from the data.	2	f	425
2123	The `initial` value is ignored for that submission; the field is treated as missing (if required) or empty (if optional).	3	t	425
2124	The `initial` value ("Default") is automatically used as the field's value in `form.cleaned_data`.	4	f	425
2125	The `initial` value is merged into `form.data`, and if the field is optional, it passes validation with this initial value.	5	f	425
2126	By calling `self.add_error(None, "Your non-field error message.")`.	1	f	426
2127	By setting `self.non_field_error_message = "Your non-field error message."`.	2	f	426
2128	By returning a dictionary `{'__all__': ["Your non-field error message."]}` from `clean()`.	3	f	426
2129	Non-field errors can only be raised by field-specific `clean_<fieldname>()` methods.\n</fieldname>\n<TOPIC>Django Form Validation</TOPIC>\n<TAG>Clean NonFieldError</TAG>	4	f	426
2130	By raising `django.core.exceptions.ValidationError("Your non-field error message.")` directly within the `clean()` method.	5	t	426
2131	`assertContains` is significantly faster as it doesn't decode the content.	1	f	427
2132	`assertContains` provides more informative failure messages and can also check the status code.	2	t	427
2133	`assertContains` can check for text within CSS files linked in the HTML.	3	f	427
2134	Manual checking with `response.content.decode()` is always preferred for better control.	4	f	427
2135	`assertContains` only works if the text is found within a `<span>` tag.\n</span>\n<TOPIC>GET Requests</TOPIC>\n<TAG>assertContains Benefits</TAG>	5	f	427
2136	That the primary key of the returned instance is `None` before saving and populated after.	1	f	428
2137	That the form's `instance` attribute is populated with the new object and `form.is_bound` becomes `False`.	2	f	428
2138	That a new object now exists in the database, its attributes match the submitted form data, and `form.save()` returns the newly created model instance.	3	t	428
2139	That `form.cleaned_data` accurately reflects the data saved and that the database schema matches the model.	4	f	428
2140	Only that `form.save()` does not raise an exception and that `Article.objects.count()` has increased.	5	f	428
2141	Asserting against error messages is bad practice; tests should only check error codes.	1	f	429
2142	Default error messages are not translatable, so tests will fail in multilingual applications; mitigate by always using custom messages.	2	f	429
2143	There is no pitfall; Django guarantees default error messages will remain static across all versions.	3	f	429
2144	Django's default messages might be tweaked between versions, making tests brittle; mitigate by checking for essential substrings or by testing custom error messages if defined.	4	t	429
2145	Default error messages are too generic for effective testing; mitigate by replacing all default validators with custom ones.	5	f	429
2146	A `KeyError` for 'name' will be raised when `form.is_valid()` is called.	1	f	430
2147	`assert not form.is_valid()` and `assert "name" in str(form.errors)`.	2	f	430
2148	`assert not form.is_valid()`, and `assert form.fields['name'].error_messages['required'] == "This field is required."`.	3	f	430
2149	`assert not form.is_valid()`, `assert 'name' in form.errors`, and `assert "This field is required." in form.errors['name']`.	4	t	430
2150	`assert form.is_valid()` (it should be false), and check `form.non_field_errors()` for a message about 'name'.	5	f	430
2151	Ability to execute client-side JavaScript and test dynamic DOM manipulations.	1	f	431
2152	It automatically generates test cases based on your view definitions.	2	f	431
2153	It requires a running development server (like Gunicorn) for each test.	3	f	431
2154	Significantly faster execution speed and greater isolation from browser/network issues.	4	t	431
2155	It primarily tests database model integrity without invoking view logic.	5	f	431
2156	To ensure that `User` objects are created outside of the test database transaction.	1	f	432
2157	To automatically mock the `User` model across all tests using this fixture.	2	f	432
2158	To validate the `User` model's fields before any tests run.	3	f	432
2159	To define a global `my_user` variable accessible in all test functions without passing it as an argument.	4	f	432
2160	To provide reusable, cleanly set-up `User` instances for tests, reducing boilerplate and improving test readability.	5	t	432
2161	`'PENDING'`	1	t	433
2162	It will raise an `IntegrityError` because `status` was not provided.	2	f	433
2163	An empty string `''`	3	f	433
2164	`None`	4	f	433
2165	The value will be undefined until explicitly set.	5	f	433
2166	It only accesses the very first context dictionary pushed onto the stack.	1	f	434
2167	It only accesses the last context dictionary pushed onto the stack (the view's direct context).	2	f	434
2168	It searches through the stack of contexts from top to bottom, returning the first found value for 'my_key'.	3	t	434
2169	It concatenates all values for 'my_key' found in any context dictionary.	4	f	434
2170	It raises an `AttributeError` because direct key access is not supported on `ContextList`.	5	f	434
2171	Django will prompt the user to confirm database access for the test.	1	f	435
2172	The operation will proceed silently using the development database, potentially corrupting it.	2	f	435
2173	The ORM operation will use an in-memory SQLite database by default.	3	f	435
2174	A `RuntimeError` will be raised by `pytest-django` indicating that database access is not allowed.	4	t	435
2175	The test will automatically pass, assuming no database interaction was actually needed.	5	f	435
2176	The end-to-end user experience of filling out and submitting the form via a browser.	1	f	436
2177	The logic within custom <code>clean_fieldname()</code> methods and the overall <code>clean()</code> method.	2	t	436
2178	The redirection behavior of a view after a successful form submission.	3	f	436
2179	The HTML rendering of the form fields in a template.	4	f	436
2180	The database interactions triggered by the form's <code>save()</code> method if it creates related objects.	5	f	436
2181	It's better to test each field's validator individually rather than the form's `is_valid()` method.	1	f	437
2182	One should instead `assert form.cleaned_data` is empty, as that's the primary indicator of invalidity.	2	f	437
2183	`assert not form.is_valid()` provides enough information, as Django's internal logging captures specific errors.	3	f	437
2184	`assert not form.is_valid()` is sufficient if you trust Django's built-in validation messages.	4	f	437
2185	The form might be invalid for an unexpected reason; one should also check `form.errors` for the correct field(s) and specific error message(s).	5	t	437
2186	<code>MY_STORE_SETTINGS_MODULE</code>	1	f	438
2187	<code>my_store.settings</code>	2	t	438
2188	<code>settings.my_store</code>	3	f	438
2189	<code>manage.py --settings=my_store.settings</code>	4	f	438
2190	<code>my_store/settings.py</code>	5	f	438
2191	It ensures test isolation, preventing data created in one test from affecting others, and improves test speed by avoiding full database recreation.	1	t	439
2192	It primarily serves to reduce the disk space used by the test database.	2	f	439
2193	It forces tests to use raw SQL, which is faster than dictionary operations.	3	f	439
2194	It allows data to persist between tests, enabling complex multi-test scenarios.	4	f	439
2195	It makes tests easier to debug by leaving all test data in the database after the test run.	5	f	439
2196	A database transaction must be manually started.	1	f	440
2197	The form must have been instantiated with `commit=True`.	2	f	440
2198	All fields in the form must be included in the `ModelForm`'s `Meta.fields` attribute.	3	f	440
2199	The form must be valid; `form.is_valid()` should have been called and returned `True`.	4	t	440
2200	The associated model instance must already exist in the database if `form.save()` is called without arguments.	5	f	440
2201	The view's filtering logic (e.g., `is_published=True`) is working correctly.	1	t	441
2202	The `reverse()` function correctly resolved the URL for the view.	2	f	441
2203	The test setup successfully created the `unpublished_article`.	3	f	441
2204	The `article_list.html` template correctly hides unpublished articles.	4	f	441
2205	The `Article` model's `__str__` method is implemented correctly.	5	f	441
2206	It only follows 301 redirects, not 302 redirects.	1	f	442
2207	It returns the redirect response (e.g., 302) but adds the target URL to `response.followed_url`.	2	f	442
2208	The `follow=True` parameter is ignored by `client.get()` and only works for `client.post()`.	3	f	442
2209	It raises an exception if more than one redirect occurs.	4	f	442
2210	The client makes the initial request, receives the redirect, and then makes a new request to the target URL; the final response is from this target URL.	5	t	442
2211	By calling `my_form.commit_save(model_obj)`.	1	f	443
2212	By calling the `save()` method directly on the model instance: `model_obj.save()`.	2	t	443
2213	It is automatically saved when `model_obj` goes out of scope.	3	f	443
2214	By calling `my_form.save_m2m()` if there are no M2M fields, or `my_form.full_save()`.	4	f	443
2215	By calling `my_form.save(commit=True, instance=model_obj)`.	5	f	443
2216	Because `form.save()` returns a new instance, and `my_instance` remains unchanged unless refreshed.	1	f	444
2217	To re-run the model's `clean()` method with the updated data from the database.	2	f	444
2218	It's rarely needed; attributes on `my_instance` are updated in-memory by `form.save()` automatically.	3	f	444
2219	To clear any cached query results related to `my_instance`.	4	f	444
2220	To ensure the Python object `my_instance` in your test reflects the latest data actually persisted in the database after the `form.save()` operation.	5	t	444
2221	It typically doesn't need testing if the calculations are straightforward.	1	f	445
2222	As a unit test, instantiating the model in memory without saving it, and without using <code>@pytest.mark.django_db</code>.	2	t	445
2223	By manually invoking the method in the Django shell and verifying the output.	3	f	445
2224	As an integration test using <code>@pytest.mark.django_db</code> and the Django test client.	4	f	445
2225	As an E2E test, by creating a view that calls this method and checking the rendered output.	5	f	445
2226	To provide a new syntax for writing Django models and views.	1	f	446
2227	To replace Django's built-in <code>unittest</code> framework entirely with <code>pytest</code> syntax only for non-Django tests.	2	f	446
2228	To enforce stricter code formatting rules specific to Django test files.	3	f	446
2229	To automatically generate <code>pytest.ini</code> files for Django projects.	4	f	446
2230	To integrate <code>pytest</code> with Django, enabling discovery of settings, test database management, and Django-specific fixtures.	5	t	446
2231	To configure the <code>live_server</code> fixture specifically for running end-to-end browser tests.	1	f	447
2232	To specify which Django settings module the test should exclusively use for its configuration.	2	f	447
2233	To automatically populate the test database with a predefined set of sample data before the test runs.	3	f	447
2234	To signal that the test requires database access and to manage its setup, teardown, and transactional behavior.	4	t	447
2235	To instruct pytest to skip this test if a database connection cannot be established.	5	f	447
2236	Only non-Django related tests will be executed by <code>pytest</code>.	1	f	448
2237	<code>pytest</code> will prompt the user to enter the settings module path interactively.	2	f	448
2238	<code>pytest</code> will automatically use a default, minimal Django settings configuration.	3	f	448
2239	<code>pytest-django</code> will be unable to properly initialize the Django environment, leading to errors when tests interact with Django components.	4	t	448
2240	Tests will run, but database interactions will use the development database instead of a test database.	5	f	448
2241	It confirms that the data was actually written to and can be read back correctly from the database, providing stronger assurance of persistence.	1	t	449
2242	This practice is generally discouraged as it adds unnecessary database load during testing.	2	f	449
2243	It is primarily to test the performance of `SELECT` queries under test conditions.	3	f	449
2244	The instance returned by `create()` might not have all fields populated until a subsequent `get()` call.	4	f	449
2245	It ensures that database-level triggers or constraints have been applied, which `create()` might bypass.	5	f	449
2246	`form.is_valid()` returns `True`, but `form.cleaned_data['send_updates']` will be `None`.	1	f	450
2247	`form.is_valid()` returns `True`, and `form.cleaned_data['send_updates']` will be `False`.	2	t	450
2248	`form.is_valid()` returns `False` because `send_updates` was missing.	3	f	450
2249	`form.is_valid()` returns `True`, but accessing `form.cleaned_data['send_updates']` raises a `KeyError`.	4	f	450
2250	The form instantiation will fail because `send_updates` is missing from `form_data`.	5	f	450
2251	By checking the boolean value of the `form.is_bound` attribute.	1	t	451
2252	By checking if `form.initial` is empty.	2	f	451
2253	The `form.is_valid()` method returns a special status for bound forms.	3	f	451
2254	By trying to access `form.data` and catching a `KeyError`.	4	f	451
2255	By checking if `form.cleaned_data` is populated.	5	f	451
2256	200	1	t	452
2257	404	2	f	452
2258	500	3	f	452
2259	201	4	f	452
2260	302	5	f	452
2261	`application/x-www-form-urlencoded`	1	t	453
2262	`application/xml`	2	f	453
2263	`multipart/form-data`	3	f	453
2264	`text/plain`	4	f	453
2265	`application/json`	5	f	453
2266	The test is wrapped in a database transaction, and any changes made during the test are rolled back after the test completes.	1	t	454
2267	The test uses a read-only connection to the database.	2	f	454
2268	Transactions are disabled, and each ORM operation is auto-committed individually.	3	f	454
2269	A new, empty test database is created and migrated for each individual test function.	4	f	454
2270	All database changes made during the test are committed to the test database permanently.	5	f	454
2271	The client automatically follows the redirect, so `response.url` is the original URL.	1	f	455
2272	By accessing `response.headers['X-Redirect-To']`.	2	f	455
2273	The target URL is found in `response.context['redirect_target']`.	3	f	455
2274	By parsing `response.content` for a meta refresh tag.	4	f	455
2275	By accessing `response.url`.	5	t	455
2276	Testing a custom validation method within a Django form class in isolation.	1	f	456
2277	Testing if a view correctly queries a model for specific data and passes it to the template context.	2	t	456
2278	Testing a model's custom `@property` that derives a value from its own fields without database access.	3	f	456
2279	Testing if a user can successfully complete the entire checkout process in an e-commerce application.	4	f	456
2280	Testing a utility function that calculates a complex mathematical formula based on its inputs.	5	f	456
2281	Because posts exactly seven days old are considered too old by definition.	1	f	457
2282	Because `self.published_date` is equal to `seven_days_ago`, making `self.published_date &gt; seven_days_ago` false.	2	t	457
2283	Due to a deliberate off-by-one error introduced in the test setup.	3	f	457
2284	Because `timezone.now()` and `timedelta` calculations are imprecise at exact boundaries.	4	f	457
2285	Because `self.published_date` falls outside the `self.published_date = now` condition.	5	f	457
2286	The `initial` parameter, e.g., `MyForm(initial=form_data)`.	1	f	458
2287	The `cleaned_data` parameter directly.	2	f	458
2288	The `instance` parameter, e.g., `MyForm(instance=form_data)`.	3	f	458
2289	The `files` parameter, regardless of data type.	4	f	458
2290	The `data` parameter, e.g., `MyForm(data=form_data)`.	5	t	458
2291	Compare it with string values (e.g., `message.level == 'SUCCESS'`).	1	f	459
2292	Compare it with constants from `django.contrib.messages.constants` (e.g., `message.level == message_constants.SUCCESS`).	2	t	459
2293	The `level` attribute is a human-readable string itself.	3	f	459
2294	Use `message.is_success()` or `message.is_error()` methods.	4	f	459
2295	Compare it with predefined integer values you look up (e.g., `message.level == 25`).	5	f	459
2296	Using a library to "freeze" time (e.g., `freezegun`) or calculating dates relative to a fixed reference point within the test, rather than relying on `timezone.now()` directly in assertions.	1	t	460
2297	Storing expected dates as UNIX timestamps to avoid timezone issues.	2	f	460
2298	Only testing with dates far in the past or future to avoid ambiguity.	3	f	460
2299	Ensuring the test database server's clock is synchronized with an NTP server.	4	f	460
2300	Running these tests only at a specific time of day via a CI schedule.	5	f	460
2301	By checking `form.errors[None]` or `form.cleaned_data['__all__']`.	1	f	461
2302	Non-field errors are caught as exceptions by `form.is_valid()` and must be inspected from the exception object.	2	f	461
2303	By checking `form.global_errors()` or `form.summary_errors()`.	3	f	461
2304	By checking `form.non_field_errors()` (which returns a list) or `form.errors['__all__']` (an `ErrorList`).	4	t	461
2305	They are automatically printed to `stderr` and not programmatically accessible.	5	f	461
2306	`form.data` will be empty until `form.is_valid()` is called.	1	f	462
2307	The form instantiation will raise an error because 'subject' has an initial value but is not in data.	2	f	462
2308	`form.data['subject']` will be "General Inquiry".	3	f	462
2309	The 'subject' key will not be present in `form.data`.	4	t	462
2310	`form.data['subject']` will be `None`.	5	f	462
2311	An integration test using the Django test client.	1	t	463
2312	An End-to-End test simulating user interaction through a browser.	2	f	463
2313	A unit test focusing solely on the middleware class's methods in isolation.	3	f	463
2314	A performance test to measure the middleware's overhead.	4	f	463
2315	Middleware logic is too coupled to be tested effectively.	5	f	463
2316	By ensuring that the user interface remains consistent before and after refactoring.	1	f	464
2317	By automatically suggesting better code structures during the refactoring process.	2	f	464
2318	By preventing any changes to the database schema during refactoring.	3	f	464
2319	By guaranteeing that refactored code will perform better than the original.	4	f	464
2320	By quickly indicating if changes to the code have broken existing functionality of individual components.	5	t	464
2321	To automatically generate API endpoints for your models.	1	f	465
2322	To encapsulate frequently used or complex database queries and domain-specific data retrieval logic.	2	t	465
2323	To replace the need for writing any model instance methods.	3	f	465
2324	To allow models to connect to multiple different database backends simultaneously.	4	f	465
2325	To enforce specific data types for query parameters at the database level.	5	f	465
2326	500	1	f	466
2327	404	2	t	466
2328	A Python `Http404` exception will propagate to the test.	3	f	466
2329	200, but with empty content.	4	f	466
2330	302, redirecting to a generic error page.	5	f	466
2331	Check if `form.errors['clean_feedback_text']` contains the error.	1	f	467
2332	Assert `form.cleaned_data['feedback_text']` contains the error message "Feedback too short.".	2	f	467
2333	The test should catch the `forms.ValidationError` directly when `form.is_valid()` is called.	3	f	467
2334	Assert `form.is_valid()` is `False` and check if `"Feedback too short."` is in `form.non_field_errors()`.	4	f	467
2335	Assert `form.is_valid()` is `False`, `'feedback_text'` is a key in `form.errors`, and `"Feedback too short."` is in `form.errors['feedback_text']`.	5	t	467
2336	Django's `client` fully renders the HTML using an internal engine, while Playwright only captures the HTML source.	1	f	468
2337	Both Playwright and `client` render HTML and CSS identically, but `client` does not execute JavaScript.	2	f	468
2338	Playwright can only interact with elements visible on screen, while `client` can interact with all elements in the HTML string.	3	f	468
2339	Playwright's browser renders the HTML, applies CSS, and builds a DOM, while `client` only deals with the raw HTML string.	4	t	468
2340	Django's `client` uses a shadow DOM for rendering, whereas Playwright uses the actual browser DOM.	5	f	468
2341	Such tests are too complex to write and maintain.	1	f	469
2342	It's impossible to isolate Django's built-in features for testing.	2	f	469
2343	The Django developers have already tested this functionality extensively.	3	t	469
2344	These tests would be too slow and violate the "fast" principle of unit tests.	4	f	469
2345	Unit tests cannot interact with Django's ORM features.	5	f	469
2346	The view redirects to a success page, ignoring the validation errors.	1	f	470
2347	The view successfully creates a new model instance despite the invalid data.	2	f	470
2348	The view re-renders the form, and form errors are present in the context or response.	3	t	470
2349	The view raises a 500 server error to indicate failure.	4	f	470
2350	The database is rolled back to its state before the form was submitted.	5	f	470
2351	`new_object.pk` is `None`, but the object's data (excluding PK) is saved to the database.	1	f	471
2352	`new_object.pk` is `None` (or empty), and the object has not yet been saved to the database.	2	t	471
2353	`form.save(commit=False)` returns `None`; the instance is accessed via `form.instance`.	3	f	471
2354	`new_object.pk` is populated, but `commit=False` means no database transaction was committed.	4	f	471
2355	`new_object.pk` is assigned a temporary ID, and the object is in a pending state in the database.	5	f	471
2356	<code>actions/publish-report@vX</code>	1	f	472
2357	<code>actions/store-results@vX</code>	2	f	472
2358	<code>actions/save-files@vX</code>	3	f	472
2359	<code>actions/export-data@vX</code>	4	f	472
2360	<code>actions/upload-artifact@vX</code>	5	t	472
2361	To define the order in which <code>pytest</code> should execute test functions.	1	f	473
2362	To specify the Python versions compatible with the project.	2	f	473
2363	To list the project's external package dependencies and their versions, ensuring reproducible environments.	3	t	473
2364	To document the project's coding style and conventions.	4	f	473
2365	To store sensitive credentials required for running tests.	5	f	473
2366	`MagicMock` can only be used to mock classes, while `Mock` can mock functions and attributes.	1	f	474
2367	`MagicMock` comes with default implementations for most Python "magic methods" (e.g., `__len__`, `__str__`), while `Mock` does not.	2	t	474
2368	`MagicMock` is an older, deprecated version of `Mock`.	3	f	474
2369	`MagicMock` objects cannot have their `return_value` or `side_effect` configured.	4	f	474
2370	`MagicMock` automatically records call arguments, while `Mock` requires explicit configuration for this.	5	f	474
2371	It speeds up subsequent workflow runs by reusing previously downloaded/installed dependencies if they haven't changed.	1	t	475
2372	It automatically updates dependencies to their latest versions before caching them.	2	f	475
2373	It reduces the disk space usage on the GitHub Actions runners.	3	f	475
2374	It ensures that only official, signed versions of dependencies are used.	4	f	475
2375	It allows workflows to run even if the package repositories (like PyPI) are temporarily unavailable.	5	f	475
2376	The patch remains active even after the test finishes, affecting subsequent tests.	1	f	476
2377	The mock may accept any method call with any arguments, hiding errors if the code under test uses the dependency incorrectly (e.g., wrong method name or signature).	2	t	476
2378	An `AttributeError` is raised if the real object doesn't have a method that the mock is configured for.	3	f	476
2379	The mock object cannot have its `return_value` or `side_effect` configured.	4	f	476
2380	The test run becomes significantly slower due to the overhead of a more flexible mock.	5	f	476
2381	<code>assert mock_object.send_data.call_args == ((customer_id=101), {'payload': {'type': 'update'}}) and mock_object.send_data.call_count == 1</code>	1	f	477
2382	<code>mock_object.send_data.assert_called_once_with(customer_id=101, payload={'type': 'update'})</code>	2	t	477
2383	<code>mock_object.send_data.verify_single_call(customer_id=101, payload={'type': 'update'})</code>	3	f	477
2384	<code>mock_object.send_data.assert_called(times=1, args=(customer_id=101, payload={'type': 'update'}))</code>	4	f	477
2385	<code>mock_object.send_data.assert_called_with_once(customer_id=101, payload={'type': 'update'})</code>	5	f	477
2386	To generate comprehensive documentation for all code changes automatically.	1	f	478
2387	To automatically deploy every code change directly to the production environment.	2	f	478
2388	To replace the need for developers to write unit tests by using AI-driven test generation.	3	f	478
2389	To manually test all new features before they are integrated into the main codebase.	4	f	478
2390	To frequently merge code changes into a central repository, an automated build, and run automated tests to detect bugs early.	5	t	478
2391	To ensure the test database is properly set up and accessible before the fixture code executes.	1	t	479
2392	To automatically roll back any changes made by the test function after it completes.	2	f	479
2393	To enable the use of Django's template rendering engine within the fixture.	3	f	479
2394	To make the fixture available globally across all test files.	4	f	479
2395	To allow the fixture to be parameterized with different database backends.	5	f	479
2396	Add the `@pytest.mark.django_db` marker to the fixture definition that is causing the warning.	1	t	480
2397	Rewrite the fixture to avoid direct database access, using mocks instead.	2	f	480
2398	Downgrade `pytest-django` to an older version where this warning is not present.	3	f	480
2399	Suppress the warning in the `pytest.ini` configuration file.	4	f	480
2400	Ensure all test functions using the fixture are marked with `@pytest.mark.django_db(transaction=True)`.	5	f	480
2401	To observe calls to a real object or method while still executing the original code, useful for verifying interactions without full replacement.	1	t	481
2402	To inject "spyware" into third-party libraries to monitor their internal state during tests.	2	f	481
2403	To replace an object with a mock that records interactions but prevents any actual code execution of the original object.	3	f	481
2404	To provide a detailed trace of all Python function calls during the test run, similar to a profiler.	4	f	481
2405	To create a mock object that automatically fails the test if any of its methods are called unexpectedly.	5	f	481
2406	It generates test data directly from production database snapshots, ensuring realism.	1	f	482
2407	It allows declarative definition of factories that can automatically create and associate related model instances, reducing boilerplate.	2	t	482
2408	It bypasses the Django ORM for significantly faster data creation.	3	f	482
2409	It uses AI to predict the most relevant test data needed for covering edge cases.	4	f	482
2410	It is primarily used for generating large volumes of data for load testing, not for individual test setup.	5	f	482
2411	<code>pip install venv</code>	1	f	483
2412	<code>python3 -m venv venv</code>	2	t	483
2413	<code>source venv/activate</code>	3	f	483
2414	<code>virtualenv create venv</code>	4	f	483
2415	<code>python3 manage.py create_venv venv</code>	5	f	483
2416	The `client.post()` method only works for views that have been explicitly marked with `@csrf_exempt`.	1	f	484
2417	CSRF protection is disabled by default when `DEBUG` is `True` in Django settings, which is common for tests.	2	f	484
2418	Unit tests using the client run at a level below middleware, so CSRF checks are not performed.	3	f	484
2419	`pytest-django` automatically applies `@csrf_exempt` to all views during test runs.	4	f	484
2420	Django's test client, used by the `client` fixture, automatically manages and includes the necessary CSRF token for POST requests.	5	t	484
2421	It will raise an `AttributeError` as `side_effect` cannot be a list.	1	f	485
2422	It will raise a `StopIteration` error because the iterable is exhausted.	2	t	485
2423	It will re-start from the beginning of the list, returning "first".	3	f	485
2424	It will return the last value from the list, "second".	4	f	485
2425	It will return `None`.	5	f	485
2426	It is significantly faster than using `unittest.mock` directly.	1	f	486
2427	It allows mocks to persist their state across multiple test functions within the same test class.	2	f	486
2428	It often eliminates the need for explicit imports from `unittest.mock` in test files and provides an API felt as more "pytest-idiomatic".	3	t	486
2429	It provides fundamentally different mocking capabilities not available in `unittest.mock`.	4	f	486
2430	It automatically generates mocks for all dependencies of the function under test.	5	f	486
2431	A network traffic simulator and Django's template rendering engine.	1	f	487
2432	A headless browser instance and a static file server.	2	f	487
2433	A JavaScript execution engine and an in-memory SQLite database.	3	f	487
2434	A mock HTTP server and a direct interface to Django's ORM.	4	f	487
2435	A real, running HTTP server and a connection to the isolated test database.	5	t	487
2436	CI automatically fixes minor bugs detected by the tests.	1	f	488
2437	CI tools provide advanced AI-driven suggestions for improving code quality.	2	f	488
2438	CI acts as a safety net, preventing regressions from being merged or deployed.	3	t	488
2439	CI eliminates the need for code reviews by ensuring all tests pass.	4	f	488
2440	CI significantly reduces the number of tests developers need to write locally.	5	f	488
2441	Manually triggering the workflow three times, specifying a different Python version each time via input parameters.	1	f	489
2442	Creating separate workflow files for each Python version.	2	f	489
2443	Using a `strategy` with a `matrix` that lists the desired Python versions.	3	t	489
2444	This is not possible; jobs can only target a single Python version.	4	f	489
2445	Using conditional `if` statements within steps for each Python version.	5	f	489
2446	Database query optimization, by identifying slow SQL queries and suggesting indexing strategies.	1	f	490
2447	Load testing, by simulating many concurrent users accessing the application to understand system behavior under real-world load.	2	t	490
2448	Static code analysis to predict performance bottlenecks before runtime.	3	f	490
2449	Micro-benchmarking, by measuring the execution time of individual functions or small code snippets.	4	f	490
2450	Frontend performance testing, by analyzing page load times and resource rendering in the browser.	5	f	490
2451	When the object to be mocked is defined in a third-party library whose source code cannot be modified.	1	f	491
2452	When you need to mock a built-in Python function like `open()` or `len()`.	2	f	491
2453	When `autospec=True` is required, as `@patch()` does not support it.	3	f	491
2454	When you want to mock an entire module and all its contents.	4	f	491
2455	When you already have an instance of an object and want to mock one of its methods or attributes specifically for that instance.	5	t	491
2456	To comply with network protocols that require dynamic port assignment for test servers.	1	f	492
2457	To make the URL harder to guess, enhancing security during test runs.	2	f	492
2458	To avoid port conflicts with other running applications (like a dev server) and enable parallel test execution.	3	t	492
2459	To ensure the port number is always a prime number, which is more performant for HTTP traffic.	4	f	492
2460	To allow the test server to bind to multiple IP addresses simultaneously.	5	f	492
2461	`pytest-django` modifies Django's database settings for the scope of the test, and `live_server` respects these modified settings.	1	t	493
2462	`live_server` scans for `.sqlite3` files in the `tests` directory and picks the most recently modified one.	2	f	493
2463	The test database name is passed as a command-line argument to the `live_server` process.	3	f	493
2464	`@pytest.mark.django_db` injects the database connection details directly into the `live_server` object.	4	f	493
2465	`live_server` always creates a new in-memory database named `test_live_server_db`.	5	f	493
2466	To allow users to interactively "check out" artifacts produced by the workflow.	1	f	494
2467	To check out and install a specific version of Python on the runner.	2	f	494
2468	To finalize the workflow and "check out" or complete the job.	3	f	494
2469	To connect to an external version control system other than GitHub.	4	f	494
2470	To check out the repository's code onto the runner so that workflow steps can access project files.	5	t	494
2471	By passing them as command-line arguments when manually triggering the workflow.	1	f	495
2472	By storing them in a public Gist and fetching them using `curl` in the workflow.	2	f	495
2473	By committing them in an encrypted file within the repository and decrypting them during the workflow run.	3	f	495
2474	By hardcoding them directly into the workflow YAML file, as it's stored in a private repository.	4	f	495
2475	By storing them as encrypted "Secrets" in the GitHub repository settings and accessing them via `${{ secrets.SECRET_NAME }}` in the workflow.	5	t	495
2476	Fixtures that access the database too frequently, causing performance issues.	1	f	496
2477	Fixtures performing database operations without being explicitly marked with `@pytest.mark.django_db`.	2	t	496
2478	Defining fixtures directly within test functions instead of `conftest.py`.	3	f	496
2479	Using the older `transaction.commit_on_success` decorator in fixtures.	4	f	496
2480	Tests that do not use fixtures for database setup.	5	f	496
2481	A customer sitting at a table, placing an order (requesting a URL) and receiving a meal (HTML response).	1	t	497
2482	The restaurant's delivery driver, only handling outgoing meals (responses).	2	f	497
2483	A health inspector checking the kitchen's compliance (internal Django logic).	3	f	497
2484	The menu designer, focused only on the presentation (CSS and static assets).	4	f	497
2485	Another chef in the kitchen, helping prepare the dishes (modifying server-side code).	5	f	497
2486	`pytest-celery`	1	f	498
2487	`pytest-asyncio`	2	t	498
2488	`pytest-channels`	3	f	498
2489	`pytest-greenlet`	4	f	498
2490	`pytest-thread`	5	f	498
2491	To reduce licensing costs associated with development database usage.	1	f	499
2492	To speed up test execution by using a smaller, temporary database schema.	2	f	499
2493	To test database migration scripts more effectively in an isolated environment.	3	f	499
2494	To ensure a clean, predictable state for each test run and prevent destructive modifications to development data.	4	t	499
2495	To allow tests to directly manipulate production data for realistic scenarios.	5	f	499
2496	Tests are based on verifying specific properties (attributes) of Django model instances after ORM operations.	1	f	500
2497	It measures system properties like CPU usage and memory allocation under test conditions.	2	f	500
2498	It primarily focuses on testing UI properties, such as element visibility and styling, using browser automation.	3	f	500
2499	Tests are written by defining properties in a configuration file, which Hypothesis then uses to auto-generate Python test code.	4	f	500
2500	The testing framework generates a wide range of diverse inputs to test if defined properties (rules or invariants) of the code hold true.	5	t	500
2501	You must always patch the object at its original definition location.	1	f	501
2502	You must patch the object in the namespace where it is imported and used (looked up), not necessarily where it is originally defined.	2	t	501
2503	Patching only works for classes, not for functions or module-level variables.	3	f	501
2504	The object being patched must be explicitly imported in the test file using `from ... import ...`.	4	f	501
2505	The patch target string must always be an absolute path from the project root.	5	f	501
2506	A list of all URL patterns configured in the Django application.	1	f	502
2507	A fixed URL, always `http://localhost:8000`, matching the default development server.	2	f	502
2508	The path to the Django project's root directory on the file system.	3	f	502
2509	The base URL (e.g., `http://localhost:PORT`) where the test server is listening, with PORT usually being dynamic.	4	t	502
2510	The current session ID for the test user interacting with the `live_server`.	5	f	502
2511	They make Python code run significantly faster.	1	f	503
2512	They encrypt your project's source code.	2	f	503
2513	They isolate project dependencies, preventing version conflicts between projects.	3	t	503
2514	They provide a graphical user interface for managing Django settings.	4	f	503
2515	They automatically write unit tests for your code.	5	f	503
2516	The operating system the runner will use (e.g., `ubuntu-latest`).	1	f	504
2517	A conditional statement that determines if the workflow should run based on file changes.	2	f	504
2518	The specific jobs that need to be completed before this workflow can start.	3	f	504
2519	The Python version to be used for the workflow steps.	4	f	504
2520	The events that will trigger the workflow to run (e.g., `push`, `pull_request`).	5	t	504
2521	`pytest-django` re-runs all database migrations before every test function to reset the data.	1	f	505
2522	Each test function automatically creates a new, temporary database schema that is dropped after the test.	2	f	505
2523	`pytest-django` usually wraps each test in a database transaction that is rolled back after the test completes, ensuring a clean state for subsequent tests.	3	t	505
2524	Tests are required to explicitly delete any data they create in a `teardown_method` or equivalent cleanup function.	4	f	505
2525	Data created by one test is automatically namespaced or tagged so it's not visible to other tests.	5	f	505
2526	It significantly speeds up the test execution by creating more lightweight mock objects.	1	f	506
2527	The mock will conform to the interface (methods, attributes, and call signatures) of the real object, raising errors for incorrect usage.	2	t	506
2528	The mock will automatically record all interactions and save them to a log file.	3	f	506
2529	The mock will automatically generate return values based on the type hints of the real object's methods.	4	f	506
2530	It allows the mock to bypass Python's Global Interpreter Lock (GIL) for better performance.	5	f	506
2531	Set `mock_service.do_task.return_value = raise ValueError("Invalid input")`.	1	f	507
2532	Set `mock_service.do_task.side_effect = ValueError("Invalid input")`.	2	t	507
2533	Define a new class inheriting from `Mock` that overrides `do_task` to raise the error.	3	f	507
2534	Use `mock_service.do_task.expect_exception(ValueError, "Invalid input")`.	4	f	507
2535	Set `mock_service.do_task.raises = ValueError("Invalid input")`.	5	f	507
2536	Mock internal components of your own application as much as possible, even in integration tests.	1	f	508
2537	Focus solely on the return value of the function under test, ignoring interactions with mocked dependencies.	2	f	508
2538	Make mocks as complex as possible to perfectly replicate the real object's full behavior.	3	f	508
2539	Always use `mocker.spy()` instead of `mocker.patch()` for better visibility.	4	f	508
2540	Use `autospec=True` to make mocks conform to the interface of the real object.	5	t	508
2541	The test database schema is compared with the production schema for consistency.	1	f	509
2542	Playwright injects JavaScript into the base template to communicate with the test runner.	2	f	509
2543	All static files are collected into a temporary directory served by `live_server`.	3	f	509
2544	The `live_server` fixture starts the Django development server in a new thread, configured to use the test database.	4	t	509
2545	A snapshot of the current browser DOM is taken for later comparison.	5	f	509
2546	Only the <code>auth_user</code> table is created and populated; other application tables remain uncreated.	1	f	510
2547	The tables are populated with default sample data provided by Django's core applications (like auth).	2	f	510
2548	The tables contain a complete copy of all data from the project's development database.	3	f	510
2549	The tables do not yet exist; they are created dynamically on-the-fly as each test accesses them.	4	f	510
2550	The tables exist according to the Django models' schema but are empty of any application-specific data.	5	t	510
2551	It bypasses Django's signal system, making tests less complex.	1	f	511
2552	It ensures consistency with how the application interacts with the database and leverages model logic like custom `save()` methods.	2	t	511
2553	It allows direct manipulation of database schema during tests.	3	f	511
2554	It requires less code than equivalent raw SQL queries for all scenarios.	4	f	511
2555	It is significantly faster for bulk data creation than raw SQL.	5	f	511
2556	The element must have vertical scrollbars explicitly enabled via `overflow-y: scroll`, regardless of actual content size.	1	f	512
2557	The `clientHeight` measurement is inaccurate because the element is using `box-sizing: border-box`.	2	f	512
2558	There is vertical overflow; some of the element's content is not visible within its current height and would require scrolling to be seen.	3	t	512
2559	The sum of the element's `padding-top` and `padding-bottom` is larger than the height of its actual content.	4	f	512
2560	The element is positioned using `position: absolute` and its bottom edge extends beyond its containing block.	5	f	512
2561	`page.save_view_as_png(output_path="filename.png")`	1	f	513
2562	`page.get_screenshot_data().write_to_file_system("filename.png")`	2	f	513
2563	`page.capture_image(to_file="filename.png")`	3	f	513
2564	`page.screenshot(path="filename.png")`	4	t	513
2565	`page.visual_snapshot(name="filename", format="png")`	5	f	513
2566	To ensure that `data-testid` attributes remain globally unique across all viewports even if elements are similar.	1	f	514
2567	Because CSS media queries cannot alter the structure of HTML elements, only their styling and visibility.	2	f	514
2568	To make it easier for search engines to crawl multiple versions of the site content.	3	f	514
2569	Primarily to reduce the amount of JavaScript needed for handling responsive state changes.	4	f	514
2570	To optimize the user experience (UX) and user interface (UI) for the specific constraints and interaction models of different devices.	5	t	514
2571	It ensures that Playwright directs the browser to the specific, dynamically-ported server instance that is running the Django application connected to the isolated test database.	1	t	515
2572	`live_server.url` is the only URL that `pytest-django` whitelists for database write access during tests.	2	f	515
2573	`live_server.url` contains a unique session token that authenticates the Playwright browser with the test server.	3	f	515
2574	It allows Django's `reverse()` function to correctly resolve paths relative to the `live_server`'s root.	4	f	515
2575	Using any other base URL (like `http://localhost:8000`) will cause `live_server` to automatically redirect to `live_server.url`, adding overhead.	5	f	515
2576	Playwright's more advanced waits like <code>expect()</code> do not allow specifying a timeout value.	1	f	516
2577	They are not supported in headless browser mode.	2	f	516
2578	They make tests flaky (if the wait is too short) or slow (if too long) because they guess at timing rather than waiting for actual conditions.	3	t	516
2579	They consume excessive CPU resources compared to Playwright's built-in waits.	4	f	516
2580	They can only be used at the beginning or end of a test, not in the middle.	5	f	516
2581	It asserts that the button's click handler will make a call to "**/api/data" without actually waiting.	1	f	517
2582	It expects a response before clicking the button, potentially causing a deadlock.	2	f	517
2583	It clicks the button and waits for a network response from a URL matching "**/api/data" before proceeding.	3	t	517
2584	It clicks the button and then, in parallel, starts listening for any response from "**/api/data".	4	f	517
2585	It only clicks the button if a response from "**/api/data" has already been received.	5	f	517
2586	<code>expect(page.locator("#result")).to_be_visible()</code>	1	t	518
2587	A loop checking <code>page.locator("#result").is_visible()</code> with manual sleeps.	2	f	518
2588	<code>page.wait_for_timeout(3000)</code>	3	f	518
2589	<code>time.sleep(3)</code>	4	f	518
2590	<code>page.wait_for_selector("#result", state="visible")</code>	5	f	518
2591	Making tests independent of the browser's rendering engine.	1	f	519
2592	Ensuring that every test step takes a minimum amount of time to execute for consistency.	2	f	519
2593	Prioritizing test execution speed over test reliability.	3	f	519
2594	Reducing the number of assertions needed in a test.	4	f	519
2595	Waiting for specific, observable conditions in the application to be met, rather than waiting for an arbitrary duration.	5	t	519
2596	A dictionary with `x`, `y`, `width`, and `height` keys, representing the element's layout box dimensions and position relative to the viewport.	1	t	520
2597	The raw string value of the element's `style.bounds` attribute, if set.	2	f	520
2598	The CSS `border-box` dimensions as explicitly defined in the element's stylesheet.	3	f	520
2599	An object containing the DOM properties `offsetTop`, `offsetLeft`, `offsetWidth`, and `offsetHeight`.	4	f	520
2600	A boolean value: `true` if the element is currently within the visible boundaries of the viewport, `false` otherwise.	5	f	520
2601	It sends a special HTTP header to the server requesting a mobile version of the site.	1	f	521
2602	It applies a global CSS zoom factor to the entire page.	2	f	521
2603	It directly modifies the HTML structure of the page by adding or removing elements.	3	f	521
2604	It simulates user mouse drags to resize the browser window.	4	f	521
2605	It instructs the browser engine to adjust its rendering canvas, causing re-evaluation of CSS media queries and relevant JavaScript.	5	t	521
2606	`page.set_viewport_size(width=375, height=667)`	1	f	522
2607	`page.resize_viewport(375, 667)`	2	f	522
2608	`page.set_viewport_size("iphone_x_dimensions")`	3	f	522
2609	`page.viewport = {"width": 375, "height": 667}`	4	f	522
2610	`page.set_viewport_size({"width": 375, "height": 667})`	5	t	522
2611	It is typically a low-resolution or wireframe screenshot used primarily for quick performance checks rather than detailed visual comparison.	1	f	523
2612	It is a screenshot of the page taken before any CSS styles or JavaScript have been applied, showing the raw HTML structure.	2	f	523
2613	It is a screenshot that includes embedded annotations, comments, and approval status from the design or QA team.	3	f	523
2614	It serves as a reference image, which has been manually inspected and verified as visually correct, against which future screenshots of the same UI state are compared.	4	t	523
2615	It is the very first screenshot taken automatically by the test suite during its initial run, regardless of its visual correctness.	5	f	523
2616	To explicitly define the browser's viewport dimensions (width and height) to simulate different device screens.	1	t	524
2617	To set the screen resolution of the testing machine.	2	f	524
2618	To resize the entire browser window, including toolbars and menus.	3	f	524
2619	To measure the current viewport size after a page has loaded.	4	f	524
2620	To inject CSS media queries directly into the page.	5	f	524
2621	Only after a specific responsive element, like a mobile menu, is interacted with.	1	f	525
2622	Before navigating to the page (`page.goto()`) or very early in the test.	2	t	525
2623	It does not matter when `page.set_viewport_size()` is called.	3	f	525
2624	After all elements on the page have loaded and are interactive.	4	f	525
2625	At the very end of the test, just before assertions.	5	f	525
2626	Over-reliance on specific tag hierarchies (e.g., `div &gt; section &gt; span`).	1	t	526
2627	Locating elements by their ARIA role.	2	f	526
2628	Chaining two simple locators together for specificity.	3	f	526
2629	Use of `data-testid` attributes.	4	f	526
2630	Using `page.get_by_text()` with the `exact=True` option.	5	f	526
2631	Passing only the scheme and hostname (e.g. `http://localhost`) to `page.goto()` and letting Django handle routing.	1	f	527
2632	Forgetting to append `index.html` to `live_server.url` for root paths.	2	f	527
2633	Hardcoding the server address and port (e.g., `page.goto("http://localhost:8000/mypage/")`) instead of using `live_server.url`.	3	t	527
2634	Not using Django's `reverse()` function, as `live_server.url` automatically resolves named URLs.	4	f	527
2635	Using `live_server.url` for every navigation, as it's less performant than relative paths.	5	f	527
2636	It waits for the URL to contain the string "domcontentloaded" after matching the <code>url_condition</code>.	1	f	528
2637	It waits for the URL to match, and then separately waits for the <code>DOMContentLoaded</code> event on whatever page is currently active.	2	f	528
2638	It waits for both the URL to match the <code>url_condition</code> AND for the <code>DOMContentLoaded</code> event to fire on the page with the matching URL.	3	t	528
2639	It primarily waits for <code>DOMContentLoaded</code>, and only checks the URL match if the event doesn't fire within a timeout.	4	f	528
2640	The <code>wait_until</code> option is ignored if a URL condition is also provided.	5	f	528
2641	To adjust the <code>deviceScaleFactor</code> to simulate high-DPI or retina displays.	1	f	529
2642	To set the default font size for all text content rendered on the page.	2	f	529
2643	To define the maximum allowable dimensions to which the page can render content.	3	f	529
2644	To simulate different screen or device sizes by resizing the browser's viewport dimensions.	4	t	529
2645	To control the overall zoom level of the web page, similar to browser zoom.	5	f	529
2646	Verifying that all CSS styles are correctly applied by programmatically inspecting the computed styles of elements.	1	f	530
2647	Automatically generating textual descriptions of all visible UI elements and comparing these descriptions over time.	2	f	530
2648	Ensuring that the layout of elements on the page matches the original design wireframes pixel by pixel using an overlay.	3	f	530
2649	Comparing a newly captured screenshot of a UI component or page with a pre-approved "baseline" screenshot to detect unintended visual changes.	4	t	530
2650	Checking if all images and media assets on a page load correctly and have appropriate alternative text.	5	f	530
2651	To replace all <code>expect()</code> assertions when speed is critical.	1	f	531
2652	When waiting for elements that are known to load very quickly.	2	f	531
2653	For temporary debugging to pause the browser for manual inspection, but it should be removed before committing code.	3	t	531
2654	To ensure consistent test execution times across different environments.	4	f	531
2655	As a standard way to ensure all JavaScript animations have completed.	5	f	531
2656	When the UI change resulting from the network response is subtle, non-existent, or unreliable to detect directly.	1	t	532
2657	When you need to wait for an image or CSS file to load.	2	f	532
2658	When testing pages that do not make any client-side JavaScript calls.	3	f	532
2659	Always, as it's more direct to wait for network calls than UI elements.	4	f	532
2660	Only when the network request returns a non-200 status code.	5	f	532
2661	They are significantly slower as they require parsing the entire DOM tree for each lookup.	1	f	533
2662	They test implementation details rather than user-perceivable functionality, leading to failures on non-functional UI changes.	2	t	533
2663	They are not compatible with tests running in headless browser mode.	3	f	533
2664	They do not work well with applications using CSS-in-JS for styling.	4	f	533
2665	They cannot be used in conjunction with Playwright's auto-waiting mechanisms.	5	f	533
2666	Identify elements based on stable, unique attributes meaningful to the user or specifically for testing.	1	t	534
2667	Embed JavaScript snippets within locators to dynamically find elements.	2	f	534
2668	Use locators that are specific to the browser engine being tested (e.g., Chrome-only selectors).	3	f	534
2669	Always use the shortest possible CSS or XPath selector, regardless of its readability.	4	f	534
2670	Prioritize locators that rely on the element's tag name (e.g., `div`, `span`, `button`).	5	f	534
2671	`page.goto("http://localhost/app/items/")` assuming `live_server` always uses the standard HTTP port.	1	f	535
2672	`page.goto("/app/items/")` as Playwright infers the base URL from `live_server`.	2	f	535
2673	`page.goto(live_server.url + "/app/items/")` or using `urljoin(live_server.url, "/app/items/")`.	3	t	535
2674	`page.goto(reverse("items_url_name"))` directly, as `reverse` provides the full URL.	4	f	535
2675	`page.goto(f"{live_server.host}:live_server.port/app/items/")` by manually constructing from parts.	5	f	535
2676	Drag-and-drop operations are inherently slow and frequently cause test timeouts.	1	f	536
2677	Playwright's drag-and-drop API is experimental and not fully supported across all browsers.	2	f	536
2678	Most web applications do not use drag-and-drop, making it an edge case for testing.	3	f	536
2679	They often involve complex JavaScript, precise event sequences, and visual feedback that can be challenging for automation tools to handle consistently.	4	t	536
2868	<code>models.TextField</code>	3	f	574
2680	It requires manual intervention to confirm the drop location visually during the test.	5	f	536
2681	It's highly sensitive to structural changes in HTML, like adding wrapper elements or new sibling elements.	1	t	537
2682	`nth-child` selectors are deprecated in modern CSS and not fully supported by Playwright.	2	f	537
2683	It cannot locate buttons that are dynamically added to the page via JavaScript.	3	f	537
2684	It is less performant than using XPath for positional selection.	4	f	537
2685	It only works if the button has the text "Submit" or "Click".	5	f	537
2686	`page.goto(f"{live_server.url}:80")`	1	f	538
2687	`page.goto(reverse('home'))` assuming `reverse` returns a full URL.	2	f	538
2688	`page.goto(live_server.url + "root")`	3	f	538
2689	`page.goto(live_server.url)`	4	t	538
2690	`page.goto("/")`	5	f	538
2691	To verify that a specific URL is reachable by making an HTTP request to it.	1	f	539
2692	To ensure all resources from a specific URL domain have finished loading.	2	f	539
2693	To wait for a specific piece of text to appear in the URL bar.	3	f	539
2694	To pause test execution until the browser's current URL matches a specified pattern or condition.	4	t	539
2695	To preload a URL in the background for faster navigation.	5	f	539
2696	An element's visibility status (visible or hidden) can change based on the browser's current viewport size.	1	t	540
2697	Playwright automatically adapts its visibility assertions to account for responsive breakpoints.	2	f	540
2698	All interactive elements should remain visible and accessible regardless of the viewport dimensions.	3	f	540
2699	Playwright tests for responsive design should ideally be executed only on a single, fixed viewport size.	4	f	540
2700	Responsive design primarily affects CSS layout and styling, not whether an element is present in the DOM.	5	f	540
2701	The test will likely fail when a subsequent action or assertion on the element is attempted prematurely.	1	t	541
2702	The <code>page.wait_for_timeout(500)</code> call itself will raise a TimeoutError.	2	f	541
2703	The browser will freeze for 500ms, and then the test will proceed normally.	3	f	541
2704	The test will pass but log a performance warning.	4	f	541
2705	Playwright will automatically extend the 500ms wait until the element appears.	5	f	541
2706	To ensure that all images and visual assets on a website are properly optimized for file size and loading speed.	1	f	542
2707	To verify that the application's color scheme and branding guidelines are consistently applied across all pages.	2	f	542
2708	To automatically detect unintended visual changes in the UI by comparing screenshots of web pages or components against baseline images.	3	t	542
2709	To check for accessibility issues related to visual impairments, such as low contrast ratios.	4	f	542
2710	To test the application's responsiveness across different screen sizes and devices by visually inspecting layouts.	5	f	542
2711	To intercept and modify network responses before they reach the browser.	1	f	543
2712	To check if a specific UI element has been updated based on a network response.	2	f	543
2713	To synchronize test execution with the completion of a specific background network request.	3	t	543
2714	To ensure all network requests on the page are successful (status 200).	4	f	543
2715	To measure the response time of an API endpoint.	5	f	543
2716	If the element is generated by a third-party library whose code cannot be modified.	1	f	544
2717	When the specific order or position of an element is itself a functional requirement being tested.	2	t	544
2718	Whenever an element does not have an `id` or a unique class name.	3	f	544
2719	When testing applications built with older versions of HTML (pre-HTML5).	4	f	544
2720	For all elements within a list, to iterate through them reliably.	5	f	544
2721	Through the `locator.bounding_box()` method, as it includes all scroll and client dimensions.	1	f	545
2722	By taking a screenshot of the element and using image processing to measure its content and client areas.	2	f	545
2723	By reading them as attributes of the locator object, e.g., `locator.scrollWidth` or `element_handle.clientWidth`.	3	f	545
2724	By calling non-existent direct methods like `locator.scroll_width()` and `locator.client_width()`.	4	f	545
2725	Using `locator.evaluate("el =&gt; ({ sw: el.scrollWidth, cw: el.clientWidth })")` or `element_handle.evaluate(...)`.	5	t	545
2726	It bypasses Playwright's default timeout mechanisms for network responses.	1	f	546
2727	It allows waiting for a response that meets more complex criteria than just a URL match, like specific status codes or headers.	2	t	546
2728	It makes the test run faster by pre-filtering responses on the client side.	3	f	546
2729	It is the only way to wait for POST requests, as URL globbing only works for GET requests.	4	f	546
2730	It automatically parses the JSON body of the response for validation.	5	f	546
2731	Inject JavaScript to directly modify the attributes or classes of the <code>&lt;div&gt;</code> element.	1	f	547
2732	Use <code>locator.check()</code> on the <code>&lt;div&gt;</code> element, as Playwright adapts to custom controls.	2	f	547
2733	Use <code>locator.click()</code> on the <code>&lt;div&gt;</code> element that represents the custom checkbox.	3	t	547
2734	Playwright's <code>.check()</code> will automatically detect it's a custom control and handle it.	4	f	547
2735	Use <code>locator.check(force=True)</code> on the <code>&lt;div&gt;</code> to bypass its non-standard nature.	5	f	547
2736	<code>pytest --filter polls.*</code>	1	f	548
2737	<code>pytest -app polls</code>	2	f	548
2738	<code>pytest polls/</code> or <code>pytest polls/tests/</code>	3	t	548
2739	<code>pytest test_polls_models.py test_polls_views.py</code>	4	f	548
2740	<code>pytest manage.py test polls</code>	5	f	548
2741	A mechanism defined in the project's `settings.py`.	1	f	549
2742	Pytest's core discovery engine.	2	f	549
2743	The `pytest-django` plugin exclusively.	3	f	549
2744	Django's default test runner.	4	t	549
2745	Python's built-in `unittest` discovery.	5	f	549
2746	Custom QuerySet methods execute their logic in Python only, without hitting the database.	1	f	550
2747	It's the only way to override the initial QuerySet returned by a manager.	2	f	550
2748	Custom QuerySet methods are automatically applied to all models in the application.	3	f	550
2749	Custom QuerySet methods can perform database schema migrations.	4	f	550
2750	It allows for creating chainable, reusable query-building methods that can refine any QuerySet instance.	5	t	550
2751	<code>Author.objects.aggregate(num_books=Count('books_set'))</code>	1	f	551
2752	<code>Author.annotate(books_count=Count(Book))</code>	2	f	551
2753	<code>Author.objects.annotate(num_books=Count('books'))</code>	3	t	551
2754	<code>Author.objects.annotate(Count('books').as('num_books'))</code>	4	f	551
2755	<code>Author.objects.for_each_author.count_books_as('num_books')</code>	5	f	551
2756	Fetching a list of objects (1 query) and then, within a loop, accessing a related object for each item, causing N additional queries.	1	t	552
2757	The process of optimizing N separate queries into a single, more complex query.	2	f	552
2758	A database limit that only allows N+1 concurrent connections.	3	f	552
2759	Making N+1 identical queries due to lack of caching.	4	f	552
2760	A situation where N queries are made when only one query plus one additional index lookup is needed.	5	f	552
2761	When you only need to check if at least one record matches the criteria, as `exists()` can be optimized by the database (e.g., `LIMIT 1`).	1	t	553
2762	When the queryset is guaranteed to be very small.	2	f	553
2763	When you need the exact number of matching records for pagination.	3	f	553
2764	When you need to iterate over the results immediately after the check.	4	f	553
2765	`exists()` is never more efficient than `count()` due to additional Python overhead.	5	f	553
2766	Roll back the latest migration, as it's likely a schema issue.	1	f	554
2767	Check the Django server logs for `ValidationError` messages.	2	f	554
2768	Assume it's an N+1 problem and apply `select_related` or `prefetch_related` without further investigation.	3	f	554
2769	Immediately add more complex annotations to the QuerySet to gather more data.	4	f	554
2770	Print the generated SQL query using `str(my_queryset.query)` and analyze it, possibly running it directly against the database.	5	t	554
2771	The first `Book` instance found in the database.	1	f	555
2772	The total count of all books in the database as an integer.	2	f	555
2773	A `QuerySet` object representing all book records, which is lazy and doesn't hit the database until evaluated.	3	t	555
2774	`None` if no books exist in the database.	4	f	555
2775	A Python list containing all `Book` instances from the database.	5	f	555
2776	By creating a direct link field in both tables pointing to each other.	1	f	556
2777	By adding a list-type column in the `Articles` table to store tag IDs.	2	f	556
2778	Through a complex series of one-to-one relationships.	3	f	556
2779	Using an intermediary (or join) table containing foreign keys to both `Articles` and `Tags`.	4	t	556
2780	By denormalizing data and storing all tag names directly within each article row.	5	f	556
2781	It creates a proxy table that mirrors the parent model's table structure.	1	f	557
2782	It can only be inherited by one child model to maintain schema integrity.	2	f	557
2783	It creates a parent database table with an implicit OneToOneField link to child tables.	3	f	557
2784	It does not create its own database table; its fields are added directly to child model tables.	4	t	557
2785	It requires all its fields to be defined as `abstract=True` individually.	5	f	557
2786	<code>Model.DoesNotExist</code> and <code>Model.MultipleObjectsReturned</code>.	1	t	558
2787	<code>Http404</code> and <code>PermissionDenied</code>.	2	f	558
2788	<code>ValueError</code> and <code>TypeError</code>.	3	f	558
2789	<code>IntegrityError</code> and <code>OperationalError</code>.	4	f	558
2790	<code>IndexError</code> and <code>KeyError</code>.	5	f	558
2791	To define model-specific configurations like database table name, default ordering, constraints, and indexes.	1	t	559
2792	To handle data validation rules that involve multiple fields.	2	f	559
2793	To define custom manager methods for the model.	3	f	559
2794	To store metadata related to individual model instances, such as last access time.	4	f	559
2795	To specify the inheritance strategy (ABC, MTI, Proxy) for the model.	5	f	559
2796	`MyQuerySet.get_default_manager()`	1	f	560
2797	`MyQuerySet.to_manager_class()`	2	f	560
2798	`models.Manager(queryset=MyQuerySet)`	3	f	560
2799	`MyQuerySet.as_manager()`	4	t	560
2800	`models.Manager.from_queryset(MyQuerySet)`	5	f	560
2801	In `settings.py` using a `MODEL_TABLE_NAMES` dictionary.	1	f	561
2802	By setting `db_table = 'custom_name'` in the model's `Meta` class.	2	t	561
2803	By defining a `get_table_name()` method on the model.	3	f	561
2804	By passing `table_name='custom_name'` to the model's constructor.	4	f	561
2805	By setting `_table_name = 'custom_name'` as a class attribute on the model.	5	f	561
2806	To create and manage operating system level processes for the application.	1	f	562
2807	To serve as a templating engine for rendering dynamic web pages.	2	f	562
2808	To provide client-side JavaScript libraries for enhanced user interfaces.	3	f	562
2809	To directly manage web server configurations and deployments.	4	f	562
2810	To translate between Python objects and relational database structures, allowing database interaction using Python code.	5	t	562
2811	To add domain-specific query logic and encapsulate reusable query patterns.	1	t	563
2812	To automatically generate admin interfaces for the model.	2	f	563
2813	To handle signal dispatching for model save and delete events.	3	f	563
2814	To define the database schema and field types for a model.	4	f	563
2815	To manage database transactions for model operations.	5	f	563
2816	When you need to specify which fields of the related object to fetch.	1	f	564
2817	When you only need to fetch one related object and want the simplest possible SQL query.	2	f	564
2818	When you want to defer loading of the related objects until they are accessed.	3	f	564
2819	When the related objects are in a different database.	4	f	564
2820	For ManyToManyFields and reverse ForeignKey/OneToOneField relationships, where it uses separate queries to avoid large JOINs.	5	t	564
2821	There is no significant performance difference for most use cases.	1	f	565
2822	`my_queryset.count()` performs an optimized SQL `SELECT COUNT(*)` query, while `len(my_queryset)` fetches all objects into Python memory first to count them.	2	t	565
2823	`len(my_queryset)` uses a more precise counting algorithm than `my_queryset.count()`.	3	f	565
2824	`my_queryset.count()` only works if the QuerySet has been previously evaluated.	4	f	565
2825	`my_queryset.count()` caches its result, while `len(my_queryset)` always re-queries.	5	f	565
2826	To automatically index all `CharField` and `TextField` instances in a model.	1	f	566
2827	To define a vector graphic field type for storing images in the database.	2	f	566
2828	To perform mathematical vector operations on numeric fields.	3	f	566
2829	To create a document from one or more model fields that can be efficiently searched using full-text search.	4	t	566
2830	To store a list of search keywords associated with a model instance.	5	f	566
2831	The number of fields that were created or modified during the save operation.	1	f	567
2832	A boolean indicating if the `save()` method was called with `force_insert=True`.	2	f	567
2833	The timestamp when the model instance was created.	3	f	567
2834	The user who created the model instance.	4	f	567
2835	A boolean that is `True` if a new record was created in the database, and `False` if an existing record was updated.	5	t	567
2836	<code>python manage.py migrate library 0000_initial</code>	1	f	568
2837	<code>python manage.py unmigrate library all</code>	2	f	568
2838	<code>python manage.py makemigrations --revert library</code>	3	f	568
2839	<code>python manage.py migrate library zero</code>	4	t	568
2840	<code>python manage.py flush library</code>	5	f	568
2841	To create a new Django app with initial migration files.	1	f	569
2842	To roll back previously applied migrations.	2	f	569
2843	To show the SQL statements that a specific migration would execute.	3	f	569
2844	To inspect model changes within the specified app (or all apps) and generate new migration files describing these schema changes.	4	t	569
2845	To apply pending migration files to the database, altering its schema.	5	f	569
2846	Set `Article.Meta.queryset_class = ArticleQuerySet`.	1	f	570
2847	Simply define `ArticleQuerySet` in the same file as `Article`; Django auto-links them.	2	f	570
2848	Define a custom manager, override its `get_queryset()` to return `ArticleQuerySet(self.model, using=self._db)`, and assign this manager to `Article.objects`.	3	t	570
2849	Inherit `Article` from `ArticleQuerySet` instead of `models.Model`.	4	f	570
2850	Register `ArticleQuerySet` globally in `settings.py`.	5	f	570
2851	<code>article_obj.tags.create_relationship(tag1)</code>	1	f	571
2852	<code>article_obj.tags = tag1</code>	2	f	571
2853	<code>article_obj.tags.add(tag1)</code>	3	t	571
2854	<code>Tag.objects.associate(article_obj, tag1)</code>	4	f	571
2855	<code>article_obj.add_tag(tag1)</code>	5	f	571
2856	A list of SQL functions that this migration will create or use.	1	f	572
2857	A list of database tables that this migration will affect.	2	f	572
2858	A list of other migrations (from the same or other apps) that must be applied before this migration can be applied.	3	t	572
2859	A list of Python packages required for this migration to run.	4	f	572
2860	A list of Django model classes that this migration depends on.	5	f	572
2861	It specifies the attribute name to use for the reverse relation from the related model back to the model defining the field.	1	t	573
2862	It sets a human-readable name for the field used in Django admin forms.	2	f	573
2863	It defines the database column name for the foreign key.	3	f	573
2864	It determines the name of the intermediary table for `ManyToManyField`.	4	f	573
2865	It links the field to a specific database index for faster lookups.	5	f	573
2866	<code>models.IntegerField</code>	1	f	574
2867	<code>models.CharField</code>	2	t	574
2871	A default `UserProfile` instance will be created and linked to the now-deleted user slot.	1	f	575
2872	The `profile` field in the `UserProfile` instance will be set to `NULL`.	2	f	575
2873	An error will be raised preventing the deletion of the `User` if a `UserProfile` is linked.	3	f	575
2874	The `UserProfile` instance will remain, but its link to the `User` will be broken (dangling reference).	4	f	575
2875	The corresponding `UserProfile` instance, if it exists, will also be deleted.	5	t	575
2876	Reconciling the differences between object-oriented programming paradigms and relational database paradigms.	1	t	576
2877	Converting non-Unicode text data to Unicode for database storage.	2	f	576
2878	The difficulty in matching user interface widgets to database field types.	3	f	576
2879	Managing network latency between the application server and the database server.	4	f	576
2880	Ensuring compatibility between different versions of Python and Django.	5	f	576
2881	The deletion is prevented, and a `django.db.models.ProtectedError` is raised.	1	t	577
2882	The `author` field in the associated `Article`s is set to `NULL`.	2	f	577
2883	The `author` field in associated `Article`s is set to a default author.	3	f	577
2884	All associated `Article`s are deleted along with the `Author`.	4	f	577
2885	The deletion proceeds, leaving the `Article`s with a dangling foreign key.	5	f	577
2886	<code>on_delete=models.DO_NOTHING</code> and <code>null=True</code>.	1	f	578
2887	<code>on_delete=models.SET_NULL</code> and <code>blank=True</code>.	2	f	578
2888	<code>on_delete=models.SET_NULL</code> and <code>null=True</code>.	3	t	578
2889	Only <code>on_delete=models.SET_NULL</code>.	4	f	578
2890	<code>on_delete=models.CASCADE</code> and <code>null=True</code>.	5	f	578
2891	The `is_published` field will automatically become `False` after 30 days.	1	f	579
2892	The `is_published` field can only ever be `True` and cannot be changed.	2	f	579
2893	When a new instance of the model is created and no value is provided for `is_published`, it will default to `True`.	3	t	579
2894	The `is_published` field must be set by the user; `default=True` is just a hint for forms.	4	f	579
2895	The `default=True` setting only applies if the database is SQLite.	5	f	579
2896	It enforces data type constraints at the Python level before hitting the database.	1	f	580
2897	It reduces the amount of data stored in the database table by compressing common values.	2	f	580
2898	It automatically prefetches related data for indexed foreign key fields.	3	f	580
2899	It speeds up write operations (INSERT, UPDATE, DELETE) by pre-allocating space.	4	f	580
2900	It allows the database to locate rows matching query criteria (in `WHERE`, `ORDER BY`, `JOIN` clauses) more quickly, avoiding full table scans.	5	t	580
2901	Modifying previously applied migration files directly if an error is found.	1	f	581
2902	Skipping staging environment tests to speed up deployment.	2	f	581
2903	Relying solely on Django's autodetector for all schema changes.	3	f	581
2904	Performing a full database backup before applying significant migrations.	4	t	581
2905	Always using `atomic = False` for all migration operations.	5	f	581
2906	Child-specific fields are automatically available on the parent instance.	1	f	582
2907	By casting the instance, e.g., `(Restaurant)place_instance`.	2	f	582
2908	You must query the `Restaurant` model separately using `place_instance.pk`.	3	f	582
2909	By using `place_instance.get_child_fields('restaurant')`.	4	f	582
2910	By accessing the lowercase model name attribute, e.g., `place_instance.restaurant`.	5	t	582
2911	`auto_now_add=True` allows manual setting of the date, while `auto_now=True` makes it strictly read-only after the first save.	1	f	583
2912	`auto_now_add=True` sets the field to the current timestamp only when the object is first created, while `auto_now=True` updates the field to the current timestamp every time the object's `save()` method is called.	2	t	583
2913	There is no functional difference; `auto_now_add` is an alias for `auto_now`.	3	f	583
2914	`auto_now=True` sets the timestamp only on creation, while `auto_now_add=True` updates it every time the object is saved.	4	f	583
2915	Both options set the timestamp on creation, but `auto_now=True` also updates it if any other field in the model changes.	5	f	583
2916	To render data into HTML templates for display to the user.	1	f	584
2917	To define static file configurations and media handling.	2	f	584
2918	To define the structure of application data and its behavior, acting as an abstraction layer for the database.	3	t	584
2919	To manage user authentication and authorization.	4	f	584
2920	To handle HTTP requests and return HTTP responses, routing URLs to appropriate logic.	5	f	584
2921	Local, Remote, and Distributed.	1	f	585
2922	Parent-Child, Sibling-Sibling, and Friend-of-a-Friend.	2	f	585
2923	One-to-One, One-to-Many (ForeignKey), and Many-to-Many.	3	t	585
2924	Synchronous, Asynchronous, and Deferred.	4	f	585
2925	Primary-Secondary, Read-Write, and Master-Slave.	5	f	585
2926	It only supports NoSQL databases, thus avoiding SQL-specific issues.	1	f	586
2927	It allows developers to write data access code in Python, which Django then translates to SQL specific to the configured database backend, enabling easier switching of databases.	2	t	586
2928	It requires developers to write database-specific SQL for all operations, ensuring maximum control.	3	f	586
2929	It converts all database schemas to a single, proprietary format used internally by Django.	4	f	586
2930	It provides a universal database driver that works with all SQL databases without any configuration.	5	f	586
2931	<code>manager = models.ManyToManyField('self')</code>	1	f	587
2932	<code>manager = models.ForeignKey(Employee, on_delete=models.SET_NULL, null=True, blank=True)</code> (This works if Employee is already defined, but 'self' is conventional).	2	f	587
2933	<code>manager = models.OneToOneField('self', on_delete=models.SET_NULL, null=True, blank=True)</code>	3	f	587
2934	Django does not support self-referential foreign keys directly.	4	f	587
2935	<code>manager = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True)</code>	5	t	587
2936	Changes are automatically saved to the database as soon as an attribute is modified, without needing `self.save()`.	1	f	588
2937	The method MUST always call `self.save()` immediately after modifying any attribute to ensure data consistency.	2	f	588
2938	The method should return a boolean indicating if `save()` needs to be called by the caller.	3	f	588
2939	The method typically modifies the instance's state in memory but does NOT call `self.save()`; the caller is responsible for persisting changes.	4	t	588
2940	The method should use `Model.objects.update()` instead of modifying `self` attributes directly if changes need to be saved.	5	f	588
2941	`PublishedPost` must define at least one new database field.	1	f	589
2942	`PublishedPost` operates on the same database table as `Post`.	2	t	589
2943	Querying `PublishedPost.objects.all()` will always return fewer records than `Post.objects.all()`.	3	f	589
2944	`PublishedPost` automatically gets a `post_ptr` field linking to the `Post` table.	4	f	589
2945	Instances of `Post` cannot be accessed or treated as `PublishedPost` instances.	5	f	589
2946	MTI tables do not require primary keys, simplifying queries complex.	1	f	590
2947	MTI creates denormalized tables, reducing the need for JOINs.	2	f	590
2948	Querying the parent model is always faster than querying child models in MTI.	3	f	590
2949	MTI significantly increases write speeds due to table separation.	4	f	590
2950	Accessing fields from parent or child models often involves database JOIN operations, which can be costly.	5	t	590
2951	A single table named `timestampedmodel_related` is created to store timestamps for all child models.	1	f	591
2952	`created_at` and `updated_at` fields are ignored unless explicitly redefined in `Article` and `Product`.	2	f	591
2953	Tables for `Article` and `Product` are created, each containing `created_at` and `updated_at` columns; no table for `TimestampedModel` is created.	3	t	591
2954	No tables are created until a concrete instance of `TimestampedModel` is saved.	4	f	591
2955	Tables for `TimestampedModel`, `Article`, and `Product` are created, with `Article` and `Product` linking to `TimestampedModel` via ForeignKeys.	5	f	591
2956	To list all related models that might be accessed by the QuerySet.	1	f	592
2957	To automatically generate optimal indexes for the QuerySet's underlying model.	2	f	592
2958	To provide a human-readable summary of the filters and annotations applied to the QuerySet.	3	f	592
2959	To retrieve and display the database's query execution plan for the QuerySet, helping to understand how the database will fetch the data.	4	t	592
2960	To explain the Python code generated by the ORM for the QuerySet.	5	f	592
2961	It primarily enables the model to be used in Django's templating system.	1	f	593
2962	It's required only if the model uses `CharField` or `IntegerField`.	2	f	593
2963	This inheritance automatically generates HTML forms for the model.	3	f	593
2964	It's purely a convention and has no functional impact on the class's behavior.	4	f	593
2965	This inheritance provides the class with database interaction capabilities, ORM features, and integration with the Django ecosystem.	5	t	593
2966	<code>python manage.py migrate --resolve-conflicts</code>	1	f	594
2967	<code>python manage.py rebase_migrations</code>	2	f	594
2968	<code>python manage.py makemigrations --interactive</code>	3	f	594
2969	<code>python manage.py makemigrations --merge</code>	4	t	594
2970	<code>python manage.py squashmigrations --fix-conflicts</code>	5	f	594
2971	`CharField` can only store numbers, while `TextField` stores alphanumeric characters.	1	f	595
2972	`CharField` is indexed by default, while `TextField` cannot be indexed.	2	f	595
2973	`CharField` requires a `max_length` argument and is for short to medium strings, while `TextField` is for large blocks of text and doesn't require `max_length`.	3	t	595
2974	`CharField` stores text in uppercase, while `TextField` stores text in lowercase.	4	f	595
2975	`CharField` is for single-line text, `TextField` is for multi-line but has a small fixed character limit.	5	f	595
2976	`annotate()` returns a dictionary of values, while `aggregate()` adds fields to each object.	1	f	596
2977	`aggregate()` modifies the original QuerySet, while `annotate()` returns a new one.	2	f	596
2978	`aggregate()` is used for counting objects, while `annotate()` is for summing numerical fields.	3	f	596
2979	`aggregate()` returns a dictionary of values calculated over the entire QuerySet, while `annotate()` adds a calculated field to each object within the QuerySet.	4	t	596
2980	`aggregate()` can only perform one calculation, while `annotate()` can perform multiple.	5	f	596
2981	To get the historical version of the model as it existed at that point in the migration history, ensuring compatibility with the schema state.	1	t	597
2982	`apps.get_model()` provides optimized model instances that bypass signal handling during data migrations.	2	f	597
2983	It's a stylistic convention with no functional difference.	3	f	597
3042	To create a unique index that also validates data format.	2	f	609
2984	Because `models.py` might not be accessible from within a migration file due to Python path issues.	4	f	597
2985	Directly importing models can cause circular dependencies with the migration framework.	5	f	597
2986	`DecimalField` can store much larger numbers than `FloatField`.	1	f	598
2987	`DecimalField` is internally stored as a string, making it more flexible but slower.	2	f	598
2988	`DecimalField` automatically formats numbers with currency symbols, whereas `FloatField` does not.	3	f	598
2989	`DecimalField` uses fixed-precision arithmetic, avoiding the small rounding errors common with binary floating-point representation used by `FloatField`.	4	t	598
2990	`DecimalField` is optimized for storing geographical coordinates, while `FloatField` is for general numbers.	5	f	598
2991	It does not create a database table for the parent model, only for child specializations.	1	f	599
2992	Child models in MTI cannot access fields from the parent model directly.	2	f	599
2993	It is defined by setting `Meta.mti = True` on the parent model.	3	f	599
2994	It allows changing Python-level behavior without altering the database schema.	4	f	599
2995	Each model in the inheritance hierarchy gets its own database table, linked by an implicit OneToOneField.	5	t	599
2996	`null` allows empty strings in the database, while `blank` allows `None` in Python.	1	f	600
2997	Both `null` and `blank` mean the field is optional in forms, but `null` also affects database schema.	2	f	600
2998	`null` is for numeric fields, while `blank` is for text fields.	3	f	600
2999	There is no difference; `null` is an alias for `blank`.	4	f	600
3000	`null` is database-related (allows SQL `NULL`), while `blank` is validation-related (allows empty value in forms).	5	t	600
3001	If you want to prevent an index from being created on that field.	1	f	601
3002	Only when the field is a `ForeignKey` or `OneToOneField`.	2	f	601
3003	`Meta.indexes` is always preferred over `db_index=True` for all types of indexes.	3	f	601
3004	For creating a simple, single-column index where a custom name or advanced options are not immediately necessary.	4	t	601
3005	When you need to create a multi-column (composite) index.	5	f	601
3006	It's not a valid operation on a QuerySet; slicing is only for lists.	1	f	602
3007	An SQL query with `LIMIT 10 OFFSET 10` (or database-specific equivalents).	2	t	602
3008	An SQL query that retrieves the 10th and 20th objects only.	3	f	602
3009	Fetching all objects and then selecting a sub-list in Python.	4	f	602
3010	An SQL query with `WHERE id BETWEEN 10 AND 19`.	5	f	602
3011	Only by using `getattr(post_instance, 'days_archived')()`.	1	f	603
3012	The method must be defined on the `Post` model; proxy models cannot add new methods.	2	f	603
3013	On an instance retrieved via `ArchivedPost.objects.get(...)`.	3	t	603
3014	By calling `Post.objects.call_proxy_method(pk, 'days_archived')`.	4	f	603
3015	On any instance retrieved via `Post.objects.get(...)`, as it's the same underlying data.	5	f	603
3016	It's used by the ORM to generate parts of SQL queries related to string comparisons.	1	f	604
3017	It is required for the model to be usable in database migrations.	2	f	604
3018	It sets the default value for any `CharField` in the model if not otherwise specified.	3	f	604
3019	It provides a human-readable representation used extensively in the Django admin interface and for debugging.	4	t	604
3020	It defines the default serialization format (e.g., to JSON or XML) for model instances.	5	f	604
3021	To print the documentation (docstring) of the current function or method.	1	f	605
3022	To log a detailed performance trace of the subsequent code execution.	2	f	605
3023	To pause execution at that point and drop into an interactive Python debugger session in the terminal, allowing inspection of variables and step-by-step code execution.	3	t	605
3024	To temporarily disable database writes for the current request.	4	f	605
3025	To automatically format the surrounding Python code according to PEP 8 standards.	5	f	605
3026	By configuring the `django.db.backends` logger to `DEBUG` level in the `LOGGING` setting in `settings.py`.	1	t	606
3027	By setting `DEBUG_SQL = True` in `settings.py`.	2	f	606
3028	By adding a special middleware class `LogSqlMiddleware` to `MIDDLEWARE` in `settings.py`.	3	f	606
3029	By running `python manage.py shell --log-sql`.	4	f	606
3030	It's enabled by default when `DEBUG = True`.	5	f	606
3031	Never use either; optional text fields should be handled by custom validation.	1	f	607
3032	Use `null=True` but set `blank=False` to enforce database `NULL` but require form input.	2	f	607
3033	Only use `null=True`, as `blank=True` is implied for `TextField`.	3	f	607
3034	Use `blank=True` and `default=''` (or just `blank=True`), and avoid `null=True`. An empty string (`''`) represents "no data".	4	t	607
3035	Always use `null=True` and `blank=True` together.	5	f	607
3036	When the method needs to modify the state of the model instance (have side effects).	1	f	608
3037	When the computed value represents a characteristic or attribute of the object and access should feel like reading a field, and the computation is lightweight without arguments.	2	t	608
3038	When the computation is very expensive and needs to accept multiple arguments for customization.	3	f	608
3039	When the value needs to be explicitly settable using assignment (e.g., `instance.my_property = value`).	4	f	608
3040	Properties are always preferred over methods for any computation to simplify the API.	5	f	608
3041	To ensure that a combination of specified field values is unique across all rows in the table.	1	t	609
3043	To validate that a field's value is unique only within the context of a related model.	3	f	609
3044	To enforce that a specific field can only contain unique characters.	4	f	609
3045	To ensure that the model's primary key is universally unique (UUID).	5	f	609
3046	By conditionally appending the output of `static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)` to the `urlpatterns` list in the project's main `urls.py` file.	1	t	610
3047	By adding the `MEDIA_URL` path to the `STATICFILES_DIRS` list in `settings.py`.	2	f	610
3048	By running the development server with a specific flag: `python manage.py runserver --serve-media-files`.	3	f	610
3049	The development server automatically serves media files if `MEDIA_ROOT` and `MEDIA_URL` are correctly set, with no `urls.py` changes needed.	4	f	610
3050	By setting a special Django setting `SERVE_MEDIA_FILES_IN_DEBUG = True` in `settings.py`.	5	f	610
3051	Placing their project's source static files directly into the `STATIC_ROOT` directory, rather than using app-specific `static/` folders or directories listed in `STATICFILES_DIRS`.	1	t	611
3052	Setting `STATIC_ROOT` to `None` or an empty string in the production `settings.py`, preventing `collectstatic` from working.	2	f	611
3053	Setting the `STATIC_ROOT` path to be identical to the `MEDIA_ROOT` path, causing conflicts.	3	f	611
3054	Forgetting to add the `STATIC_ROOT` directory path to the `.gitignore` file, leading to collected files being committed.	4	f	611
3055	Running the `collectstatic` command after every minor CSS or JavaScript change during local development.	5	f	611
3056	<code>forms.CharInputWidget</code> (a non-existent default widget)	1	f	612
3057	<code>forms.Select</code> (renders as <code>&lt;select&gt;</code>)	2	f	612
3058	<code>forms.TextInput</code> (renders as <code>&lt;input type="text"&gt;</code>)	3	t	612
3059	<code>forms.Textarea</code> (renders as <code>&lt;textarea&gt;</code>)	4	f	612
3060	<code>forms.HiddenInput</code> (renders as <code>&lt;input type="hidden"&gt;</code>)	5	f	612
3061	To define the overall layout and styling of the form in the template.	1	f	613
3062	To manage user sessions and authentication for form submissions.	2	f	613
3063	To perform data validation, data cleaning (type conversion), and associate with a default widget.	3	t	613
3064	To directly interact with the database for storing submitted data.	4	f	613
3065	Only to render an HTML input element without any validation logic.	5	f	613
3066	Within the template files where the forms are rendered.	1	f	614
3067	In a global <code>project_forms.py</code> file at the project root.	2	f	614
3068	In a file named <code>forms.py</code> inside the application directory (e.g., <code>myapp/forms.py</code>).	3	t	614
3069	In <code>models.py</code>, as inner classes of the models they relate to.	4	f	614
3070	Directly within <code>views.py</code> alongside the views that use them.	5	f	614
3071	When you want the form to automatically generate fields based on a database table.	1	f	615
3072	Only for forms that do not require any validation.	2	f	615
3073	Whenever you need to create or update records in a database model.	3	f	615
3074	When you want to avoid writing any Python code for form definition.	4	f	615
3075	When the form collects data that does not map directly to a single database model, like a contact or search form.	5	t	615
3076	<code>django-admin uploadstatic --bucket=your-bucket-name</code>	1	f	616
3077	<code>python manage.py collectstatic --noinput</code>	2	t	616
3078	<code>gcloud storage cp --recursive ./static/* gs://your-bucket-name/static/</code>	3	f	616
3079	<code>python manage.py transferstatic --provider=gcs</code>	4	f	616
3080	<code>gsutil rsync ./static/ gs://your-bucket-name/static/</code>	5	f	616
3081	It specifies the absolute filesystem path to the directory where the `collectstatic` command gathers all static files for deployment.	1	f	617
3082	It is a comprehensive list of all CSS and JavaScript files used throughout the project, used for dependency management.	2	f	617
3083	It is a list of additional filesystem directories where Django's staticfiles app should look for static files, besides app-specific `static/` directories.	3	f	617
3084	It defines the base URL prefix from which static files will be served, and it's used by the `{% static %}` template tag to construct correct URLs.	4	t	617
3085	It defines the base URL prefix for serving user-uploaded media files.	5	f	617
3086	By calling <code>form.load_files(request.FILES)</code> after form instantiation.	1	f	618
3087	File data is accessed via <code>request.UPLOADED_DATA</code>.	2	f	618
3088	By passing <code>request.FILES</code> along with <code>request.POST</code> to the form constructor (e.g., <code>MyForm(request.POST, request.FILES)</code>).	3	t	618
3089	Uploaded files are automatically included in <code>request.POST</code> if <code>enctype</code> is correct.	4	f	618
3090	You must iterate through <code>request.headers</code> to find file information.	5	f	618
3091	It displays summary information about the formset, such as the number of valid and invalid forms.	1	f	619
3092	It is a placeholder for JavaScript code that handles dynamic addition or deletion of forms.	2	f	619
3093	It provides a user interface for administrators to configure the formset's behavior.	3	f	619
3094	It renders the submit button and other control elements for the formset.	4	f	619
3095	It renders hidden input fields that Django uses to manage the collection of forms (e.g., total forms, initial forms).	5	t	619
3096	After all individual <code>clean_&lt;fieldname&gt;()</code> methods, for validation logic involving multiple fields.	1	t	620
3097	Concurrently with individual field validation, for performance.	2	f	620
3098	To render the form's non-field errors in the template.	3	f	620
3099	Only if all individual fields are valid; otherwise, it's skipped.	4	f	620
3100	Before any individual field validation, to set up initial form state.	5	f	620
3101	It's not possible; <code>CharField</code> always renders as a single-line input.	1	f	621
3102	<code>CharField</code> automatically renders as a <code>&lt;textarea&gt;</code> if <code>max_length</code> is greater than 255.	2	f	621
3103	By setting <code>multiline=True</code> in the <code>CharField</code> constructor.	3	f	621
3104	By renaming the field to <code>forms.TextareaField</code>.	4	f	621
3105	By passing <code>widget=forms.Textarea()</code> to the <code>CharField</code> constructor.	5	t	621
3106	To get a model instance populated with form data without immediately saving it to the database, allowing for modifications.	1	t	622
3107	To bypass all model validation and force a save to the database.	2	f	622
3108	To perform a "dry run" of the save operation, checking for database errors without committing.	3	f	622
3109	To save the form's definition to a file instead of the database.	4	f	622
3110	To delete the model instance associated with the form from the database.	5	f	622
3111	These must always be explicitly set in the <code>ModelForm</code>'s <code>Meta</code> class.	1	f	623
3112	Labels and help texts are not automatically generated by <code>ModelForm</code>.	2	f	623
3113	It retrieves them from a separate localization file.	3	f	623
3114	It uses the <code>verbose_name</code> and <code>help_text</code> attributes from the corresponding model field.	4	t	623
3115	It generates them based on the field name (e.g., "user_name" becomes "User Name").	5	f	623
3116	Whenever form data needs to be saved to a database model.	1	f	624
3117	For forms not directly tied to creating or updating a single model instance, like a search form or contact form.	2	t	624
3118	For forms requiring complex custom validation logic.	3	f	624
3119	If the form needs to handle file uploads.	4	f	624
3120	When you want to use custom widgets for form fields.	5	f	624
3121	The help text associated with the field, wrapped in a <code>label</code>.	1	f	625
3122	The HTML <code>label</code> tag for the field, including the <code>for</code> attribute linked to the field's ID.	2	t	625
3123	A list of validation errors associated with the field's label.	3	f	625
3124	The HTML input widget for the field itself.	4	f	625
3125	Only the text content of the label, without any HTML tags.	5	f	625
3126	Copy and paste the validation methods into each form class.	1	f	626
3127	Use a single, very large base form class that all other forms inherit from.	2	f	626
3128	Create a reusable custom validator function or class and apply it to the relevant fields.	3	t	626
3129	Define the validation logic in a global middleware that checks all form submissions.	4	f	626
3130	Implement the validation logic entirely in client-side JavaScript.	5	f	626
3131	To provide advanced client-side validation capabilities not found in Django core.	1	f	627
3132	To automatically generate Django models from form definitions.	2	f	627
3133	To simplify rendering Django forms with CSS frameworks like Bootstrap or Tailwind CSS by reducing template boilerplate.	3	t	627
3134	To handle asynchronous form submissions and partial page updates without JavaScript.	4	f	627
3135	To replace Django's form validation system with a more flexible alternative.	5	f	627
3136	Pass all custom arguments directly to <code>super().__init__()</code>.	1	f	628
3137	Rename the custom <code>__init__</code> method to something like <code>custom_initialize()</code>.	2	f	628
3138	Avoid calling the parent's <code>__init__</code> to prevent overriding your custom logic.	3	f	628
3139	Call <code>super().__init__(*args, **kwargs)</code>, typically after popping your custom arguments from <code>kwargs</code>.	4	t	628
3140	The parent's <code>__init__</code> must be called before accessing or popping any custom arguments.	5	f	628
3141	By passing a dictionary to `ValidationError` where keys are field names and values are `ValidationError` instances or lists of them.	1	t	629
3142	The `clean()` method cannot raise field-specific errors; only non-field errors.	2	f	629
3143	By setting `error.field_name = 'my_field'` on the `ValidationError` instance.	3	f	629
3144	By raising `FieldValidationError('my_field', 'Error message')`.	4	f	629
3145	By calling `self.add_error('my_field', 'Error message')` before raising the `ValidationError`.	5	f	629
3146	To set the initial value of the widget.	1	f	630
3147	To specify validation rules that the widget should enforce.	2	f	630
3148	To add arbitrary HTML attributes (like <code>class</code> or <code>placeholder</code>) to the rendered HTML widget.	3	t	630
3149	To define Python attributes on the widget instance for server-side logic.	4	f	630
3150	To link the widget to a specific database table attribute.	5	f	630
3151	`django.contrib.staticfiles.finders.FileSystemFinder`	1	f	631
3152	`django.contrib.staticfiles.finders.ProjectRootFinder`	2	f	631
3153	`django.contrib.staticfiles.finders.DefaultStorageFinder`	3	f	631
3154	`django.contrib.staticfiles.finders.AppDirectoriesFinder`	4	t	631
3155	`django.contrib.staticfiles.finders.GlobalStaticFinder`	5	f	631
3156	The field is only a container for the widget, which performs all tasks.	1	f	632
3157	The widget handles both data validation and HTML rendering.	2	f	632
3158	Fields and widgets are synonyms for the same component in Django forms.	3	f	632
3159	Widgets are only used if a field needs to be displayed in a non-HTML format.	4	f	632
3160	The field handles data logic and validation, while the widget handles HTML rendering.	5	t	632
3161	Built-in protection against Cross-Site Request Forgery (CSRF) attacks.	1	t	633
3162	Automatic encryption of all form data in transit.	2	f	633
3163	Built-in user authentication and authorization for all forms.	3	f	633
3164	Prevention of all SQL injection attacks solely through form validation.	4	f	633
3165	Automatic detection and removal of client-side malware.	5	f	633
3166	It allows Django to serve static files directly without needing `collectstatic` to be run.	1	f	634
3167	It enables pre-compression of static files and adds content hashes to filenames for better caching.	2	t	634
3168	It stores static files in an encrypted format on the server's local disk.	3	f	634
3169	It directs `collectstatic` to upload files to a CDN instead of a local directory.	4	f	634
3170	It converts all static images to the WebP format for better compression.	5	f	634
3171	A list of permitted file extensions (e.g., `['.pdf', '.docx']`) for uploads to this field.	1	f	635
3172	The maximum allowed file size for uploads to this field, specified in megabytes.	2	f	635
3173	A subdirectory within `MEDIA_ROOT` where files uploaded to this particular field will be stored. This path can include `strftime` formatting directives or be a callable function for dynamic path generation.	3	t	635
3174	The name of the database table where metadata for the uploaded files (like filename and size) will be stored separately.	4	f	635
3175	The complete URL prefix that will be used for accessing the uploaded files for this field, overriding `MEDIA_URL`.	5	f	635
3176	<code>label</code>	1	f	636
3177	<code>database_column</code>	2	t	636
3178	<code>initial</code>	3	f	636
3179	<code>required</code>	4	f	636
3180	<code>widget</code>	5	f	636
3181	The form automatically has access to <code>request.user</code> via <code>self.request.user</code>.	1	f	637
3182	The user object must be stored in <code>self.instance</code> before <code>save()</code> is called.	2	f	637
3183	By adding a custom argument to the form's <code>__init__</code> method and passing the user from the view.	3	t	637
3184	By setting a global variable <code>CURRENT_USER</code> that the form can access.	4	f	637
3185	It's not possible to pass the user object; such fields must be set in the view after <code>form.save()</code>.	5	f	637
3186	To automatically sanitize all user input against XSS (Cross-Site Scripting) attacks.	1	f	638
3187	To ensure that state-changing requests (like POST) originate from the application's own site, not a malicious external site.	2	t	638
3188	To encrypt all sensitive form data during transmission to the server.	3	f	638
3189	To validate that all submitted form data conforms to expected data types and formats.	4	f	638
3190	To prevent users from submitting the same form multiple times in quick succession.	5	f	638
3191	It is a pattern for rendering forms using JavaScript for dynamic updates.	1	f	639
3192	It prevents duplicate form submissions if a user refreshes the page after a successful POST request.	2	t	639
3193	It allows forms to be submitted without requiring a CSRF token.	3	f	639
3194	It automatically encrypts form data during the POST request.	4	f	639
3195	It ensures that all form data is submitted using the GET method for better caching.	5	f	639
3196	By ensuring all forms across an application have an identical visual appearance.	1	f	640
3197	By automatically creating database tables based on form field definitions.	2	f	640
3198	By eliminating the need to write any HTML for forms.	3	f	640
3199	By writing form submission logic only once for the entire application.	4	f	640
3200	By automatically generating form fields and validation from model definitions, reducing code duplication.	5	t	640
3201	By passing a <code>widget_map</code> dictionary to the <code>ModelForm</code> constructor.	1	f	641
3202	By creating a method named <code>get_widget_for_fieldname()</code> in the <code>ModelForm</code>.	2	f	641
3203	Custom widgets cannot be used with auto-generated fields in a <code>ModelForm</code>.	3	f	641
3204	By defining a <code>widgets</code> dictionary in the <code>ModelForm</code>'s <code>Meta</code> class, mapping field names to widget instances.	4	t	641
3205	By setting a <code>default_widget</code> attribute on the model field itself.	5	f	641
3206	By returning `False`.	1	f	642
3207	By raising a `django.core.exceptions.ValidationError`.	2	t	642
3208	By logging an error using `logging.error()`.	3	f	642
3209	By modifying the field's value to a valid default.	4	f	642
3210	By printing an error message to the console.	5	f	642
3211	It bypasses the need to run the `collectstatic` command when deploying to production.	1	f	643
3212	It is significantly shorter to type in templates compared to writing out the full URL path.	2	f	643
3213	It makes the URLs adaptable to changes in the `STATIC_URL` setting and seamlessly integrates with advanced staticfiles storage backends that might perform cache-busting (e.g., by hashing filenames).	3	t	643
3214	It automatically compresses the linked static files (CSS, JS) before they are served to the browser.	4	f	643
3215	It is mandatory for Django's development server to find and serve static files; hardcoded URLs will result in 404 errors during development.	5	f	643
3216	Using <code>{{ form.as_ul }}</code> to render fields as an unordered list.	1	f	644
3277	To restrict access to the included URLs to users belonging to the specified namespace group.	2	f	656
3217	Manual field-by-field rendering (e.g., <code>{% for field in form %} ... {{ field.label_tag }} ... {{ field }} ... {% endfor %}</code>).	2	t	644
3218	Using <code>{{ form.as_table }}</code> to render fields in a table structure.	3	f	644
3219	Using <code>{{ form.as_p }}</code> to render fields as paragraphs.	4	f	644
3220	Using <code>{{ form.render_all_fields_with_bootstrap() }}</code> (a non-existent method).	5	f	644
3221	<code>filesupport="enabled"</code>	1	f	645
3222	<code>method="upload"</code>	2	f	645
3223	<code>content-type="application/octet-stream"</code>	3	f	645
3224	<code>enctype="multipart/form-data"</code>	4	t	645
3225	<code>data-files="true"</code>	5	f	645
3226	By iterating through <code>{{ form.all_errors }}</code>.	1	f	646
3227	By using <code>{{ form.global_errors }}</code>.	2	f	646
3228	You must manually collect them from <code>form.errors['__all__']</code> and loop.	3	f	646
3229	Non-field errors are automatically displayed at the bottom of the form by <code>{{ form.as_p }}</code>.	4	f	646
3230	By using <code>{{ form.non_field_errors }}</code>.	5	t	646
3231	<code>True</code> if rendering was successful, <code>False</code> otherwise.	1	f	647
3232	A dictionary that will be used as the context for rendering the specified snippet template.	2	t	647
3233	The modified form field object itself.	3	f	647
3234	A Django <code>Template</code> object.	4	f	647
3235	An HTML string representing the rendered output.	5	f	647
3236	This requires creating a new form class for each dynamic variation.	1	f	648
3237	By defining dynamic properties directly in the form class that automatically update based on context.	2	f	648
3238	By modifying the form fields globally in <code>settings.py</code>.	3	f	648
3239	By overriding the form's <code>__init__</code> method to accept custom arguments and modify <code>self.fields</code> or <code>self.initial</code>.	4	t	648
3240	Using special template tags that alter the form's structure before rendering.	5	f	648
3241	To allow for partial uploads and resumable downloads.	1	f	649
3242	Because <code>uploaded_file.read()</code> does not work for binary files.	2	f	649
3243	To prevent excessive memory consumption that could lead to server performance issues or crashes.	3	t	649
3244	Chunking is required by Django's file storage API for all file sizes.	4	f	649
3245	To improve client-side upload speed.	5	f	649
3246	They automatically parallelize CPU-bound tasks across multiple cores.	1	f	650
3247	They eliminate the need for an ASGI server like Uvicorn or Daphne.	2	f	650
3248	They make all third-party Django packages automatically async-compatible.	3	f	650
3249	They allow a single process/thread to handle many concurrent I/O operations efficiently by not blocking while waiting for I/O.	4	t	650
3250	They simplify database transaction management compared to synchronous views.	5	f	650
3251	It contains the first item of the list being iterated.	1	f	651
3252	It is `True` if the current iteration is the first iteration of the loop.	2	t	651
3253	It provides the 0-indexed counter for the current iteration.	3	f	651
3254	It is `True` only if the list being iterated has exactly one item.	4	f	651
3255	It signifies the start of a nested loop.	5	f	651
3256	To store the <code>request</code> object and URL-captured arguments (<code>args</code>, <code>kwargs</code>) as instance attributes.	1	t	652
3257	To call the appropriate HTTP method handler like <code>get()</code> or <code>post()</code>.	2	f	652
3258	To return an <code>HttpResponseNotAllowed</code> if an unsupported HTTP method is used.	3	f	652
3259	To initialize the template context data using <code>get_context_data()</code>.	4	f	652
3260	To perform initial authentication and permission checks for the view.	5	f	652
3261	It is only used if the <code>model</code> attribute is not set on the <code>DetailView</code>.	1	f	653
3262	It only affects the <code>object_list</code> context variable, not the primary <code>object</code>.	2	f	653
3263	It restricts the pool of objects from which <code>get_object()</code> will attempt to fetch the specific instance, effectively adding a base filter.	3	t	653
3264	It has no effect on <code>DetailView</code>; it's only relevant for <code>ListView</code>.	4	f	653
3265	It directly replaces the <code>get_object()</code> method's logic for fetching a single instance.	5	f	653
3266	They are context variables that will be exclusively available inside the cached fragment.	1	f	654
3267	They specify alternative template names to use if the primary fragment is not found.	2	f	654
3268	They are JavaScript functions that will be called after the fragment is loaded from cache.	3	f	654
3269	They define the minimum and maximum timeout values for the cache.	4	f	654
3270	They are "vary-on" parameters; the cache key will be different for different values of `var1` and `var2`, creating distinct cached versions.	5	t	654
3271	It is optional and only used if "base.html" contains static files.	1	f	655
3272	It can be placed anywhere in the template and includes the content of "base.html" at that position.	2	f	655
3273	It must be placed within a `{% block %}` tag to specify which part of "base.html" to extend.	3	f	655
3274	It must be the very first tag in the template and signifies that the current template inherits its structure from "base.html".	4	t	655
3275	It is used to define "base.html" as a child of the current template.	5	f	655
3276	To define a base template that all views within the included URLs must inherit from.	1	f	656
3278	To enable special path converters only for the URLs within that include.	3	f	656
3279	To allow unambiguous reversing of URL names (e.g., <code>'blog:post_detail'</code>) and prevent name collisions between different apps.	4	t	656
3280	To automatically apply a specific set of middleware only to the included URL patterns.	5	f	656
3281	Calling <code>self.object.get_context_data()</code>.	1	f	657
3282	Manually adding <code>{'view': self}</code> to the context.	2	f	657
3283	Calling <code>context = super().get_context_data(**kwargs)</code>.	3	t	657
3284	Fetching all data directly from <code>self.request</code>.	4	f	657
3285	Initializing an empty dictionary: <code>context = {}</code>.	5	f	657
3286	<code>template_name</code> attribute, by reassigning it within the <code>dispatch()</code> method.	1	f	658
3287	<code>get_context_data(self, **kwargs)</code>, by adding a special key like <code>_template_override</code>.	2	f	658
3288	<code>get_template_names(self)</code>, which should return a list of template names to try.	3	t	658
3289	<code>render_to_response(self, context, **response_kwargs)</code>, by changing its internal logic.	4	f	658
3290	<code>select_template()</code>, a built-in method for dynamic template selection in generic views.	5	f	658
3291	A direct link to the relevant Django documentation for the error type.	1	f	659
3292	The complete HTTP request and response headers in raw format only.	2	f	659
3293	The full traceback showing the call stack and the values of local variables at each frame.	3	t	659
3294	An automatic suggestion for fixing the code, generated by AI.	4	f	659
3295	A list of all installed Python packages and their versions.	5	f	659
3296	By configuring it in `settings.py` to automatically log all view exceptions.	1	f	660
3297	By running it from the Django shell to trace all requests to a specific view.	2	f	660
3298	It is a command used with Django's `manage.py` to trace URL routing.	3	f	660
3299	By inserting it into the view code to pause execution at that point and open an interactive Python debugger console.	4	t	660
3300	By adding it to a template to print debugging information about the context.	5	f	660
3301	To allow users to undo the deletion by visiting the success URL.	1	f	661
3302	To ensure that the deletion action is logged to a specific URL.	2	f	661
3303	It is not mandatory; `DeleteView` defaults to redirecting to the site's homepage.	3	f	661
3304	Because `DeleteView` always requires a two-step confirmation process involving redirects.	4	f	661
3305	Because after the object is deleted, it no longer exists, so its `get_absolute_url()` method cannot be called.	5	t	661
3306	Keeping template files very small, leading to an excessive number of includes.	1	f	662
3307	Using too many `{% block %}` tags in base templates, making them overly flexible.	2	f	662
3308	Relying heavily on template context processors for all dynamic data.	3	f	662
3309	Violating the DRY (Don't Repeat Yourself) principle by copy-pasting HTML instead of using `{% include %}` or `{% extends %}`.	4	t	662
3310	Placing all business logic within custom template tags for better encapsulation.	5	f	662
3311	By iterating over `{{ my_books }}`.	1	t	663
3312	The context name cannot be customized in `ListView`.	2	f	663
3313	By iterating over `{{ book_list }}` only.	3	f	663
3314	By accessing `{{ Book.objects.all }}` directly in the template.	4	f	663
3315	By iterating over `{{ object_list }}` only.	5	f	663
3316	The HTTP request method (e.g., GET, POST) not being allowed by the view.	1	f	664
3317	The `reverse()` function or `{% url %}` tag being unable to find a URL pattern matching the given name or arguments.	2	t	664
3318	An attempt to access a non-existent attribute on the `request` object.	3	f	664
3319	A database query within the view returning no results (e.g., `Model.objects.get()` failing).	4	f	664
3320	The view failing to return an `HttpResponse` object.	5	f	664
3321	<code>filter_objects(self, request)</code>	1	f	665
3322	<code>dispatch(self, request, *args, **kwargs)</code>	2	f	665
3323	<code>queryset</code> attribute directly in the class definition.	3	f	665
3324	<code>get_context_data(self, **kwargs)</code>	4	f	665
3325	<code>get_queryset(self)</code>	5	t	665
3326	`HttpResponseOk`.	1	f	666
3327	`HttpResponseRedirect`.	2	t	666
3328	`HttpResponseForbidden`.	3	f	666
3329	`JsonResponse`.	4	f	666
3330	`HttpResponseNotFound`.	5	f	666
3331	They completely eliminate the need for URL configuration in `urls.py`.	1	f	667
3332	They can only be used for views that interact with Django forms.	2	f	667
3333	They inherently provide better security features than Function-Based Views.	3	f	667
3334	They are always simpler and more explicit than Function-Based Views, regardless of complexity.	4	f	667
3335	They promote code reusability through inheritance and mixins, and integrate well with generic views.	5	t	667
3336	To define a new "super block" that can be extended by child templates.	1	f	668
3337	To completely clear or reset the content of the block defined in parent templates.	2	f	668
3338	To invoke a Python superclass method from within the template.	3	f	668
3339	To access metadata or attributes of the current block, such as its name.	4	f	668
3340	To include the content of the same block from the parent template(s) in the inheritance chain.	5	t	668
3341	You cannot compare a variable to a literal string or number.	1	f	669
3342	You cannot access nested attributes of objects (e.g., `user.profile.is_active`).	2	f	669
3343	You cannot use comparison operators like `==` or `&gt;`.	3	f	669
3344	You cannot use boolean operators like `and` or `or`.	4	f	669
3345	You cannot call methods with arguments or execute arbitrary Python code.	5	t	669
3346	The `user` object is automatically passed as the second argument after `context`.	1	f	670
3347	By directly importing `django.contrib.auth.get_user` within the tag function.	2	f	670
3348	By using `request.user` directly inside the tag function without `takes_context`.	3	f	670
3349	Simple tags cannot access the template context or the user object.	4	f	670
3350	By retrieving the `user` object from the `context` argument passed to the tag function (e.g., `user = context.get('user')`).	5	t	670
3351	`logging` statements are automatically removed from production builds, unlike `print()` statements.	1	f	671
3352	`logging` directly integrates with browser developer tools for real-time output.	2	f	671
3353	`logging` messages are always encrypted for security.	3	f	671
3354	Logging offers configurable severity levels, output destinations (files, console, etc.), and structured formatting, making it suitable for both development and production.	4	t	671
3355	`logging` can pause code execution like a debugger, whereas `print()` cannot.	5	f	671
3356	When implementing Django's generic views like `ListView` or `DetailView`.	1	f	672
3357	When extensive use of inheritance and mixins is required for code reusability.	2	f	672
3358	For simple views with straightforward logic or when learning Django, due to their explicitness.	3	t	672
3359	For complex views that require handling multiple HTTP methods with distinct logic for each.	4	f	672
3360	When advanced state management within the view instance is necessary.	5	f	672
3361	Django will not be able to serve static files correctly for those pages.	1	f	673
3362	The links will break if the URL patterns in `urls.py` are changed, making the site difficult to maintain.	2	t	673
3363	It can lead to Cross-Site Scripting (XSS) vulnerabilities.	3	f	673
3364	It prevents the use of template inheritance for those pages.	4	f	673
3365	It significantly slows down template rendering performance due to string parsing.	5	f	673
3366	To return a custom-filtered or ordered `QuerySet` of objects that the view will display.	1	t	674
3367	To add additional variables to the template context.	2	f	674
3368	To change the HTTP method allowed for accessing the list (e.g., from GET to POST).	3	f	674
3369	To specify the HTML template to be used for rendering the list.	4	f	674
3370	To define how pagination should be handled for the list.	5	f	674
3371	It can keep the CBV class definition cleaner and allows applying different decorators to the same CBV used in multiple URL patterns.	1	t	675
3372	It offers better performance due to earlier application in the request lifecycle.	2	f	675
3373	It allows the decorator to access <code>self</code> (the view instance) directly.	3	f	675
3374	It is the only way to apply decorators that take arguments.	4	f	675
3375	It is required for decorators that modify the HTTP response headers.	5	f	675
3376	To perform complex business logic and database queries.	1	f	676
3377	To modify the display or formatting of variables before they are rendered.	2	t	676
3378	To define new variables within the template context.	3	f	676
3379	To include other template files or snippets.	4	f	676
3380	To control the flow of template rendering, like loops or conditionals.	5	f	676
3381	Each individual HTTP method handler (<code>get</code>, <code>post</code>, etc.) must be decorated separately.	1	f	677
3382	The <code>dispatch()</code> method.	2	t	677
3383	The <code>setup()</code> method.	3	f	677
3384	The <code>as_view()</code> class method.	4	f	677
3385	The <code>get()</code> method only.	5	f	677
3386	It allows the ORM call to access the main event loop directly.	1	f	678
3387	It is only required if the database connection itself is asynchronous.	2	f	678
3388	It makes the ORM call execute faster by prioritizing its thread.	3	f	678
3389	It ensures the synchronous function runs in a thread context that is safe for Django ORM operations, which may rely on thread-local data.	4	t	678
3390	It automatically converts the synchronous ORM call into a native async call.	5	f	678
3391	`dispatch(request, *args, **kwargs)`	1	f	679
3392	`get_object()`	2	f	679
3393	`get_context_data(**kwargs)`	3	t	679
3394	`render_to_response(context, **response_kwargs)`	4	f	679
3395	`get_template_names()`	5	f	679
3396	To directly handle the HTTP request and return an HttpResponse.	1	f	680
3397	To return a callable function that instantiates the view and calls its <code>dispatch()</code> method.	2	t	680
3398	To configure the view's attributes from URL patterns before instantiation.	3	f	680
3399	To render the template associated with the view using context data.	4	f	680
3400	To automatically determine the correct HTTP method handler (e.g., get(), post()) to call.	5	f	680
3401	It must be placed after more specific URL patterns to ensure they are matched first; otherwise, the catch-all might incorrectly handle their requests.	1	t	681
3402	It should be placed within an application's <code>urls.py</code>, not the project's root <code>urls.py</code>.	2	f	681
3403	Its position does not matter if it uses <code>re_path()</code> instead of <code>path()</code>.	3	f	681
3404	The order is only important if <code>DEBUG=True</code>; in production, Django optimizes URL matching.	4	f	681
3405	It must be placed at the beginning of <code>urlpatterns</code> to have the highest priority for all incoming requests.	5	f	681
3406	`object_id_param`.	1	f	682
3407	`lookup_field`.	2	f	682
3408	`url_pk_field`.	3	f	682
3409	`pk_url_kwarg` (which defaults to 'pk').	4	t	682
3410	`detail_key_name`.	5	f	682
3411	It must accept a context dictionary and return a modified context dictionary.	1	f	683
3412	It must accept an `HttpRequest` object and return a dictionary.	2	t	683
3413	It must accept an `HttpRequest` object and return `None`.	3	f	683
3414	It must accept no arguments and return a string of HTML.	4	f	683
3415	It must accept a template name and return a compiled template object.	5	f	683
3416	The view executes normally, ignoring the GET request method.	1	f	684
3417	A `ValueError` is raised within the view.	2	f	684
3418	Django raises a `PermissionDenied` exception.	3	f	684
3419	Django returns an `HttpResponseNotAllowed` (HTTP status code 405).	4	t	684
3420	The user is redirected to the login page.	5	f	684
3421	To perform custom actions after the form has been successfully validated, such as setting instance attributes before saving or triggering side effects.	1	t	685
3422	To specify the template that should be used to render the form.	2	f	685
3423	To define which fields from the model should be included in the form.	3	f	685
3424	To add extra validation rules that are not defined in the form class.	4	f	685
3425	To change the HTTP method allowed for form submission (e.g., from POST to PUT).	5	f	685
3426	To combine POST, Redirect, and GET logic into a single view function.	1	f	686
3427	To automatically encrypt all data submitted via POST requests.	2	f	686
3428	To prevent duplicate form submissions if a user refreshes the page after a successful POST request.	3	t	686
3429	To enforce that all GET requests return JSON data.	4	f	686
3430	To ensure all POST requests are handled asynchronously by the server.	5	f	686
3431	It can only return JSON responses.	1	f	687
3432	It is primarily used for defining database models and their fields.	2	f	687
3433	It is a Python class that inherits from `django.views.View` and uses methods like `get()` and `post()`.	3	f	687
3434	It is a Python function that accepts an `HttpRequest` object as its first parameter and returns an `HttpResponse` object.	4	t	687
3435	It automatically handles user authentication and session management without any explicit configuration.	5	f	687
3436	Using `product_name /`.	1	f	688
3437	Using `{% product_name %}`.	2	f	688
3438	Using `$(product_name)`.	3	f	688
3439	Using `context.get('product_name')`.	4	f	688
3440	Using `{{ product_name }}`.	5	t	688
3441	By using `{{ block.super }}` within the overridden block in the child template.	1	t	689
3442	By redefining the block with a different name in the child template.	2	f	689
3443	By using filter `|append_parent_block` on the block definition.	3	f	689
3444	By using the `{% include %}` tag with the parent block's name.	4	f	689
3445	This is not possible; child template blocks always completely replace parent blocks.	5	f	689
3446	A JavaScript error will be thrown, because `x-text` expects only plain, unescaped text.	1	f	690
3447	The word "Important" rendered in italics.	2	f	690
3448	The text content "myVar", as it displays the property name itself.	3	f	690
3449	The literal string `emImportant/em`.	4	t	690
3450	An empty div, because `x-text` cannot render any HTML tags, even as literal text.	5	f	690
3451	It creates a persistent data channel that bypasses the DOM.	1	f	691
3452	It allows components to communicate in a decoupled manner by sending and listening for custom browser events.	2	t	691
3453	It provides direct synchronous method calls between any two components on the page.	3	f	691
3454	It automatically shares <code>x-data</code> properties between sibling components.	4	f	691
3455	It forces all components to re-render when an event is dispatched.	5	f	691
3456	Defining the primary reactive state object of the component, similar to how `x-data` works.	1	f	692
3457	Conditionally showing or hiding an element based on a boolean expression (like `x-show`).	2	f	692
3458	Continuously watching for changes in a specific data property and executing code in response (like `$watch`).	3	f	692
3459	Binding an HTML attribute's value dynamically to a data property (like `x-bind`).	4	f	692
3460	Setting initial property values that require some computation or calling a setup method defined in `x-data`.	5	t	692
3461	Ensuring all menu items have a unique <code>accesskey</code> attribute.	1	f	693
3462	Disabling keyboard navigation to prevent conflicts with mouse interactions.	2	f	693
3463	Making the entire dropdown a single focusable element with <code>tabindex="0"</code>.	3	f	693
3464	Implementing event listeners (<code>x-on:keydown</code>) to handle keys like Escape, ArrowUp, ArrowDown, and managing focus appropriately.	4	t	693
3465	Relying solely on the browser's default Tab key navigation.	5	f	693
3466	Inside an event listener for <code>alpine:init</code>, ensuring it's defined after Alpine loads but before components initialize.	1	t	694
3467	Within an <code>x-init</code> directive of the <code>body</code> tag.	2	f	694
3468	Directly in <code>x-data</code> of the first component that needs the store.	3	f	694
3469	In a separate JavaScript file that is loaded before the main Alpine.js library.	4	f	694
3470	After all Alpine components on the page have fully initialized and rendered.	5	f	694
3471	`x-bind:disabled="!feedbackText.trim()"`	1	t	695
3472	`x-bind:disabled="feedbackText.isEmpty()"`	2	f	695
3473	`x-bind:disabled="feedbackText.length  1"`	3	f	695
3474	`x-bind:disabled="!feedbackText"`	4	f	695
3475	`x-bind:disabled="feedbackText === ''"`	5	f	695
3476	To define the global state accessible by multiple components.	1	f	696
3477	To iterate over a collection and render HTML elements.	2	f	696
3478	To directly manipulate DOM element properties like <code>offsetWidth</code>.	3	f	696
3479	To manage data flow between nested Alpine components.	4	f	696
3480	To apply CSS transitions or animations when elements are inserted into or removed from the DOM, typically with <code>x-show</code> or <code>x-if</code>.	5	t	696
3481	The store's properties are automatically available in the global scope like <code>cart.propertyName</code>.	1	f	697
3482	Using <code>x-data="{ cartData: Alpine.stores.cart }"</code> and then <code>cartData.propertyName</code>.	2	f	697
3483	Through <code>$refs.cart.propertyName</code>.	3	f	697
3484	Using the <code>$store</code> magic property, like <code>$store.cart.propertyName</code> or <code>$store.cart.methodName()</code>.	4	t	697
3485	By directly calling <code>Alpine.getStore('cart').propertyName</code>.	5	f	697
3486	The <code>value</code> attribute of the last checkbox that was checked.	1	f	698
3487	A boolean value indicating if any checkbox is checked.	2	f	698
3488	An object where keys are checkbox values and values are booleans.	3	f	698
3489	An array containing the <code>value</code> attributes of the currently checked checkboxes.	4	t	698
3490	A comma-separated string of the selected checkbox values.	5	f	698
3491	To link the modal's state with a global <code>Alpine.store</code> property.	1	f	699
3492	To send the modal's content to the server for pre-rendering.	2	f	699
3493	To automatically style the modal based on the browser's viewport size.	3	f	699
3494	To move a block of HTML (defined elsewhere, e.g., in a <code>template</code> tag) into the modal's structure in the DOM.	4	t	699
3495	To create a secure, isolated JavaScript environment for the modal's logic.	5	f	699
3496	<code>x-transition:enter</code> for the "from" state, and <code>x-transition:leave</code> for the "to" state.	1	f	700
3497	<code>x-transition:enter-from</code> for the "from" state, and <code>x-transition:enter-to</code> for the "to" state.	2	f	700
3498	Only <code>x-transition:enter</code> is used, and the browser infers the states.	3	f	700
3499	<code>x-transition:start</code> for the "from" state, and <code>x-transition:end</code> for the "to" state.	4	f	700
3500	<code>x-transition:enter-start</code> for the "from" state, and <code>x-transition:enter-end</code> for the "to" state.	5	t	700
3501	To apply CSS transitions when an element is shown or hidden.	1	f	701
3502	To iterate over an array and render a list of HTML elements.	2	f	701
3503	To conditionally render an HTML element based on a boolean expression.	3	f	701
3504	To establish two-way data binding between a UI input element and a component's state property.	4	t	701
3505	To execute a JavaScript function when a component is initialized.	5	f	701
3506	You declare the desired state and behavior in your HTML markup, and Alpine.js handles the underlying DOM manipulations.	1	t	702
3507	All JavaScript logic must be declared globally and then explicitly linked to HTML elements.	2	f	702
3508	You write detailed, step-by-step imperative instructions for every DOM change your component needs.	3	f	702
3509	You must declare all variables with their types before use, similar to statically-typed languages.	4	f	702
3510	It means using only HTML and CSS, with JavaScript automatically generated by Alpine.js.	5	f	702
3511	To define a computed property based on other data properties.	1	f	703
3512	As a directive on an HTML element to directly bind its visibility to a data property.	2	f	703
3513	To pause the execution of all reactive effects in a component.	3	f	703
3514	Within <code>x-init</code> to set up a callback function that executes when a specific data property changes, providing new and old values.	4	t	703
3515	To get the current value of a data property without triggering reactivity.	5	f	703
3516	It updates the model only when the input field loses focus, similar to <code>.lazy</code>.	1	f	704
3517	It triggers an immediate update on every keystroke for faster responsiveness.	2	f	704
3518	It encrypts the data before binding it to the model.	3	f	704
3519	It waits for a specified duration of inactivity (e.g., 500ms) before updating the model, useful for inputs like live search.	4	t	704
3520	It forces the input value to be a number.	5	f	704
3521	Using <code>x-for="i from 1 to 5"</code>.	1	f	705
3522	By providing an integer to <code>x-for</code>, like <code>template x-for="i in 5"</code>.	2	t	705
3523	By creating an array <code>[1,2,3,4,5]</code> in <code>x-data</code> and iterating over it.	3	f	705
3524	By using <code>x-repeat="5"</code> instead of <code>x-for</code>.	4	f	705
3525	The <code>x-for</code> directive cannot iterate over a fixed number, only arrays.	5	f	705
3526	`bind:click`	1	f	706
3527	`on:click`	2	f	706
3528	`(click)`	3	f	706
3529	`@click`	4	t	706
3530	`x-click`	5	f	706
3531	All dispatched events are automatically caught by all components by default.	1	f	707
3532	By using the <code>.window</code> modifier on the listener, e.g., <code>@my-event.window="handler()"</code>.	2	t	707
3533	By using <code>$listen('myEvent', handler)</code> in the listener's <code>x-data</code>.	3	f	707
3534	By setting <code>Alpine.config.globalEvents = true</code>.	4	f	707
3535	The listening component must be a direct parent or child of the dispatching component.	5	f	707
3536	The data model updates only after a delay specified in milliseconds.	1	f	708
3537	The data model updates are performed asynchronously in a separate thread.	2	f	708
3538	The input value is automatically cast to a number.	3	f	708
3539	The data model updates on the <code>change</code> event (e.g., when the input loses focus) instead of the <code>input</code> event.	4	t	708
3540	The input's initial value is not set from the data model.	5	f	708
3541	<code>body.alpine-loading [x-cloak] { display: none; }</code>	1	f	709
3542	<code>.x-cloak-active { visibility: hidden; }</code>	2	f	709
3543	<code>x-cloak { opacity: 0; transition: opacity 0.5s; }</code>	3	f	709
3544	<code>[x-cloak="true"] { position: absolute; left: -9999px; }</code>	4	f	709
3545	<code>[x-cloak] { display: none !important; }</code>	5	t	709
3546	A mechanism to retrieve data previously submitted by an HTMX form.	1	f	710
3547	An interface for interacting with browser <code>localStorage</code> or <code>sessionStorage</code> directly.	2	f	710
3548	A special reference to the component's parent store if nested.	3	f	710
3549	A way to store component instance data locally, separate from <code>x-data</code>.	4	f	710
3550	Access to global, reactive data stores defined via <code>Alpine.store()</code>, allowing state sharing across multiple components.	5	t	710
3551	To schedule a function to run after a specified delay.	1	f	711
3552	To send an AJAX request to the server.	2	f	711
3553	To update a global variable outside of Alpine's reactivity system.	3	f	711
3554	To directly call a method on a parent Alpine component.	4	f	711
3555	To dispatch a custom browser event that can be listened for by other components or JavaScript.	5	t	711
3556	It will cause an error because <code>x-ref</code> names must be unique within a component.	1	f	712
3557	Each element gets a unique ref like <code>itemElement_0</code>, <code>itemElement_1</code>, etc.	2	f	712
3558	Only the first element in the loop will be referenced by <code>this.$refs.itemElement</code>.	3	f	712
3559	<code>this.$refs.itemElement</code> will reference the <code>template</code> tag used by <code>x-for</code>.	4	f	712
3560	<code>this.$refs.itemElement</code> will become an array of DOM elements, one for each item in the loop.	5	t	712
3561	The child's property "shadows" the parent's property; the child will use its own <code>name</code> value.	1	t	713
3562	An error is thrown because data property names must be unique across nested scopes.	2	f	713
3563	Both properties are merged into an array.	3	f	713
3564	The parent's property value overrides the child's property value.	4	f	713
3565	Alpine.js automatically renames the child's property to avoid conflict (e.g., <code>childName</code>).	5	f	713
3566	To encrypt sensitive data within an Alpine component.	1	f	714
3567	To delay the execution of <code>x-init</code> directives until all images on the page have loaded.	2	f	714
3568	To make Alpine components invisible to web crawlers for SEO purposes.	3	f	714
3569	To apply a special "cloaking" animation effect to elements.	4	f	714
3570	To hide elements until Alpine.js has finished initializing them, preventing a "flash of uninitialized content."	5	t	714
3571	It's designed as a full replacement for backend frameworks like Django.	1	f	715
3572	It requires a complex build process and extensive configuration before use.	2	f	715
3573	It primarily focuses on server-side rendering and managing state on the server.	3	f	715
3574	It's a rugged, minimal tool for composing JavaScript behavior directly in HTML markup.	4	t	715
3575	It's a comprehensive framework requiring a virtual DOM for all UI operations.	5	f	715
3576	To establish two-way data binding for form inputs.	1	f	716
3577	To iterate over an array or a range of numbers and render a block of HTML for each item.	2	t	716
3578	To conditionally show or hide an HTML element based on a boolean expression.	3	f	716
3579	To apply CSS transitions to elements entering or leaving the DOM.	4	f	716
3580	To define the initial reactive state of an Alpine component.	5	f	716
3581	By requiring developers to write all their JavaScript in WebAssembly for maximum efficiency.	1	f	717
3582	By offloading most of its processing tasks to a dedicated server-side component.	2	f	717
3583	By enforcing a strict server-side rendering model for all its components.	3	f	717
3584	By using an extensive library of pre-compiled JavaScript modules downloaded on demand.	4	f	717
3585	By focusing on a specific set of common UI interactions and leveraging native browser capabilities, without using a virtual DOM.	5	t	717
3586	It provides a detailed performance profile specifically for Alpine.js rendering bottlenecks and component updates.	1	f	718
3587	It is the only tool that allows setting breakpoints within JavaScript methods defined in an Alpine.js component's `x-data`.	2	f	718
3588	It allows direct inspection and often live modification of an Alpine component's reactive `x-data` state in a dedicated panel.	3	t	718
3589	It completely replaces the need for using `console.log()` statements for any debugging tasks in Alpine.js.	4	f	718
3590	It automatically identifies and corrects common syntax errors in Alpine.js directives within your HTML.	5	f	718
3591	The native browser event object is not directly accessible within `x-on` expressions; only its properties can be accessed.	1	f	719
3592	Using `this.event` from within the component's `x-data` scope, which Alpine populates.	2	f	719
3593	Using the special `$event` magic property provided by Alpine.js.	3	t	719
3594	By passing the keyword `event` as an argument to the JavaScript expression, like `myFunction(event)`.	4	f	719
3595	The event object is automatically available as a global JavaScript variable named `alpineEvent`.	5	f	719
3596	The value is cleared because `x-show` re-initializes all child elements when toggling visibility.	1	f	720
3597	An error occurs, as `x-show` cannot be used on elements that contain form input fields.	2	f	720
3598	The value is preserved because the element and its children (including the input field) remain in the DOM.	3	t	720
3599	The value is preserved only if the `x-persist` plugin is also installed and used on the input field.	4	f	720
3600	The value is automatically sent to the server via an AJAX request and then re-fetched when the element is reshown.	5	f	720
3601	To execute a JavaScript function when an element is clicked or another event occurs an element (like `x-on`).	1	f	721
3602	To create a two-way data binding specifically between a form input element and a state property (like `x-model`).	2	f	721
3603	To dynamically set the value of an HTML attribute based on a JavaScript expression evaluated within the component's state.	3	t	721
3604	To iterate over an array or object from the component's state and render a list of HTML elements (like `x-for`).	4	f	721
3605	To define the initial reactive state for an Alpine.js component (like `x-data`).	5	f	721
3606	To create a two-way data binding with a form input.	1	f	722
3607	To define a reactive data property within an Alpine component.	2	f	722
3608	To conditionally render an element based on a boolean expression.	3	f	722
3609	To obtain a direct reference to a DOM element, making it accessible via the <code>$refs</code> magic property for imperative manipulation.	4	t	722
3610	To specify the target URL for an HTMX AJAX request.	5	f	722
3611	ARIA attributes are only set once in the static HTML and cannot be changed by Alpine.js.	1	f	723
3612	ARIA attributes are automatically inferred by Alpine.js based on the directives used (e.g., <code>x-show</code> implies <code>aria-hidden</code>).	2	f	723
3613	By using special <code>x-aria-*</code> directives provided by an Alpine accessibility plugin.	3	f	723
3614	By dynamically binding ARIA attributes (e.g., <code>aria-expanded</code>, <code>aria-hidden</code>) to the component's state using <code>x-bind:</code>.	4	t	723
3615	A separate JavaScript library must be used to manage ARIA attributes alongside Alpine.js.	5	f	723
3616	The child component inherently has access due to JavaScript's lexical scoping; it can directly use the parent's data properties if not shadowed.	1	t	724
3617	The child must dispatch an event that the parent listens to, and the parent sends data back in response.	2	f	724
3618	The child component must use <code>this.$parent.propertyName</code> to access parent data.	3	f	724
3619	The parent component must explicitly pass data to the child using <code>x-props</code> attributes.	4	f	724
3620	Data can only be shared through global <code>$store</code> objects, not directly between nested components.	5	f	724
3621	It ensures that the modal's content is always rendered in the DOM, even if it's hidden by an `x-show` directive.	1	f	725
3622	It traps all mouse events within the modal's boundaries, preventing them from reaching any elements behind the modal overlay.	2	f	725
3623	It creates a sandboxed copy of the modal content within an inert iframe to enhance security.	3	f	725
3624	It is primarily used to animate the modal's appearance and disappearance with smooth transitions.	4	f	725
3625	It helps keep keyboard focus contained within the modal when it's active and makes elements outside the modal non-interactive for assistive technologies.	5	t	725
3626	Using an <code>activeTab</code> property in <code>x-data</code> to store the ID of the active tab, and <code>x-show</code> or <code>x-if</code> to display the corresponding panel.	1	t	726
3627	Using <code>Alpine.setActiveTab('tabId')</code> global function.	2	f	726
3628	HTMX is required to switch between tabs by fetching content from the server for each tab change.	3	f	726
3629	Relying on CSS <code>:target</code> pseudo-class and URL fragments.	4	f	726
3630	Each tab panel having its own <code>x-data</code> with an <code>isActive</code> boolean.	5	f	726
3631	Relying solely on HTML5's <code>pattern</code> attribute for both fields.	1	f	727
3632	Performing the check only when the submit button is clicked, using an <code>x-on:click</code> handler.	2	f	727
3633	Each field having its own independent validation that doesn't consider the other.	3	f	727
3634	Using <code>$watch</code> on both password properties in <code>x-init</code> to trigger a validation function that compares them.	4	t	727
3635	Using an HTMX request to the server to validate the match after each keystroke.	5	f	727
3636	No animation; it only enables the transition mechanism.	1	f	728
3637	A default fade and slight scale effect.	2	t	728
3638	Only a slide-in effect from the left.	3	f	728
3639	A background color change animation.	4	f	728
3640	A rotation effect.	5	f	728
3641	It replaces the need for server-side validation in Django, making the backend simpler.	1	f	729
3642	It guarantees that no invalid data will ever reach the server.	2	f	729
3643	It provides immediate feedback to users, improving user experience and guiding them to correct errors proactively.	3	t	729
3644	It allows forms to be submitted offline and synchronized later.	4	f	729
3645	It automatically sanitizes all user input against XSS attacks.	5	f	729
3646	Cloud Run does not support WebSockets or SSE under any circumstances.	1	f	730
3647	Polling is significantly more secure as it encrypts data multiple times per update cycle.	2	f	730
3648	Polling uses standard HTTP requests, aligning well with Cloud Run's stateless, request-response model and avoiding complexities of long-lived connections.	3	t	730
3649	HTMX polling automatically establishes persistent connections to Cloud Run instances.	4	f	730
3650	Polling provides lower latency and less server load compared to WebSockets or SSE on any platform.	5	f	730
3651	It directly executes JavaScript from Alpine.js components within the Python test environment.	1	f	731
3652	It captures and analyzes network requests made by Alpine.js components.	2	f	731
3653	It generates static HTML snapshots of Alpine components for comparison.	3	f	731
3654	It provides mock objects for Alpine.js components, so no browser is needed.	4	f	731
3655	It starts a live Django development server in a separate thread, allowing the E2E testing tool to interact with the application as a user would.	5	t	731
3656	To indicate that the current step should wait for user input before continuing.	1	f	732
3657	To specify that the current step should only begin after one or more other specified steps (by their `id`) have completed.	2	t	732
3658	To pause the current step for a specified duration before proceeding.	3	f	732
3659	To define the maximum execution time allowed for the current step.	4	f	732
3660	To make the current step wait until a specific external GCP service becomes available.	5	f	732
3661	Principal: Cloud Run Service Account, Role: <code>Storage Object Creator</code> (<code>roles/storage.objectCreator</code>).	1	f	733
3662	Principal: <code>allUsers</code>, Role: <code>Storage Object Viewer</code> (<code>roles/storage.objectViewer</code>).	2	t	733
3663	Principal: <code>allUsers</code>, Role: <code>Storage HMAC Key Admin</code> (<code>roles/storage.hmacKeyAdmin</code>).	3	f	733
3664	Principal: <code>allAuthenticatedUsers</code>, Role: <code>Storage Admin</code> (<code>roles/storage.admin</code>).	4	f	733
3665	Principal: Project Owner, Role: <code>Storage Object Viewer</code> (<code>roles/storage.objectViewer</code>).	5	f	733
3666	By asserting that the response content type is <code>application/htmx-partial+html</code>.	1	f	734
3667	By using a JavaScript testing framework like Jest to execute HTMX calls directly within the Django test environment.	2	f	734
3668	By checking if <code>response.context['is_htmx']</code> is True, as Django automatically sets this for all partial views.	3	f	734
3669	By including the <code>HTTP_HX_REQUEST='true'</code> header in your test client's GET or POST request to simulate an HTMX request, then asserting the correct partial template is used and the response is a fragment.	4	t	734
3670	Django's test client cannot simulate HTMX requests; End-to-End tests are the only option.	5	f	734
3671	It embeds the Cloud SQL database directly within the Cloud Run container.	1	f	735
3672	It sets up a secure connection (Cloud SQL Auth Proxy) allowing the Cloud Run service to connect to the specified Cloud SQL instance(s).	2	t	735
3673	It lists the Cloud SQL instances that the Cloud Run service is allowed to monitor.	3	f	735
3674	It creates new Cloud SQL instances specifically for this Cloud Run service.	4	f	735
3675	It grants the Cloud Run service's identity admin privileges on the specified Cloud SQL instance(s).	5	f	735
3676	It enforces that all database connections must use SSL/TLS encryption.	1	f	736
3677	It enables users and service accounts to authenticate to the database using their Google Cloud IAM credentials instead of passwords.	2	t	736
3678	It allows the Cloud SQL instance to assume IAM roles to access other GCP services.	3	f	736
3679	It automatically creates a database user for each IAM principal in the GCP project.	4	f	736
3680	It links the Cloud SQL instance's logs directly to the project's IAM audit logs.	5	f	736
3681	The number of custom domains mapped to the service.	1	f	737
3682	The amount of time spent writing the <code>Dockerfile</code>.	2	f	737
3683	A fixed monthly fee per deployed Cloud Run service, regardless of traffic.	3	f	737
3684	vCPU-seconds and memory-seconds consumed during request processing.	4	t	737
3685	The number of Docker images stored in Artifact Registry.	5	f	737
3686	To allow the Cloud SQL instance to use the same service account as the Cloud Run service.	1	f	738
3687	To ensure that database backups are stored in a different geographical location for disaster recovery.	2	f	738
3688	It is a strict requirement for enabling IAM database authentication.	3	f	738
3689	Because Cloud SQL instances can only connect to Cloud Run services within the same project, regardless of region.	4	f	738
3690	To minimize latency between the application and the database and potentially reduce data transfer costs.	5	t	738
3691	Artifact Registry	1	f	739
3692	Cloud Run	2	f	739
3693	Cloud Functions	3	f	739
3694	Cloud Build	4	t	739
3695	Cloud SQL	5	f	739
3696	<code>save(validate=True)</code>	1	f	740
3697	<code>full_clean()</code>	2	t	740
3698	<code>validate_fields()</code>	3	f	740
3699	<code>check_constraints()</code>	4	f	740
3700	<code>is_valid()</code>	5	f	740
3701	Exclusively for running Google Kubernetes Engine (GKE) clusters.	1	f	741
3702	Storing source code and version history, similar to Git.	2	f	741
3703	Providing a local development environment for Django applications.	3	f	741
3704	Defining the network topology for inter-service communication globally.	4	f	741
3705	Organizing resources, managing billing, and applying IAM policies for a specific application or initiative.	5	t	741
3706	They must be globally unique across all of Google Cloud.	1	t	742
3707	They are case-sensitive and can contain special characters.	2	f	742
3708	They must match the Project ID they belong to.	3	f	742
3709	They are only unique within a specific GCP region.	4	f	742
3710	They can be changed after the bucket is created.	5	f	742
3711	<code>ROOT_URLCONF</code>	1	f	743
3712	<code>STATIC_URL</code>	2	f	743
3713	<code>SECURE_SSL_REDIRECT</code>	3	f	743
3714	<code>ALLOWED_HOSTS</code>	4	f	743
3715	<code>DEBUG</code>	5	t	743
3716	Predefined Roles offer more granular permissions, better aligning with the Principle of Least Privilege.	1	t	744
3717	Predefined Roles can only be assigned to user accounts, not service accounts.	2	f	744
3718	Predefined Roles are deprecated and will be removed in future GCP versions.	3	f	744
3719	Primitive Roles allow access to all GCP services, which is necessary for most applications.	4	f	744
3720	Primitive Roles are more secure because they are simpler to understand and manage.	5	f	744
3721	To limit the potential damage if the application is compromised, as the attacker would gain only the non-root user's restricted permissions.	1	t	745
3722	Because root users are not allowed to access network resources from within a Docker container.	2	f	745
3723	To allow the container to be managed by orchestration platforms like Kubernetes.	3	f	745
3724	To enable better logging capabilities, as non-root users have more detailed log access.	4	f	745
3725	Because non-root users consume fewer system resources like CPU and memory.	5	f	745
3726	The total number of Cloud Run services allowed in a project.	1	f	746
3727	The maximum number of concurrent requests that a single container instance can handle.	2	t	746
3728	The number of concurrent database connections an instance can make.	3	f	746
3729	The speed at which new container instances are started during scale-up events.	4	f	746
3730	The number of CPU cores allocated to each container instance.	5	f	746
3731	By configuring Django settings to automatically discover secrets based on their names.	1	f	747
3732	By embedding the secret directly in the <code>DATABASE_URL</code> environment variable in the Cloud Run service definition.	2	f	747
3733	By having the Django application make direct API calls to Secret Manager using a hardcoded API key.	3	f	747
3734	Using the <code>--update-secrets=DB_PASSWORD=secret_name:latest</code> flag in <code>gcloud run deploy</code>.	4	t	747
3735	By mounting the Secret Manager vault as a volume in the Cloud Run container.	5	f	747
3736	To allow the Docker image to run on multiple CPU architectures without modification.	1	f	748
3737	To automatically version the Docker image based on Git tags.	2	f	748
3738	To create smaller final runtime images by separating build-time dependencies from runtime dependencies.	3	t	748
3739	To enable live reloading of the Django application during development within the container.	4	f	748
3740	To build multiple Django applications within a single Docker image.	5	f	748
3741	To restrict Gunicorn to only accept connections originating from `localhost` within the container for security.	1	f	749
3742	To enable Gunicorn's automatic discovery of other Gunicorn instances for clustering.	2	f	749
3743	To allow Gunicorn to accept connections from outside the container's local network interface, enabling Cloud Run to route traffic to it.	3	t	749
3744	To tell Gunicorn to serve static files directly from the `0.0.0.0` directory.	4	f	749
3745	To force Gunicorn to use IPv6 exclusively for all incoming connections.	5	f	749
3746	It automatically generates Django models based on environment variables.	1	f	750
3747	It directly integrates with Secret Manager to fetch all settings.	2	f	750
3748	It replaces Django's ORM with a more performant alternative.	3	f	750
3749	It provides a built-in WSGI server optimized for production environments.	4	f	750
3750	It allows loading configurations from environment variables or `.env` files, enhancing security and flexibility.	5	t	750
3751	A built-in variable provided by Cloud Build representing the short Git commit SHA of the build.	1	t	751
3752	The secret key used for encrypting build artifacts before pushing to a registry.	2	f	751
3753	A placeholder for the service health assessment status after deployment.	3	f	751
3754	A user-defined variable that must be explicitly set in the `substitutions` block.	4	f	751
3755	A command to securely hash sensitive artifacts produced during the build.	5	f	751
3756	It forces all custom domain traffic to be redirected to the default <code>.run.app</code> URL.	1	f	752
3757	It only supports HTTP for custom domains, requiring a separate load balancer for HTTPS.	2	f	752
3758	It automatically provisions and renews SSL/TLS certificates for the custom domain.	3	t	752
3759	It charges an additional fee for each SSL/TLS certificate provisioned.	4	f	752
3760	It requires you to manually upload your own SSL/TLS certificates purchased from a third party.	5	f	752
3761	By setting <code>client.is_htmx = True</code> before making the request.	1	f	753
3762	By using a special client method like <code>client.htmx_get(url)</code>.	2	f	753
3821	To create a new GCP project and link it to a billing account.	1	f	765
3763	By including an <code>HTTP_HX_REQUEST='true'</code> header in the client's request method (e.g., <code>self.client.get(url, HTTP_HX_REQUEST='true')</code>).	3	t	753
3764	By appending <code>?htmx=true</code> to the request URL.	4	f	753
3765	Django's test client automatically detects HTMX requests based on the view being tested.	5	f	753
3766	The Python code of the view function that rendered the template.	1	f	754
3767	Only a list of template syntax errors found on the page.	2	f	754
3768	Detailed debugging information, including the current context variables and imported libraries.	3	t	754
3769	A performance profile of the template rendering process.	4	f	754
3770	A list of all template files loaded for the current request.	5	f	754
3771	It connects directly to the production database in read-only mode for realistic testing.	1	f	755
3772	It creates a permanent, separate test database that persists between test runs.	2	f	755
3773	It bypasses the Django ORM and uses raw SQL for all test database operations, making tests faster.	3	f	755
3774	It automatically generates test data for all model fields based on their types.	4	f	755
3775	Each test method is run in a separate database transaction, which is rolled back after the test, ensuring test isolation and clean state.	5	t	755
3776	A dedicated Cloud VPN tunnel.	1	f	756
3777	A Serverless VPC Access connector.	2	t	756
3778	An external IP address assigned to the Cloud Run service.	3	f	756
3779	A NAT Gateway configured for the Cloud Run service.	4	f	756
3780	A global Cloud Load Balancer.	5	f	756
3781	By SSHing into a running Cloud Run instance and executing `manage.py migrate` manually.	1	f	757
3782	By embedding migration logic directly into Django model `save()` methods.	2	f	757
3783	By configuring Gunicorn to run migrations before starting the web server in each instance.	3	f	757
3784	As a distinct step in a Cloud Build pipeline, or by using a Cloud Run Job.	4	t	757
3785	By scheduling a cron job on a Compute Engine VM to periodically check for and apply migrations.	5	f	757
3786	It caches database queries locally to speed up development.	1	f	758
3787	It allows Django to connect to Cloud SQL using HTTP requests instead of the native database protocol.	2	f	758
3788	It automatically scales the Cloud SQL instance based on local development needs.	3	f	758
3789	It provides a secure, encrypted connection without needing to whitelist IP addresses or manually manage SSL certificates.	4	t	758
3790	It bypasses IAM authentication, allowing any local user to connect.	5	f	758
3791	The difficulty in programmatically setting custom HTTP headers (like `HX-Request`) in E2E testing tools.	1	f	759
3792	The complexity of generating sufficient and varied test data for E2E scenarios involving HTMX.	2	f	759
3793	The need to implement proper "wait" conditions in the test script to ensure assertions are made only after HTMX has completed its asynchronous DOM updates.	3	t	759
3794	The inability of E2E testing tools to inspect network requests made by HTMX.	4	f	759
3795	The general slowness of server response times, which makes E2E tests inherently unreliable for HTMX.	5	f	759
3796	E2E tests simulate real user interactions in a browser, verifying dynamic UI changes and JavaScript logic execution.	1	t	760
3797	Django's built-in test client can execute Alpine.js code on the server side for faster tests.	2	f	760
3798	E2E tests primarily check for HTML validity and CSS styling, not JavaScript behavior.	3	f	760
3799	E2E tests can directly call and assert the return values of JavaScript functions within <code>x-data</code>.	4	f	760
3800	Alpine.js has a built-in E2E testing framework that integrates with Django models.	5	f	760
3801	To monitor the health and performance of applications deployed by Cloud Build.	1	f	761
3802	To define the sequence of steps (e.g., test, build, deploy) that Cloud Build executes.	2	f	761
3803	To automatically initiate a Cloud Build pipeline in response to events in a connected source code repository (e.g., a push to a branch).	3	t	761
3804	To manually start a Cloud Build pipeline from the `gcloud` command line with specific parameters.	4	f	761
3805	To store and manage the Docker images and other artifacts produced by Cloud Build.	5	f	761
3806	Exposure of sensitive information like configuration settings and detailed error tracebacks.	1	t	762
3807	Prevention of static file serving, breaking the site's appearance.	2	f	762
3808	Disabling of all password hashing mechanisms, storing passwords in plaintext.	3	f	762
3809	Bypassing of all permission checks defined in views and templates.	4	f	762
3810	Automatic granting of superuser privileges to any anonymous user.	5	f	762
3811	By calling <code>form.get_error_summary()</code>.	1	f	763
3812	By accessing the <code>form.errors</code> attribute, which is a dictionary-like object mapping field names to error lists.	2	t	763
3813	The errors are automatically printed to the console and cannot be programmatically accessed.	3	f	763
3814	By checking the <code>form.validation_failures</code> list.	4	f	763
3815	You must catch the <code>ValidationError</code> exception raised by <code>is_valid()</code>.	5	f	763
3816	To provide a relational database service for Django models.	1	f	764
3817	To store and serve static files for the Django application.	2	f	764
3818	To securely store and manage sensitive configuration data like API keys and database passwords.	3	t	764
3819	To manage SSL/TLS certificates for custom domains automatically.	4	f	764
3820	To build and test Docker container images in a CI/CD pipeline.	5	f	764
3822	To deploy a pre-configured "hello world" application to Cloud Run.	2	f	765
3823	To install the Google Cloud SDK and all its components on the local machine.	3	f	765
3824	To generate API keys for accessing GCP services programmatically.	4	f	765
3825	To initialize the gcloud environment, authenticate the user, and set default project and compute region/zone.	5	t	765
3826	To create and manage test user data in the database automatically.	1	f	766
3827	To mock external services like social media providers.	2	f	766
3828	To directly call authentication backend methods like `authenticate()` and `get_user()`.	3	f	766
3829	To measure the performance of authentication views under load.	4	f	766
3830	To simulate HTTP requests (GET, POST, etc.) to the application and inspect responses.	5	t	766
3831	Integrate with a browser automation tool to simulate user interaction with the method.	1	f	767
3832	Primarily focus on ensuring the method does not raise any exceptions, regardless of its return value.	2	f	767
3833	Use Django's template rendering engine to display the method's output and visually inspect it.	3	f	767
3834	Mock the database connection and ensure the method generates the correct SQL query.	4	f	767
3835	Create model instances with specific field values covering different scenarios, call the method, and assert that its return value is as expected.	5	t	767
3836	It requires manual server provisioning, allowing fine-grained cost control.	1	f	768
3837	It automatically includes a managed Kubernetes cluster at no extra charge.	2	f	768
3838	It can scale down to zero instances, minimizing costs when there are no requests.	3	t	768
3839	It offers unlimited free outbound network traffic for all applications.	4	f	768
3840	It provides dedicated virtual machines with fixed monthly pricing for predictable costs.	5	f	768
3841	It logs all invalid variable accesses to a file for later review.	1	f	769
3842	It prevents `TemplateSyntaxError` from occurring for invalid variables.	2	f	769
3843	It automatically corrects misspelled variable names in the template.	3	f	769
3844	It provides detailed type information for all context variables.	4	f	769
3845	It makes missing or misspelled template variables clearly visible in the rendered output instead of failing silently.	5	t	769
3846	You must manually call <code>Alpine.initialize()</code> on the new content after every HTMX swap.	1	f	770
3847	Alpine.js (v3+) automatically detects these DOM changes and initializes the new Alpine components found within the swapped content.	2	t	770
3848	Alpine.js cannot initialize components in dynamically loaded content; it only works on the initial page load.	3	f	770
3849	HTMX automatically converts Alpine directives into plain JavaScript before swapping.	4	f	770
3850	You need to use a special <code>hx-alpine-init</code> attribute to trigger initialization.	5	f	770
3851	It embeds the CSRF token directly into the URL for all HTMX POST requests.	1	f	771
3852	It helps ensure HTMX's client-side JavaScript can automatically pick up Django's <code>csrftoken</code> cookie and include it in the <code>X-CSRFToken</code> header for AJAX requests.	2	t	771
3853	It disables Django's CSRF protection entirely for requests identified as coming from HTMX.	3	f	771
3854	It requires developers to manually add a <code>{% htmx_csrf_token %}</code> tag to every HTMX-powered element.	4	f	771
3855	It encrypts all HTMX POST data, making CSRF tokens unnecessary.	5	f	771
3856	It bundles HTMX.js and Alpine.js directly into your Django static files.	1	f	772
3857	It provides middleware (e.g., <code>HtmxDetailsMiddleware</code>) that adds <code>request.htmx</code> and other details about the HTMX request to the Django <code>request</code> object.	2	t	772
3858	It provides a complete client-side JavaScript library to manage HTMX interactions instead of using HTML attributes.	3	f	772
3859	It automatically converts all Django forms into HTMX-compatible forms without needing any <code>hx-*</code> attributes.	4	f	772
3860	It replaces Django's templating engine with a more HTMX-friendly version.	5	f	772
3861	It directly updates an Alpine <code>x-data</code> property named <code>myCustomEvent</code> to <code>true</code>.	1	f	773
3862	It tells Alpine.js to execute a global function named <code>myCustomEvent()</code>.	2	f	773
3863	It adds a CSS class <code>myCustomEvent</code> to the target element of the HTMX swap.	3	f	773
3864	HTMX will dispatch a custom browser event named <code>myCustomEvent</code>, which Alpine.js components can listen for.	4	t	773
3865	It triggers a full page reload after the HTMX swap, and <code>myCustomEvent</code> is passed as a URL parameter.	5	f	773
3866	Alpine.js automatically provides magic properties like <code>$htmx.afterSwap</code> that become true.	1	f	774
3867	By using special <code>x-htmx-on:after-swap</code> directives.	2	f	774
3868	By embedding <code>script</code> tags within the HTMX-swapped content that call Alpine methods.	3	f	774
3869	HTMX events cannot be directly listened to by Alpine.js; a custom JavaScript bridge is required.	4	f	774
3870	By using <code>x-on</code> (or <code>@</code>) with the event name and a modifier like <code>.window</code>, e.g., <code>@htmx:after-swap.window="myAlpineMethod()"</code>.	5	t	774
3871	It exclusively triggers JavaScript functions defined in <code>hx-on:push-url</code>.	1	f	775
3872	It pushes the entire HTML content of the page to the server for caching.	2	f	775
3873	It updates the browser's URL to reflect the current filter/search state without a full page reload, enabling bookmarking and shareability.	3	t	775
3874	It sends the URL parameters as part of the POST request body instead of the query string.	4	f	775
3875	It forces a full page reload to ensure the URL is correctly updated.	5	f	775
3876	They combine to form a complete replacement for SPA frameworks like React, offering superior client-side routing and state management.	1	f	776
3877	HTMX replaces Django's templating engine, and Alpine.js handles all server communication.	2	f	776
3878	Django provides a robust backend, HTMX handles server-HTML interactions, and Alpine.js adds localized client-side UI enhancements with minimal JS.	3	t	776
3879	Alpine.js primarily handles backend logic, HTMX manages database interactions, and Django serves static files.	4	f	776
3880	This stack eliminates the need for any custom JavaScript, relying solely on HTML attributes.	5	f	776
3881	To manage server-side session state and user authentication.	1	f	777
3882	For lightweight client-side interactivity and UI enhancements that don't necessarily require a server round-trip, such as managing dropdown visibility or local UI states.	2	t	777
3883	To define database models and business logic on the client side.	3	f	777
3884	As a primary tool for server-side rendering of HTML partials.	4	f	777
3885	To handle all AJAX requests, replacing HTMX's functionality.	5	f	777
3886	<code>focusout</code> to trigger search only when the user tabs away from the input field.	1	f	778
3887	<code>click</code> to trigger a search only when a search button is clicked.	2	f	778
3888	<code>keyup changed delay:500ms</code> to trigger a request after the user pauses typing and the input value has changed.	3	t	778
3889	<code>every 1s</code> to continuously poll the server regardless of user input.	4	f	778
3890	<code>load</code> to trigger an initial search as soon as the page loads.	5	f	778
3891	To clear the entire site cache every time any user logs in or out.	1	f	779
3892	To cache such partials only for anonymous users, as per-user caching is too complex.	2	f	779
3893	To use very long cache timeouts (e.g., several hours) to maximize cache hits, regardless of user.	3	f	779
3894	To disable caching entirely for all logged-in users to avoid data leakage.	4	f	779
3895	To ensure the cache key varies based on user-specific information (like user ID or session cookie) to prevent serving one user's data to another.	5	t	779
3896	It improves SEO by signaling to crawlers which parts of the page are dynamic.	1	f	780
3897	It automatically adds HTMX attributes to the included content, simplifying client-side setup.	2	f	780
3898	It enforces stricter security policies on the included partial content.	3	f	780
3899	It promotes DRY (Don't Repeat Yourself) by allowing the same partial template to be used for initial rendering and subsequent HTMX updates.	4	t	780
3900	It significantly reduces the JavaScript bundle size required for HTMX interactions.	5	f	780
3901	By checking the boolean attribute <code>request.htmx</code>.	1	t	781
3902	By checking if <code>request.content_type == 'application/htmx'</code>.	2	f	781
3903	By checking if <code>request.is_ajax()</code> returns true.	3	f	781
3904	By inspecting <code>request.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest'</code>.	4	f	781
3905	By looking for a query parameter like <code>?is_htmx=true</code> in the URL.	5	f	781
3906	Because CSRF tokens do not apply to requests for partial HTML views, requiring alternative authorization.	1	f	782
3907	Because HTMX requests inherently bypass Django's standard authentication and authorization middleware.	2	f	782
3908	Because HTML partials are inherently less secure and more susceptible to tampering than full pages.	3	f	782
3909	Because each view serving a partial is an independent endpoint that could be requested directly, potentially bypassing the main page's authorization.	4	t	782
3910	Because browsers cache HTML partials more aggressively and may serve stale authorization states.	5	f	782
3911	SSE is a standard web technology allowing a server to push data to a client over a single, long-lived HTTP connection, simpler than WebSockets for one-way server-to-client updates.	1	t	783
3912	SSE is an extension of HTML that allows elements to directly subscribe to database changes.	2	f	783
3913	SSE is a client-side JavaScript library that polls the server for updates every few seconds.	3	f	783
3914	SSE is a bidirectional communication protocol requiring complex Django Channels consumer setup for both sending and receiving messages.	4	f	783
3915	SSE primarily uses UDP for faster, unreliable message delivery, suitable for real-time games.	5	f	783
3916	To provide a complete client-side rendering framework, replacing Django's template system.	1	f	784
3917	To primarily facilitate CSS animations and transitions on the client-side.	2	f	784
3918	To handle user authentication and database persistence independently of Django.	3	f	784
3919	To manage server-centric interactivity, enabling partial page updates by fetching HTML fragments from Django.	4	t	784
3920	To manage complex client-side state and data binding, similar to React or Vue.	5	f	784
3921	HTMX alone handles both the UI toggling and data submission using complex <code>hx-swap</code> conditions.	1	f	785
3922	Django WebSockets are used to push real-time edit states to all clients.	2	f	785
3923	A full page reload is initiated by HTMX to switch to an edit view for the specific task.	3	f	785
3924	Alpine.js handles the entire CRUD operation, including database updates, directly from the client.	4	f	785
3925	Alpine.js manages the client-side state to toggle between display and edit form views, while HTMX handles the submission of the edited data to a Django view.	5	t	785
3926	Alpine.js is a mandatory dependency for HTMX to perform any DOM manipulations.	1	f	786
3927	Alpine.js is primarily used to make AJAX requests to the server, similar to HTMX.	2	f	786
3928	Alpine.js handles client-side UI logic (e.g., dropdown visibility, modal states) without server round trips, complementing HTMX's server interactions.	3	t	786
3929	Alpine.js replaces the need for Django's template rendering system.	4	f	786
3930	Alpine.js provides a complete backend solution, reducing the reliance on Django for data processing.	5	f	786
3931	To manage user authentication specifically for HTMX requests.	1	f	787
3932	To handle client-side JavaScript execution for HTMX attributes.	2	f	787
3933	To automatically convert all Django template responses into JSON suitable for HTMX.	3	f	787
3934	To compress HTML partials sent in response to HTMX requests.	4	f	787
3935	To inspect incoming requests for HTMX-specific headers and set <code>request.htmx</code> to <code>True</code> (and populate it with details) if present, allowing views to easily differentiate HTMX requests.	5	t	787
3936	Django views serve both full HTML pages for initial loads and targeted HTML fragments (partials) in response to HTMX requests.	1	t	788
3937	Django primarily serves JSON APIs, and HTMX handles all client-side HTML rendering.	2	f	788
3938	Django only handles database operations, while HTMX manages all routing and view logic.	3	f	788
3939	Django is relegated to only serving static assets, with HTMX and Alpine.js handling the dynamic application.	4	f	788
3940	Django's template rendering is bypassed, with all UI generation happening on the client.	5	f	788
3941	It requires developers to write significantly more custom JavaScript for AJAX requests compared to using <code>fetch</code> or <code>axios</code>.	1	f	789
3942	It generally leads to much larger JavaScript bundle sizes compared to typical SPA frameworks.	2	f	789
3943	It is poorly suited for applications that need strong backend security and authentication features.	3	f	789
3944	It might not be the best fit for extremely complex, state-intensive client-side applications requiring features like extensive offline capabilities or collaborative real-time editing.	4	t	789
3945	Learning HTMX and Alpine.js is significantly more difficult than learning a full SPA framework.	5	f	789
3946	Build a baseline of functionality with server-rendered HTML that works for all users, then layer on HTMX for server-driven interactivity and Alpine.js for client-side finesse as enhancements.	1	t	790
3947	Ensure all features work identically with or without JavaScript by replicating all HTMX/Alpine.js logic on the server side.	2	f	790
3948	Use HTMX to progressively load different JavaScript frameworks based on browser capabilities.	3	f	790
3949	Design the application primarily as a single-page application using Alpine.js, with Django providing only a JSON API and HTMX for fallback.	4	f	790
3950	Prioritize HTMX and Alpine.js for all functionality, only using Django templates for the initial page shell.	5	f	790
3951	Alpine.js, if loaded globally, often automatically detects new DOM content with `x-data` attributes and initializes the components.	1	t	791
3952	An explicit JavaScript call to an `Alpine.initializeComponents(targetElement)` function must be made within an `htmx:afterSwap` event listener.	2	f	791
3953	The Django view must return JavaScript code that manually instantiates new Alpine.js components.	3	f	791
3954	Alpine.js components must be pre-compiled on the server and sent as executable JavaScript along with the HTMX partial.	4	f	791
3955	HTMX sends a special `HX-Alpine-Init: true` header with the response, signaling Alpine.js to scan the new content.	5	f	791
3956	By using an HTMX attribute like `hx-on:htmx:before-request="isLoading = true"` directly on the Alpine component's root element.	1	f	792
3957	HTMX events can only be listened to by the specific HTML elements that initiate HTMX requests, not globally.	2	f	792
3958	By using an Alpine event listener with the `.window` modifier, for example, `@htmx:before-request.window="isLoading = true"`.	3	t	792
3959	Alpine.js cannot directly listen to HTMX events; a custom JavaScript bridge function must be created to relay these events.	4	f	792
3960	By continuously checking a global `htmx.isLoading` property from within an Alpine `x-effect` directive.	5	f	792
3961	It automatically optimizes database queries made by the CBV for HTMX requests.	1	f	793
3962	It enhances the security of CBVs by automatically adding CSRF protection specific to HTMX.	2	f	793
3963	It allows for the reuse of HTMX-specific logic (e.g., template switching) across multiple CBVs, promoting DRY code.	3	t	793
3964	It provides built-in client-side event handling for HTMX events within the CBV.	4	f	793
3965	It enables CBVs to handle WebSocket connections for real-time updates.	5	f	793
3966	Managing business logic and data persistence on the client side.	1	f	794
3967	Enhancing client-side interactivity for UI elements that don't require immediate server data, and managing local UI state.	2	t	794
3968	Handling all AJAX requests and DOM updates, replacing the need for HTMX.	3	f	794
3969	Implementing complex client-side routing and navigation.	4	f	794
3970	Serving initial full HTML pages and HTMX partials.	5	f	794
3971	This method limits the `x-data` attribute to only accept string values from the Django context, not numbers or booleans.	1	f	795
3972	It prevents Alpine.js from making the data within `x-data` reactive, treating it as static content.	2	f	795
3973	Cross-Site Scripting (XSS) vulnerabilities, if the `user_name` variable contains malicious content and is not properly escaped for a JavaScript string context.	3	t	795
3974	It can cause significant server-side performance degradation due to the overhead of excessive string interpolation.	4	f	795
3975	The Django template engine might incorrectly parse the JavaScript object literal syntax, leading to rendering errors.	5	f	795
3976	HTMX provides its own templating language that must be used for any dynamically updated content.	1	f	796
3977	HTMX allows Django views to return partial HTML fragments rendered by the same templating engine, which HTMX then swaps into the DOM.	2	t	796
4331	`def my_custom_action(modeladmin, request, queryset):`	1	t	867
3978	HTMX replaces Django's templating engine with a client-side solution for better performance.	3	f	796
3979	HTMX requires Django templates to be written in a special XML-like syntax compatible with its attributes.	4	f	796
3980	HTMX bypasses Django's templating engine and interacts directly with Django models to generate HTML.	5	f	796
3981	Alpine.js directives must be wrapped in special Django template tags (e.g., `{% alpine_directive %}`) to be recognized and rendered.	1	f	797
3982	Django attempts to convert Alpine.js directives into equivalent Python code for server-side execution.	2	f	797
3983	Alpine.js directives are generally ignored by Django's rendering process and must be added via client-side JavaScript manipulation after page load.	3	f	797
3984	Django renders them as standard HTML attributes; Alpine.js then processes these attributes on the client-side after the page loads.	4	t	797
3985	Django interprets these Alpine.js directives on the server and pre-processes the associated JavaScript logic.	5	f	797
3986	To allow HTMX `hx-target` attributes to uniquely identify each form for swapping.	1	f	798
3987	To enable client-side validation to target individual forms correctly.	2	f	798
3988	Primarily for applying unique CSS styles to each dynamically added form.	3	f	798
3989	For optimizing database indexing when saving data from multiple forms.	4	f	798
3990	So that Django's formset processing logic on the server can correctly distinguish between the fields of different forms and associate data with the right form instance.	5	t	798
3991	A JSON object containing the new like count and a boolean indicating the liked status.	1	f	799
3992	An HTML fragment representing only the updated "Like" button (e.g., showing "Unlike" and the new count).	2	t	799
3993	A JavaScript snippet that directly manipulates the DOM to update the button.	3	f	799
3994	An empty HTTP 204 No Content response, with client-side JavaScript updating the button.	4	f	799
3995	A full HTML page redirect back to the original blog post page.	5	f	799
3996	By including it in an `X-CSRFToken` HTTP header, often sourced from a `csrftoken` cookie or a meta tag.	1	t	800
3997	By sending it within a custom `HX-CSRF-Data` attribute in the request payload.	2	f	800
3998	CSRF protection is not applicable to POST requests from non-form elements in HTMX.	3	f	800
3999	By automatically embedding it as a query parameter in the `hx-post` URL.	4	f	800
4000	It doesn't; the `django-htmx` library handles CSRF by disabling it for such requests.	5	f	800
4001	An HTML fragment representing only the newly added task, which HTMX then appends to the list.	1	t	801
4002	A simple success status code (e.g., 200 OK) with no HTML content.	2	f	801
4003	A redirect response to the main To-Do list page.	3	f	801
4004	The full HTML page for the To-Do list, re-rendered with the new task.	4	f	801
4005	A JSON object containing the new task's data, which requires client-side JavaScript to render.	5	f	801
4006	Only the input that directly triggered the event will have its value sent in the request.	1	f	802
4007	HTMX automatically serializes all named input values within that form when the trigger event occurs, sending them as query parameters.	2	t	802
4008	A separate JavaScript function must be written to gather all form data and pass it to HTMX.	3	f	802
4009	Each input must have its own <code>hx-get</code> attribute and explicitly include other input values using <code>hx-vals</code>.	4	f	802
4010	Alpine.js is solely responsible for collecting all filter values and constructing the query string manually.	5	f	802
4011	<code>x-data="JSON.parse(document.getElementById('myDataId').textContent)"</code>	1	t	803
4012	<code>x-data="window.myDataId"</code>	2	f	803
4013	<code>x-data="{{ my_django_data }}"</code>	3	f	803
4014	<code>x-data="django.get_json_script('myDataId')"</code>	4	f	803
4015	<code>x-data="$refs.myDataId.value"</code>	5	f	803
4016	`get_context_data()`	1	f	804
4017	`render_to_response()`	2	f	804
4018	`dispatch()`	3	f	804
4019	`get_object()`	4	f	804
4020	`get_template_names()`	5	t	804
4021	It promotes DRY (Don't Repeat Yourself) by defining the component's HTML structure in one reusable partial template.	1	t	805
4022	It allows passing Python functions directly into the context of the included partial.	2	f	805
4023	It embeds the partial content as a client-side template for faster rendering.	3	f	805
4024	It automatically adds HTMX attributes to the included content, making it dynamic.	4	f	805
4025	It ensures that included partials are only rendered if <code>request.htmx</code> is true.	5	f	805
4026	Always creating two separate views and two distinct URLs for every resource: one for the full page and one for the HTMX partial.	1	f	806
4027	Returning the full HTML page for all requests and relying on HTMX on the client-side to parse out the required partial.	2	f	806
4028	Embedding partial HTML directly within JSON responses for HTMX requests.	3	f	806
4029	Using Django REST framework to serve JSON for HTMX requests, and standard Django views for full pages.	4	f	806
4030	Using a single view that conditionally renders either a full page template or a partial template based on whether the request is from HTMX.	5	t	806
4031	<code>dispatch()</code>	1	f	807
4032	<code>get_object()</code>	2	f	807
4033	<code>render_to_response()</code>	3	f	807
4034	<code>get_template_names()</code>	4	t	807
4035	<code>get_context_data()</code>	5	f	807
4036	It must modify a global JavaScript variable that other components poll.	1	f	808
4037	By using <code>x-init</code> to call <code>$dispatch('eventName', { detailData })</code>, which other components can listen for.	2	t	808
4038	HTMX provides an <code>hx-announce</code> attribute for this purpose.	3	f	808
4039	By directly calling methods on other components using <code>Alpine.findComponent('otherComponent').someMethod()</code>.	4	f	808
4040	It can only communicate with its direct parent or child components, not arbitrary ones.	5	f	808
4041	It contains only the specific HTML fragment needed for the update, without <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, or <code>&lt;body&gt;</code> tags.	1	t	809
4042	It must always start with a special HTMX comment like <code>&lt;!-- HTMX_PARTIAL --&gt;</code>.	2	f	809
4043	It includes the full site navigation and layout to ensure consistent styling.	3	f	809
4044	It must be written in XML format rather than standard HTML.	4	f	809
4045	It is primarily composed of JavaScript functions that HTMX executes on the client.	5	f	809
4046	Implementing simple content swaps based on server responses.	1	f	810
4047	Performing server-side data validation and rendering error messages.	2	f	810
4048	Initializing a third-party JavaScript widget (like a date picker or rich text editor) on HTML content loaded by an HTMX request.	3	t	810
4049	Managing URL routing and browser history for dynamically loaded content (which `hx-push-url` handles).	4	f	810
4050	Handling basic form submissions that only require replacing a target div with server-rendered HTML.	5	f	810
4051	HTMX uses declarative CSS for animations, while traditional AJAX often relies on imperative JavaScript for animations.	1	f	811
4052	HTMX allows you to describe the desired AJAX behavior in HTML attributes (declarative), rather than writing step-by-step JavaScript instructions (imperative).	2	t	811
4053	HTMX declares all possible application states in advance, unlike imperative approaches that build state dynamically.	3	f	811
4054	Declarative refers to HTML structure, while imperative refers to JavaScript functions used by HTMX internally.	4	f	811
4055	HTMX requires all server-side logic to be declared in Django models, whereas traditional AJAX uses imperative view functions.	5	f	811
4056	By returning `false` from an event listener for the `htmx:afterSwap` event.	1	f	812
4057	By dispatching a custom `htmx:abortRequest` event on the element that initiated the request.	2	f	812
4058	By calling `event.preventDefault()` on the `event` object within an event listener for the `htmx:beforeRequest` event.	3	t	812
4059	By directly modifying the `event.detail.xhr` object to call its `abort()` method during the `htmx:configRequest` event.	4	f	812
4060	By removing the `hx-get` or `hx-post` attribute from the element during the `htmx:beforeRequest` event.	5	f	812
4061	To manage how concurrent HTMX requests originating from or targeting specific elements are handled.	1	t	813
4062	To confirm a user's action before an HTMX request is made.	2	f	813
4063	To ensure that CSS transitions are synchronized with AJAX response times.	3	f	813
4064	To synchronize the browser's history with HTMX-loaded content.	4	f	813
4065	To synchronize data between the client-side and server-side cache.	5	f	813
4066	HTMX completely replaces the need for JavaScript frameworks by compiling HTML attributes to JavaScript.	1	f	814
4067	HTMX is itself a large JavaScript framework comparable in size to React or Angular.	2	f	814
4068	HTMX significantly reduces the amount of custom JavaScript needed for many dynamic interactions.	3	t	814
4069	HTMX primarily uses JavaScript for server-side rendering of HTML.	4	f	814
4070	HTMX requires developers to write more JavaScript to manage its lifecycle events.	5	f	814
4071	It requires all state to be explicitly managed within HTML `data-*` attributes.	1	f	815
4072	It relies heavily on client-side state stores like Redux or Vuex for all dynamic updates.	2	f	815
4073	It reduces the need for complex client-side state management as the server sends HTML representing the new state.	3	t	815
4074	It uses global JavaScript variables to maintain state across different HTMX interactions.	4	f	815
4075	State is only managed within the server session, and HTMX cannot reflect client-side changes.	5	f	815
4076	When the development team is primarily backend-focused with strong Django skills.	1	f	816
4077	When enhancing existing server-rendered Django templates with dynamic behavior.	2	f	816
4078	When building highly complex, application-like user interfaces with extensive client-side state management (e.g., a graphics editor).	3	t	816
4079	For content-heavy websites where SEO and fast initial page loads (via SSR) are critical and simpler to achieve.	4	f	816
4080	For simple CRUD applications where minimizing JavaScript is a primary goal.	5	f	816
4081	Return an empty response, requiring the client to guess that validation failed.	1	f	817
4082	Return the HTML fragment of the edit form again, now including validation error messages.	2	t	817
4083	Return a full page reload, displaying the form with errors within the entire page context.	3	f	817
4084	Return a JSON object containing the validation errors, for client-side JavaScript to display.	4	f	817
4085	Return an HTTP 500 Server Error status to indicate a severe problem.	5	f	817
4086	To adopt a JavaScript-first approach, building the entire UI with a client-side framework and then progressively adding Django for backend services.	1	f	818
4087	To use only the latest browser features and CSS properties, progressively dropping support for older browsers.	2	f	818
4088	To build a functional baseline application with standard HTML and server-side logic, then layer on HTMX and JavaScript for an enhanced experience in capable browsers.	3	t	818
4089	To focus exclusively on mobile-first responsive design, ensuring enhancements work primarily on small screens.	4	f	818
4090	To build applications using a serverless architecture, progressively enhancing them with edge computing functions.	5	f	818
4091	It defines a WebSocket subprotocol to be used for sending the form data.	1	f	819
4092	It closes the current WebSocket connection and then sends the form data via a standard HTTP POST request.	2	f	819
4093	It initiates a new WebSocket connection specifically for sending this form's data.	3	f	819
4094	It waits to receive a message over the WebSocket that matches the form's ID before sending data.	4	f	819
4095	It serializes the form data (usually into a JSON string) and sends this data over the WebSocket connection established by an ancestor element.	5	t	819
4096	The HTML of the deleted element, wrapped in a special tag indicating its removal.	1	f	820
4097	A JSON object confirming the deletion, e.g., `{"success": true}`.	2	f	820
4098	An empty response with an HTTP 200 OK or 204 No Content status.	3	t	820
4099	A redirect (HTTP 302) to the parent page.	4	f	820
4100	A full page reload to reflect the deletion.	5	f	820
4101	To validate user input on the client-side before sending an HTMX request.	1	f	821
4102	To confirm that the server has successfully processed an HTMX request.	2	f	821
4103	To define a custom confirmation message displayed within the target element.	3	f	821
4104	To display a confirmation dialog to the user before an HTMX request is made.	4	t	821
4105	To synchronize multiple HTMX requests to ensure they complete in order.	5	f	821
4106	A JSON object confirming success, with the client responsible for updating the display.	1	f	822
4107	An HTML fragment representing the updated read-only display of the content.	2	t	822
4108	A full page reload to show the updated content in its broader context.	3	f	822
4109	An empty HTTP 204 No Content response, assuming the client optimistically updated the UI.	4	f	822
4110	The edit form again, but with all fields disabled to indicate success.	5	f	822
4111	`text/html-stream`	1	f	823
4112	`application/json-stream`	2	f	823
4113	`text/event-stream`	3	t	823
4114	`multipart/x-mixed-replace`	4	f	823
4115	`application/vnd.htmx.sse`	5	f	823
4116	To permanently mark elements that have successfully completed an HTMX request at least once.	1	f	824
4117	To allow styling of elements (e.g., showing a loading spinner or disabling a button) while an HTMX request they initiated or are targeted by is in flight.	2	t	824
4118	To indicate that an element's content was loaded via an HTMX request rather than server-side rendering.	3	f	824
4119	To identify elements that are eligible to make HTMX requests but haven't yet been triggered.	4	f	824
4120	To apply special JavaScript behaviors defined in the HTMX library to the element.	5	f	824
4121	Serving it as a local static file managed by Django's <code>staticfiles</code> app.	1	t	825
4122	Compiling HTMX into your project's main JavaScript bundle using a tool like Webpack.	2	f	825
4123	Embedding the entire HTMX library code directly within a <code>&lt;script&gt;</code> tag in <code>base.html</code>.	3	f	825
4124	Using a Python package that automatically injects HTMX at runtime.	4	f	825
4125	Always using the latest version from a CDN like unpkg for automatic updates.	5	f	825
4126	The server must respond with a 204 No Content status for all history navigation requests.	1	f	826
4127	The server must return JSON data for any URL pushed, which HTMX then uses to reconstruct the page.	2	f	826
4128	The server must use WebSockets to synchronize history state with the client.	3	f	826
4129	The server must cache all partial HTML fragments associated with pushed URLs to handle back/forward navigation.	4	f	826
4130	The server must be able to render a full, coherent page for any URL that is pushed into the browser's history.	5	t	826
4131	It enables client-side storage (localStorage) of the table's current state.	1	f	827
4132	It disables the browser's default history management for these links, preventing conflicts.	2	f	827
4133	It forces HTMX to use POST requests for sorting and pagination, which are more secure.	3	f	827
4134	It ensures that `hx-select` can correctly extract URL parameters for the HTMX request.	4	f	827
4135	It updates the browser's URL to reflect the current sort order and page, making the table's state bookmarkable and shareable.	5	t	827
4136	HTMX performs all UI rendering on the client using WebAssembly, while SPAs use server-side rendering.	1	f	828
4137	Django with HTMX always results in a monolithic architecture, while SPAs always use microservices.	2	f	828
4138	Both HTMX and SPAs primarily use Django to serve JSON APIs, differing only in client-side rendering techniques.	3	f	828
4139	HTMX enhances server-rendered Django pages by fetching HTML partials, while SPAs typically consume JSON APIs from Django.	4	t	828
4140	HTMX is client-centric relying on client-side routing, whereas SPAs are server-centric.	5	f	828
4141	The request is triggered only if the value of the element has changed since the last potential trigger event.	1	t	829
4142	The request is triggered only once, when the element's value first changes.	2	f	829
4143	The request is triggered if any DOM element on the page has changed.	3	f	829
4144	The request is triggered only if the element's CSS class has changed.	4	f	829
4145	The request is triggered on any `change` event, ignoring `keyup`.	5	f	829
4146	The entire HTML content of the current page for server-side DOM analysis.	1	f	830
4147	The current value of the search input field, usually as a query parameter (e.g., <code>?q=searchTerm</code>).	2	t	830
4148	A complete list of all previously displayed search results for client-side filtering.	3	f	830
4149	The CSS selector of the search results container for the server to target.	4	f	830
4150	A session ID that the server uses to retrieve the user's search history.	5	f	830
4151	To specify that the swap should occur only if the server response indicates an "out of bounds" condition.	1	f	831
4152	To ensure that only one AJAX request is active at a time for a given element.	2	f	831
4153	To swap the content of an element located outside the current HTML document.	3	f	831
4154	To define a fallback swap target if the primary `hx-target` is not found.	4	f	831
4155	To allow a single server response to update multiple, distinct areas of the HTML page.	5	t	831
4156	CSS style rules to dynamically alter the appearance of elements.	1	f	832
4157	A JSON object containing data, which HTMX then renders using client-side templates.	2	f	832
4158	JavaScript code that, when executed, updates the DOM.	3	f	832
4159	HTML fragments that HTMX can directly swap into the DOM.	4	t	832
4160	Binary data representing the DOM changes to be applied.	5	f	832
4161	Restricting HTMX interactions to only use HTTP GET requests to reduce overhead.	1	f	833
4162	Heavily compressing all JavaScript files used by the application, even if not directly related to HTMX.	2	f	833
4163	Always using binary data formats like Protocol Buffers instead of HTML for HTMX responses.	3	f	833
4164	Extensively minifying CSS files, as they contribute most to payload size.	4	f	833
4165	Ensuring that Django views handling HTMX requests return only the necessary HTML fragment, not full page layouts.	5	t	833
4166	To pass a boolean parameter `someCondition` with value `true` to the server.	1	f	834
4167	To trigger the request only if the element has a data attribute named `someCondition` with value `true`.	2	f	834
4168	To filter server responses based on whether a specific condition is true.	3	f	834
4169	To select a specific CSS class `true` on the element for the trigger condition.	4	f	834
4170	To conditionally trigger the HTMX request only if the JavaScript expression within the brackets evaluates to `true`.	5	t	834
4171	<code>HX-Django-View: true</code>	1	f	835
4172	<code>HX-Partial: true</code>	2	f	835
4173	<code>HX-Request: true</code>	3	t	835
4174	<code>HX-Content-Type: partial/html</code>	4	f	835
4175	<code>HX-Source: htmx-library</code>	5	f	835
4176	It connects to a new SSE stream specifically for events named `myEventName`.	1	f	836
4177	It triggers a JavaScript custom event named `myEventName` when any SSE data is received.	2	f	836
4178	It sends an SSE event named `myEventName` from the client to the server.	3	f	836
4179	It defines the default swap strategy (e.g., `innerHTML`) for all SSE events on the page.	4	f	836
4180	It listens for SSE events named `myEventName` from an established connection and swaps the event's `data` payload into the element.	5	t	836
4181	The client maintains complex state and uses JSON APIs to fetch raw data, which it then renders into HTML.	1	f	837
4182	Application state is primarily managed through client-side JavaScript variables and local storage.	2	f	837
4183	The server exposes a fixed set of API endpoints that the client must know in advance to construct all interactions.	3	f	837
4184	The client interacts with the application entirely through hypermedia (e.g., HTML with embedded controls) provided dynamically by the server.	4	t	837
4185	The server sends JavaScript code bundles that define the application's interactive capabilities.	5	f	837
4186	It has poor Search Engine Optimization (SEO) capabilities by default.	1	f	838
4187	It can lead to a "chattier" application due to more server roundtrips for small UI updates.	2	t	838
4188	It generally results in significantly larger JavaScript bundle sizes compared to SPAs.	3	f	838
4189	It often requires a complex client-side build process involving tools like Webpack or Vite.	4	f	838
4190	It makes server-side integration with frameworks like Django more difficult.	5	f	838
4191	The OOB fragment in the response must have an `id` attribute that matches the `id` of an existing element in the DOM, along with `hx-swap-oob`.	1	t	839
4192	The Django view must include a special HTTP header `X-OOB-Target-ID` pointing to the DOM element.	2	f	839
4193	The OOB fragment must be the first child element of the main response content.	3	f	839
4194	HTMX automatically assigns OOB fragments to elements with the class `htmx-oob-target`.	4	f	839
4195	The OOB fragment must have an `hx-target-oob` attribute specifying a CSS selector.	5	f	839
4196	It enables easier integration with GraphQL backends.	1	f	840
4197	It allows for more efficient data compression, leading to faster network transfer than JSON.	2	f	840
4198	It significantly reduces server load because generating HTML is always less intensive than generating JSON.	3	f	840
4199	It makes API versioning obsolete as HTML structures are inherently stable.	4	f	840
4200	It simplifies frontend logic by eliminating the need for client-side templating or JSON-to-HTML rendering in JavaScript.	5	t	840
4201	The new request is dropped (ignored) if a synchronized request is currently in flight.	1	t	841
4202	The existing in-flight request is replaced by the new one.	2	f	841
4203	The new request is queued and will be processed after the current one finishes.	3	f	841
4204	The existing in-flight request is aborted, and the new request proceeds.	4	f	841
4205	All queued requests are processed sequentially.	5	f	841
4206	An `hx-delete` attribute is placed on the `div#modal-wrapper` itself, triggered by an external event.	1	f	842
4207	Client-side JavaScript directly calls `document.getElementById('modal-wrapper').remove()` without any server interaction.	2	f	842
4208	The "close" button uses `hx-swap="none"`, which automatically clears the target.	3	f	842
4209	A "close" button inside the modal uses `hx-get` to request a URL that returns an empty string, with `hx-target="#modal-wrapper"` and `hx-swap="innerHTML"`.	4	t	842
4210	The server sends an `HX-Trigger: closeModal` header, which client-side JavaScript listens for.	5	f	842
4211	It performs client-side validation of the input every 300ms before sending a request.	1	f	843
4212	It sends a search request instantly on every keyup, but only if the input value is at least 300 characters long.	2	f	843
4213	It throttles requests, ensuring that search requests are sent at most once every 300ms, regardless of typing speed.	3	f	843
4214	It debounces requests: an AJAX request is sent only after the user pauses typing for 300ms and if the input value has changed, reducing server load.	4	t	843
4215	It delays only the first search request by 300ms to allow initial page elements to load.	5	f	843
4216	The request is being made as a result of the user navigating via the browser's back or forward buttons to a URL previously pushed by HTMX.	1	t	844
4217	The request is part of an out-of-band swap operation that modifies history.	2	f	844
4218	The request is the first HTMX request being made on the current page load.	3	f	844
4219	The request is attempting to restore content from the browser's local cache.	4	f	844
4220	The request is a WebSocket handshake attempting to restore a previous session.	5	f	844
4221	The server returns an empty response, and client-side JavaScript reveals a hidden form.	1	f	845
4222	The server returns an HTML fragment containing an edit form, pre-filled with the content's current data.	2	t	845
4223	The server returns a JSON object with the content's data, which client-side JavaScript then uses to build a form.	3	f	845
4224	The server returns the same read-only display partial but with `contenteditable="true"` attributes added.	4	f	845
4225	The server returns a full page reload with the specific item in edit mode.	5	f	845
4226	The <code>hx-target</code> points to the main body of the document to reload the entire page with the active tab.	1	f	846
4227	Tab buttons do not use <code>hx-target</code>; the server specifies the target via an <code>HX-Target</code> response header.	2	f	846
4228	Each tab button targets a unique, pre-existing hidden <code>div</code> corresponding to its content.	3	f	846
4229	Each tab button targets itself (<code>hx-target="this"</code>) to replace its own content with the tab panel.	4	f	846
4230	All tab buttons target the same shared content display area (e.g., a <code>&lt;div id="tab-content-area"&gt;</code>).	5	t	846
4231	To set a delay before the HTMX request is actually sent to the server.	1	f	847
4232	To define the URL endpoint on the server that the HTMX request should be sent to.	2	f	847
4233	To specify the DOM element(s) that should receive and display the HTML response from the server.	3	t	847
4234	To indicate which HTTP method (GET, POST, etc.) should be used for the request.	4	f	847
4235	To specify the target browser window or tab for the response.	5	f	847
4236	An HTML fragment containing the re-rendered form, now including validation error messages.	1	t	848
4237	An HTTP 204 No Content, relying on client-side JavaScript to display pre-defined error messages.	2	f	848
4238	An HTTP 302 redirect back to the form page, with errors displayed via Django messages framework.	3	f	848
4239	The full HTML page containing the form, now with errors, causing a full page reload.	4	f	848
4240	A JSON object with an <code>errors</code> key detailing the validation failures.	5	f	848
4241	<code>hx-post</code>	1	t	849
4242	<code>hx-get</code>	2	f	849
4243	<code>hx-submit</code>	3	f	849
4244	<code>hx-target-post</code>	4	f	849
4245	<code>hx-send</code>	5	f	849
4246	Embed permission logic directly into model methods.	1	f	850
4247	Store permissions in a separate database table managed by custom SQL queries.	2	f	850
4248	Assign all permissions directly to each User object individually.	3	f	850
4249	Define permissions within view functions using conditional logic.	4	f	850
4250	Assign permissions to Groups, and then add users to those Groups.	5	t	850
4251	<code>SITE_ID</code>	1	t	851
4252	<code>DEFAULT_SITE</code>	2	f	851
4253	<code>ALLAUTH_SITE_ID</code>	3	f	851
4254	<code>SOCIALACCOUNT_SITE_ID</code>	4	f	851
4255	<code>APP_SITE_ID</code>	5	f	851
4256	By automatically encrypting all data before it is stored in the database.	1	f	852
4257	By using parameterized queries, where user input is treated as data rather than executable SQL code.	2	t	852
4258	By validating all SQL queries against a predefined whitelist.	3	f	852
4259	By requiring all database interactions to go through stored procedures.	4	f	852
4260	By stripping out common SQL keywords from user input.	5	f	852
4261	It is necessary for rendering authentication forms in templates.	1	f	853
4262	It allows customization of the User model using `AbstractUser`.	2	f	853
4263	It is required for managing user passwords and hashing.	3	f	853
4264	It handles the creation and management of user sessions.	4	f	853
4265	It provides a framework to associate permissions with specific application models.	5	t	853
4266	Verify that the specific order being accessed belongs to or is otherwise accessible by the currently logged-in user.	1	t	854
4267	Check if the request method is GET and not POST.	2	f	854
4268	Use Django's <code>PermissionRequiredMixin</code> to check for a general 'view_order' permission.	3	f	854
4269	Validate the CSRF token associated with the request.	4	f	854
4270	Ensure that the <code>order_id</code> is a valid integer and not a string.	5	f	854
4271	To create a new user account in the database.	1	f	855
4272	To hash a user's password before storing it.	2	f	855
4273	To verify the provided credentials and return a User object if successful, or `None` otherwise.	3	t	855
4274	To retrieve a User object given a user ID, typically used for session loading.	4	f	855
4275	To check if a user has a specific permission.	5	f	855
4276	Monkey-patching the default `django.contrib.auth.models.User` model.	1	f	856
4277	Inheriting from `django.contrib.auth.models.AbstractUser`.	2	t	856
4278	Creating a separate `UserProfile` model with a `OneToOneField` to the default `User` model.	3	f	856
4279	Inheriting from `django.contrib.auth.models.AbstractBaseUser`.	4	f	856
4280	Modifying Django's source code for the `User` model directly.	5	f	856
4281	They are not created by default and must always be explicitly defined.	1	f	857
4282	Manually by defining them in the model's `Meta.permissions` attribute.	2	f	857
4283	Automatically by Django when `manage.py migrate` is run, based on models in `INSTALLED_APPS`.	3	t	857
4284	Through the Django admin interface only.	4	f	857
4285	By the `AuthenticationMiddleware` on each request.	5	f	857
4286	When you only need to add a few extra profile fields like `bio` or `phone_number`.	1	f	858
4287	When you want to avoid writing a custom User Manager.	2	f	858
4288	When you need complete control over the User model's fields and structure, significantly different from Django's default.	3	t	858
4289	When you want the simplest way to change the `USERNAME_FIELD` to `email`.	4	f	858
4290	When you want to ensure seamless integration with the Django admin without any changes.	5	f	858
4291	Only after the application has been deployed to production and user feedback is gathered.	1	f	859
4292	At the very beginning of the project, before running initial migrations.	2	t	859
4293	After defining all other models in the application.	3	f	859
4294	Any time during development, as Django handles User model changes smoothly.	4	f	859
4295	When integrating third-party authentication providers.	5	f	859
4296	By using `request.user.permissions.check('myapp.can_edit_widget')`.	1	f	860
4297	By using the `@can_edit_widget` decorator on the view.	2	f	860
4298	By directly querying the `Permission` model: `Permission.objects.filter(user=request.user, codename='can_edit_widget').exists()`.	3	f	860
4299	By using `request.user.has_perm('myapp.can_edit_widget')`.	4	t	860
4300	By checking `request.session.get('myapp.can_edit_widget')`.	5	f	860
4301	<code>a href="..." data-permission="myapp.change_post"Edit/a</code>	1	f	861
4302	<code>{% check_perm user 'myapp.change_post' %} a href="..."Edit/a {% endcheck_perm %}</code>	2	f	861
4303	<code>{% if request.user.can_change_post %} a href="..."Edit/a {% endif %}</code>	3	f	861
4304	<code>{% if perms.myapp.change_post %} a href="..."Edit/a {% endif %}</code>	4	t	861
4305	<code>{% if user.has_permission('myapp.change_post') %} a href="..."Edit/a {% endif %}</code>	5	f	861
4306	To define the content of custom error pages for permission denied errors.	1	f	862
4307	To manage different types of user content like blog posts and comments.	2	f	862
4308	To provide a generic way to link permissions to specific Django models.	3	t	862
4309	To validate the content type of HTTP requests for secure forms.	4	f	862
4310	To allow users to choose different content themes for their profiles.	5	f	862
4311	Secure password hashing and management.	1	f	863
4312	A permissions and groups system.	2	f	863
4313	The User model (e.g., `django.contrib.auth.models.User`).	3	f	863
4314	A built-in Two-Factor Authentication (2FA) system.	4	t	863
4315	Authentication views and forms (e.g., `LoginView`).	5	f	863
4316	By modifying the `django.contrib.auth.models.Permission` model directly.	1	f	864
4317	By adding a `permissions` attribute to the model's `Meta` class, e.g., `permissions = [("can_publish_post", "Can publish post")]`.	2	t	864
4318	By creating a new method on the model named `can_publish_post()`.	3	f	864
4319	By configuring it in the `AUTHENTICATION_BACKENDS` setting.	4	f	864
4320	By adding a boolean field `can_publish_post` directly to the model.	5	f	864
4321	`@check_permission('app_label.codename')`	1	f	865
4322	`@has_permission('app_label.codename', deny_response=403)`	2	f	865
4323	`@login_required(permission='app_label.codename')`	3	f	865
4324	`@permission_required('app_label.codename', raise_exception=True)`	4	t	865
4325	`@user_passes_test(lambda u: u.has_perm('app_label.codename'), raise_exception=True)`	5	f	865
4326	<code>AUTH_USER_MODEL = 'accounts.MyUser'</code>	1	t	866
4327	<code>USER_MODEL = 'accounts.MyUser'</code>	2	f	866
4328	<code>AUTH_USER_MODEL = MyUser</code>	3	f	866
4329	<code>AUTH_USER_MODEL = 'accounts.models.MyUser'</code>	4	f	866
4330	<code>AUTH_USER_MODEL = ('accounts', 'MyUser')</code>	5	f	866
4332	`def my_custom_action(model_form, list_of_instances):`	2	f	867
4333	`def my_custom_action(self, current_object, form_data_dict):`	3	f	867
4334	`def my_custom_action(query_set, acting_user, action_label):`	4	f	867
4335	`def my_custom_action(request, selected_object_ids, model_class_name):`	5	f	867
4336	The `{% csrf_token %}` template tag is missing from the form in the template.	1	t	868
4337	The user's session has expired before submitting the form.	2	f	868
4338	The form is being submitted over HTTP instead of HTTPS.	3	f	868
4339	The `SECRET_KEY` used for CSRF token generation is incorrect.	4	f	868
4340	The `CsrfViewMiddleware` is not included in the `MIDDLEWARE` setting.	5	f	868
4341	Authorization is the process of encrypting user credentials, while authentication is about password hashing.	1	f	869
4342	Authentication sets user permissions, while authorization manages user sessions.	2	f	869
4343	Authentication verifies who a user is, while authorization determines what an authenticated user is allowed to do.	3	t	869
4344	Authentication and authorization are interchangeable terms for securing user access.	4	f	869
4345	Authorization verifies who a user is, while authentication determines what an authenticated user is allowed to do.	5	f	869
4346	To map social provider user IDs to local Django user IDs.	1	f	870
4347	To allow provider-specific configurations, such as defining requested scopes or authentication parameters.	2	t	870
4348	To define custom callback URLs for each social provider.	3	f	870
4349	To list all social providers that are enabled for the application.	4	f	870
4350	To store the Client IDs and Client Secrets for each provider.	5	f	870
4351	The <code>{% csrf_token %}</code> template tag.	1	f	871
4352	Using parameterized queries in the ORM.	2	f	871
4353	The <code>XFrameOptionsMiddleware</code>.	3	f	871
4354	Content Security Policy (CSP) headers, which are enabled by default.	4	f	871
4355	Automatic escaping of variable content rendered in templates (e.g., <code>{{ variable }}</code>).	5	t	871
4356	To add filtering options based on field values to the sidebar of the change list page.	1	f	872
4357	To control the layout of the add/edit form by grouping fields into logical sections, optionally adding titles, descriptions, and CSS classes to these sections.	2	t	872
4358	To specify which fields of the model are displayed as columns in the change list view.	3	f	872
4359	To define custom bulk actions that can be performed on selected objects from the change list page.	4	f	872
4360	To declare a set of fields that should be rendered as read-only on the add/edit form.	5	f	872
4361	Mixin: `UserPassesTestMixin`, Attribute: `test_func = lambda u: u.has_perm('app_label.codename')`	1	f	873
4362	Mixin: `PermissionRequiredMixin`, Attribute: `permission_required = 'app_label.codename'`	2	t	873
4363	Mixin: `AuthPermissionMixin`, Attribute: `check_permission = 'app_label.codename'`	3	f	873
4364	Mixin: `ViewPermissionMixin`, Attribute: `permissions = ['app_label.codename']`	4	f	873
4365	Mixin: `LoginRequiredMixin`, Attribute: `required_permission = 'app_label.codename'`	5	f	873
4366	To enable password hashing for the specified field.	1	f	874
4367	To link the User model to Django's permission system.	2	f	874
4368	To define a list of fields that will be prompted for when using the `createsuperuser` command.	3	f	874
4369	To specify which field on the User model should be used as the unique identifier for authentication.	4	t	874
4370	To determine the field used for displaying the user's name in the Django admin.	5	f	874
4371	It serves as the master encryption key for the entire project database, protecting all stored data.	1	f	875
4372	It is the password required to access the Django `DEBUG` mode console or administrative shell.	2	f	875
4373	It uniquely identifies the Django project instance to external services for API authentication.	3	f	875
4374	It is used as a salt when hashing static file names for cache-busting purposes in production.	4	f	875
4375	It is used for cryptographic signing of data, including session cookies, CSRF tokens, password reset tokens, and other signed values.	5	t	875
4376	You can only list actual model fields in `list_display`; methods or calculated values are not permitted.	1	f	876
4377	Define a method on the `ModelAdmin` class (or on the model itself) and add the method's string name to the `list_display` tuple or list.	2	t	876
4378	By using a special `ModelAdmin` attribute called `computed_list_fields` and listing the method names there.	3	f	876
4379	By modifying `settings.py` to enable a global "callable fields" option for the admin interface.	4	f	876
4380	By creating a custom template tag for the calculation and embedding it directly within the `list_display` definition.	5	f	876
4381	A single URL pattern that directly points to the project's main `admin.py` file.	1	f	877
4382	A list of static file URLs (CSS, JS) that the admin interface depends on.	2	f	877
4383	A collection of all necessary URL patterns required for the admin interface to function, including login, model listings, and edit forms.	3	t	877
4384	A function that programmatically registers models with the admin site based on URL access.	4	f	877
4385	A setting that defines whether `DEBUG` mode is active for the admin interface URLs.	5	f	877
4386	By hardcoding the string 'auth.User'.	1	f	878
4387	Using `django.contrib.auth.get_user_model()`.	2	f	878
4388	Using `django.contrib.auth.models.User`.	3	f	878
4389	By directly importing the custom User model class (e.g., `from accounts.models import MyUser`).	4	f	878
4390	Using `settings.AUTH_USER_MODEL`.	5	t	878
4391	Directly in `settings.py` as `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`.	1	f	879
4392	In a `.env` file that `django-allauth` automatically reads.	2	f	879
4393	In the Django admin interface, under "Social Accounts" &gt; "Social applications".	3	t	879
4394	Within the `SOCIALACCOUNT_PROVIDERS` dictionary in `settings.py`.	4	f	879
4395	These are not needed if `SOCIALACCOUNT_AUTO_SIGNUP` is `True`.	5	f	879
4396	Role assignment	1	f	880
4397	Session management	2	f	880
4398	Authorization	3	f	880
4399	Authentication	4	t	880
4400	Permission checking	5	f	880
4401	Registering the model using `admin.site.register(MyModel)` or the `@admin.register(MyModel)` decorator with a corresponding `ModelAdmin` class.	1	t	881
4402	Creating a specific template named `admin_MyModel_interface.html` within the app's templates directory.	2	f	881
4403	Adding a boolean attribute `include_in_admin = True` to the model class definition.	3	f	881
4404	Manually creating URL patterns for CRUD operations of the model in the project's `urls.py`.	4	f	881
4405	Adding the model's name to a special list called `MODELS_FOR_ADMIN` in `settings.py`.	5	f	881
4406	The currently logged-in admin user must have specific "view-only" permissions for that particular field.	1	f	882
4407	The field must also be present in the `list_display` attribute for consistency.	2	f	882
4408	No other configuration is needed; `readonly_fields` automatically ensures visibility on the form.	3	f	882
4409	The model field itself must have `editable=False` set in its definition in `models.py`.	4	f	882
4410	The field must also be explicitly included in the `fields` attribute or within one of the tuples in the `fieldsets` configuration.	5	t	882
4411	To enable a search box that queries across the specified fields in the change list.	1	f	883
4412	To provide a list of fields by which the change list can be filtered using a sidebar.	2	f	883
4413	To define the exact order and grouping of fields in the admin's add/edit form for that model.	3	f	883
4414	To declare custom actions that can be performed on selected items in the change list.	4	f	883
4415	To specify which fields, model methods, or `ModelAdmin` methods should appear as columns in the admin's change list view for that model.	5	t	883
4416	Standard username/password login against the Django database and admin login might stop working.	1	t	884
4417	CSRF protection for login forms will be compromised.	2	f	884
4418	Custom User models will no longer be supported.	3	f	884
4419	Password hashing will be disabled for all users.	4	f	884
4420	Django will automatically fall back to using `ModelBackend` if your custom backend fails.	5	f	884
4421	By only allowing requests from the same IP address as the initial session.	1	f	885
4422	By sanitizing all user input to remove malicious scripts.	2	f	885
4423	By embedding a unique token in forms and validating this token on subsequent state-changing requests (POST, PUT, etc.).	3	t	885
4424	By setting the <code>X-Frame-Options</code> header to <code>DENY</code>.	4	f	885
4425	By encrypting all form data submitted by users.	5	f	885
4426	`'django.contrib.auth'`	1	f	886
4427	`'django.contrib.sites'`	2	f	886
4428	`'django.core.management'`	3	f	886
4429	`'django.contrib.staticfiles'`	4	f	886
4430	`'django.contrib.admin'`	5	t	886
4431	It automatically creates a separate, advanced search page with detailed forms for the specified fields.	1	f	887
4432	It adds a search box to the model's change list page, allowing administrators to search for objects based on the content of the specified fields, including fields on related models using `__` notation.	2	t	887
4433	It lists fields that must be indexed by the database to enable searching; it does not directly add a UI element.	3	f	887
4434	It specifies which model fields should be displayed as read-only in the admin's add/edit form.	4	f	887
4435	It defines a list of fields that will be used to generate filter options in the right sidebar of the change list page.	5	f	887
4436	An `authorization_code` along with the client application's credentials (client ID and client secret).	1	t	888
4437	The user's email address and a one-time password.	2	f	888
4438	The user's username and password for the social provider.	3	f	888
4439	A `state` parameter and the `redirect_uri`.	4	f	888
4440	A `refresh_token` provided by the user's browser.	5	f	888
4441	A token generated by the user to prove their identity to the client application.	1	f	889
4442	A secret shared with the user's browser to encrypt communication during the redirect flow.	2	f	889
4443	A confidential key used by the client application to authenticate itself to the identity provider when exchanging an authorization code for an access token.	3	t	889
4444	A key used to sign the authorization code before it is sent to the client application.	4	f	889
4445	A publicly available identifier for the client application.	5	f	889
4446	It physically deploys the current state of the application code to a pre-configured production server.	1	f	890
4447	It performs additional system integrity checks that are specifically relevant to a production deployment environment, such as verifying critical security settings (`SECRET_KEY`, `DEBUG`) and static files configuration.	2	t	890
4448	It compares the code on the deployment server with the latest version in the project's version control repository.	3	f	890
4449	It scans the deployed application for broken hyperlinks and missing static resources.	4	f	890
4450	It exclusively checks the syntax and validity of the `settings.py` file for deployment readiness.	5	f	890
4451	It is only required for third-party apps, not for apps created within the project.	1	f	891
4452	So Django can discover the app's models, admin configurations, templates, and run its migrations.	2	t	891
4453	To automatically generate user authentication for that app.	3	f	891
4454	To enable CSS and JavaScript files specifically for that app.	4	f	891
4455	To specify the database connection parameters for that particular app.	5	f	891
4456	The MVT pattern inherently covers all necessary aspects, making infrastructure knowledge supplementary.	1	f	892
4457	It is fundamental for building robust, scalable, debuggable, performance-optimized, and maintainable applications.	2	t	892
4458	It is only relevant for backend developers and not for those working with frontend technologies like HTMX.	3	f	892
4459	It mainly helps in designing better user interfaces and templates.	4	f	892
4460	It is primarily an academic exercise with little practical application in real-world projects.	5	f	892
4461	`None`	1	t	893
4462	It will raise a `KeyError` exception immediately.	2	f	893
4463	It will default to the boolean value `False`.	3	f	893
4464	The string literal `'MY_CONFIG_VAR'`.	4	f	893
4465	An empty string (`''`)	5	f	893
4466	In environment variables, which are injected into the application's runtime environment.	1	t	894
4467	In a separate, unversioned Python configuration file that is imported by the main `settings.py` file.	2	f	894
4468	Directly within the `settings.py` file, which is then committed to the version control system.	3	f	894
4469	Stored within a specific table in the application's database, accessible via the ORM.	4	f	894
4470	Encrypted within static asset files that are deployed alongside the application code.	5	f	894
4471	It creates initial data fixtures for populating Models based on template content.	1	f	895
4472	It is responsible for serving user-uploaded media files during development.	2	f	895
4473	It gathers all static files (CSS, JavaScript) referenced in Templates from various app and project locations into the `STATIC_ROOT` directory for deployment.	3	t	895
4474	It compiles Python code within View functions for improved runtime performance.	4	f	895
4475	It automatically generates Model definitions by inspecting the existing database schema.	5	f	895
4476	By listing `MIDDLEWARE` components that directly process and validate model data.	1	f	896
4477	By defining database connection parameters in the `DATABASES` setting, enabling the ORM to interact with models.	2	t	896
4478	By specifying the `STATIC_URL` which models use to reference their associated images.	3	f	896
4479	By directly containing all model class definitions for the project.	4	f	896
4480	By exclusively managing and storing model migration files.	5	f	896
4481	To interact directly with the database for data retrieval and storage.	1	f	897
4482	To manage user authentication and session data.	2	f	897
4483	To route HTTP requests to the appropriate handler.	3	f	897
4484	To handle business logic and data processing.	4	f	897
4485	To define the presentation of data, typically by generating HTML.	5	t	897
4486	To define the data structure and interact directly with the database, like a model in MVC.	1	f	898
4487	To manage static files and media for the application.	2	f	898
4488	To handle the business logic, process incoming HTTP requests, and prepare HTTP responses, often acting like a controller in MVC.	3	t	898
4489	To solely handle URL routing and dispatch requests to appropriate models.	4	f	898
4490	To manage the presentation layer and define what the user sees, primarily using HTML and template tags.	5	f	898
4491	`shell`	1	t	899
4492	`pythonshell`	2	f	899
4493	`inspect_project`	3	f	899
4494	`console`	4	f	899
4495	`debugserver`	5	f	899
4496	It includes the full exception traceback information in the log record.	1	t	900
4497	It formats the log message specifically for `django.request` logger.	2	f	900
4498	It sends the exception details to a separate error monitoring service.	3	f	900
4499	It causes the exception to be re-raised after logging.	4	f	900
4500	It only logs the exception message, not the type or traceback.	5	f	900
4501	Django raises a `SystemExit` exception, causing the server process to terminate.	1	f	901
4502	Django serves a generic HTTP 500 error page and emails administrators listed in `ADMINS` (if configured).	2	t	901
4503	Django displays a detailed debug page with traceback information to the user.	3	f	901
4504	Django automatically retries the request up to three times.	4	f	901
4505	Django logs the error to the console and returns a 200 OK response with an error message in the body.	5	f	901
4506	To generate database migration files based on changes detected in the project's models.	1	f	902
4507	To compile the entire Django project and deploy it to a production server environment.	2	f	902
4508	To launch Django's lightweight, built-in development web server for local testing and development.	3	t	902
4509	To collect all static files (CSS, JavaScript, images) into the `STATIC_ROOT` directory for deployment.	4	f	902
4510	To execute the project's automated test suite and report any failures or errors.	5	f	902
4511	Making model field definitions as verbose as possible for clarity.	1	f	903
4512	Moving all query logic into templates using custom template tags.	2	f	903
4513	Concentrating business logic within the model layer, leaving views to handle HTTP request/response and presentation.	3	t	903
4514	Ensuring views are large and contain all conditional logic for an application.	4	f	903
4515	Placing all data validation logic exclusively in view functions.	5	f	903
4516	It's the main configuration file that stores database settings and installed app lists.	1	f	904
4517	It's used for defining URL patterns for the entire project.	2	f	904
4518	It primarily handles incoming HTTP requests and routes them to appropriate views.	3	f	904
4519	It's a global Django utility used for creating new projects, similar to `django-admin` but with more features.	4	f	904
4520	It's a project-specific command-line utility for interacting with the Django project, used for tasks like running the development server, creating apps, and managing migrations.	5	t	904
4521	To run the project's automated test suite with elevated (superuser) privileges.	1	f	905
4522	To automatically generate a secure and unique `SECRET_KEY` for the project's `settings.py` file.	2	f	905
4523	To create an administrative user account that has all permissions and can access the Django admin interface.	3	t	905
4524	To install all project dependencies listed in a `requirements.txt` file using pip.	4	f	905
4525	To initialize and configure a new SQL database for the Django project based on `settings.py`.	5	f	905
4526	When the method computes a derived value that acts like an attribute of the model and has no side effects.	1	t	906
4527	When the method needs to accept arguments to perform its calculation.	2	f	906
4528	When the method performs an action that modifies the model's state in the database, like `publish()`.	3	f	906
4529	When the method is intended to be overridden by all child classes.	4	f	906
4530	When the method involves complex database queries that require a custom manager.	5	f	906
4531	Log the error and redirect the user to the homepage without indicating an error.	1	f	907
4532	Catch the <code>MyModel.DoesNotExist</code> exception and raise <code>django.http.Http404</code>, or use <code>django.shortcuts.get_object_or_404</code>.	2	t	907
4533	Allow the <code>MyModel.DoesNotExist</code> exception to propagate, and Django will automatically render a 500 error page.	3	f	907
4534	Catch the generic <code>Exception</code> and return a custom JSON error message.	4	f	907
4535	Return an empty <code>HttpResponse</code> with a status code of 204 (No Content).	5	f	907
4536	To change the model's default database table name.	1	f	908
4537	To automatically generate derived field values (e.g., a slug from a title) or enforce complex data integrity rules before persisting.	2	t	908
4538	To specify the default ordering for QuerySets of the model.	3	f	908
4539	To define custom query methods for fetching instances of the model.	4	f	908
4540	To send email notifications after a related model is updated.	5	f	908
4541	Partials are compiled into WebAssembly for faster execution in the browser.	1	f	909
4542	Partials automatically handle client-side routing and state management, reducing the need for Alpine.js.	2	f	909
4543	Partials help Django bypass its ORM for faster database queries during HTMX requests.	3	f	909
4544	Partials allow Django views to return only the necessary HTML fragments for HTMX to swap, making updates efficient and promoting DRY (Don't Repeat Yourself) by reusing the partial for both initial render and HTMX updates.	4	t	909
4545	Partials are primarily for embedding JavaScript code directly within HTML, improving performance over separate JS files.	5	f	909
4546	A QuerySet `update()` call (e.g., `MyModel.objects.filter(...).update(...)`).	1	t	910
4547	Saving a model instance via a `ModelForm`.	2	f	910
4548	Calling `my_instance.save(force_update=True)`.	3	f	910
4549	When a `post_save` signal receiver calls `instance.save()` again.	4	f	910
4550	Saving an instance in the Django admin interface.	5	f	910
4551	<code>django-admin startproject project_name</code>	1	f	911
4552	<code>python manage.py init_project project_name</code>	2	f	911
4553	<code>python manage.py startproject project_name .</code>	3	f	911
4554	<code>django-admin startproject project_name .</code>	4	t	911
4555	<code>django-admin new_project project_name</code>	5	f	911
4556	Return a 204 No Content response, and trigger a separate HTMX GET request to fetch error messages.	1	f	912
4557	Return a JSON object with error messages and a 200 OK status, requiring client-side JavaScript to display errors.	2	f	912
4558	Return an empty 500 Internal Server Error response, letting HTMX handle it generically.	3	f	912
4559	Return the re-rendered form partial (containing error messages) with an HTTP status code of 422 (Unprocessable Entity).	4	t	912
4560	Always redirect back to the form page with errors displayed via the Django messages framework.	5	f	912
4561	Receiving and interpreting HTTP requests.	1	f	913
4562	Defining the database schema and model relationships.	2	t	913
4563	Preparing context data for templates.	3	f	913
4564	Processing business logic and interacting with models.	4	f	913
4565	Selecting and rendering a template or returning an alternative HttpResponse.	5	f	913
4566	There is no functional difference; the terms are used interchangeably.	1	f	914
4567	A project contains only HTML templates, while an app contains only Python code.	2	f	914
4568	An app is the top-level container, and a project is a component within an app.	3	f	914
4569	Projects are for development, and apps are for production deployments.	4	f	914
4570	A project is a collection of settings and apps for a website, while an app is a modular web application providing specific functionality.	5	t	914
4635	By encrypting all POST data using the user's session ID.	5	f	927
4571	By creating middleware that catches <code>Http404</code> and other exceptions and renders custom responses.	1	f	915
4572	By overriding the <code>handle_error</code> method in <code>django.core.handlers.wsgi.WSGIHandler</code>.	2	f	915
4573	By setting <code>CUSTOM_404_VIEW</code> and <code>CUSTOM_500_VIEW</code> in <code>settings.py</code>.	3	f	915
4574	By assigning view functions to <code>handler404</code> and <code>handler500</code> variables in the root <code>urls.py</code>.	4	t	915
4575	By creating templates named <code>404_custom.html</code> and <code>500_custom.html</code> in the root templates directory.	5	f	915
4576	Faster template rendering speed.	1	t	916
4577	Reduced code duplication (DRY).	2	f	916
4578	Enhanced testability of business logic.	3	f	916
4579	Better data integrity and consistency.	4	f	916
4580	Improved maintainability and readability due to separation of concerns.	5	f	916
4581	`django.db.transaction.commit()`	1	f	917
4582	`self.commit_to_db()`	2	f	917
4583	`self.full_clean()`	3	f	917
4584	`super().save(*args, **kwargs)`	4	t	917
4585	`self.update_fields(self.get_dirty_fields())`	5	f	917
4586	Reduced need for database migrations.	1	f	918
4587	Elimination of the need for URL routing.	2	f	918
4588	Automatic scaling of web server instances.	3	f	918
4589	Faster database query execution by default.	4	f	918
4590	Improved maintainability, as presentation (templates) can be changed without altering data retrieval logic (views/models).	5	t	918
4591	To specify the commands for building and running the application in Docker.	1	f	919
4592	To list all Python package dependencies and their versions, ensuring reproducible environments.	2	t	919
4593	To define the project's URL routing configuration.	3	f	919
4594	To document the project's coding style and conventions.	4	f	919
4595	To store environment variables required by the application.	5	f	919
4596	To define the format and layout of the log message string.	1	f	920
4597	To filter log messages based on their severity level before they reach a logger.	2	f	920
4598	To buffer log messages in memory before batch processing.	3	f	920
4599	To determine what happens to a log message (e.g., write to console, file, or send an email).	4	t	920
4600	To categorize log messages based on the application module they originate from.	5	f	920
4601	Channels simplifies the deployment process for Django applications with real-time features.	1	f	921
4602	Channels provides robust asynchronous handling, allowing for efficient management of many concurrent, long-lived connections without tying up synchronous workers.	2	t	921
4603	Channels allows serving static files more efficiently than Django's default staticfiles app.	3	f	921
4604	Channels offers built-in, advanced authentication methods not available in standard Django.	4	f	921
4605	Channels automatically scales the database infrastructure based on the number of active connections.	5	f	921
4606	To automatically generate user interface components for interacting with the API.	1	f	922
4607	To define the database schema for resources exposed by the API.	2	f	922
4608	To manage user authentication and permissions for API endpoints.	3	f	922
4609	To convert complex data types (like Django model instances) into native Python datatypes for rendering into JSON/XML, and to deserialize/validate incoming data.	4	t	922
4610	To handle HTTP request routing to appropriate view methods.	5	f	922
4611	To control which external JavaScript frameworks can be loaded by the site.	1	f	923
4612	To prevent the site's pages from being embedded in `iframe` or `frame` elements on other sites, mitigating clickjacking attacks.	2	t	923
4613	To disable all HTML frames within the Django application itself for security reasons.	3	f	923
4614	To specify options for Django's template frame rendering.	4	f	923
4615	To define the maximum frame rate for animations on the site.	5	f	923
4616	<code>AUTH_PASSWORD_VALIDATORS</code>	1	t	924
4617	<code>PASSWORD_HASHERS_OPTIONS</code>	2	f	924
4618	<code>PASSWORD_STRENGTH_RULES</code>	3	f	924
4619	<code>USER_PASSWORD_POLICY</code>	4	f	924
4620	<code>PASSWORD_COMPLEXITY_CHECKERS</code>	5	f	924
4621	Because `DEBUG = True` can expose sensitive configuration details, tracebacks, and internal application state upon errors.	1	t	925
4622	Because `DEBUG = True` disables password hashing, making user accounts vulnerable.	2	f	925
4623	Because `DEBUG = True` significantly slows down the application performance.	3	f	925
4624	Because `DEBUG = True` bypasses CSRF protection for all forms.	4	f	925
4625	Because `DEBUG = True` prevents Django from serving static files correctly in production.	5	f	925
4626	To ensure that even if two users have the same password, their stored hashes will be different, protecting against rainbow table attacks.	1	t	926
4627	To reduce the number of iterations needed for secure hashing.	2	f	926
4628	To encrypt the password before hashing it.	3	f	926
4629	To make the hashing algorithm run faster.	4	f	926
4630	To link the password hash to a specific user account without storing the username.	5	f	926
4631	By checking the HTTP Referer header for all incoming requests.	1	f	927
4632	By setting a CSRF cookie and requiring a matching token from a hidden form field in POST requests.	2	t	927
4633	By rate-limiting POST requests from individual IP addresses.	3	f	927
4634	By requiring a CAPTCHA for every form submission.	4	f	927
4636	It inspects the type of incoming connection (e.g., HTTP, WebSocket) and routes it to the appropriate consumer or ASGI application.	1	t	928
4637	It provides middleware for authenticating users across different protocols.	2	f	928
4638	It handles the serving of static and media files in an ASGI environment.	3	f	928
4639	It manages connections to the database and other backend services for asynchronous tasks.	4	f	928
4640	It routes standard HTTP requests to specific Django views based on URL patterns, replacing `urls.py`.	5	f	928
4641	It is required for Django's password hashing to function.	1	f	929
4642	It encrypts data in transit, preventing eavesdropping on passwords and session cookies.	2	t	929
4643	It automatically validates user passwords against common password lists.	3	f	929
4644	It ensures Django's CSRF protection mechanism works correctly.	4	f	929
4645	It provides built-in rate limiting for login attempts.	5	f	929
4646	`get_command_arguments(self)`	1	f	930
4647	`parse_cli_args(self, argument_list)`	2	f	930
4648	`add_arguments(self, parser)`	3	t	930
4649	`configure_argument_parser(self, parser_instance)`	4	f	930
4650	`define_options(self, option_parser)`	5	f	930
4651	To specify which IP addresses are allowed to access the Django admin interface.	1	f	931
4652	To configure which static file hosting services are permitted.	2	f	931
4653	To provide a list of valid host/domain names that the Django site can serve, protecting against HTTP Host header attacks.	3	t	931
4654	To define a list of trusted hosts for making outbound API calls.	4	f	931
4655	To list hosts that are allowed to embed the site via iframes.	5	f	931
4656	`django.middleware.common.CommonMiddleware`	1	f	932
4657	`django.contrib.sessions.middleware.SessionMiddleware`	2	f	932
4658	`django.contrib.auth.middleware.AuthenticationMiddleware`	3	t	932
4659	`django.contrib.admin.middleware.AdminAuthenticationMiddleware`	4	f	932
4660	`django.middleware.security.UserPopulationMiddleware`	5	f	932
4661	To encrypt the form data before it is submitted to the server.	1	f	933
4662	To generate a unique identifier for the form itself.	2	f	933
4663	To ensure the form is only submitted over an HTTPS connection.	3	f	933
4664	To include a hidden input field with a unique token that helps protect against Cross-Site Request Forgery attacks.	4	t	933
4665	To validate the user's session before processing the form.	5	f	933
4666	To define the number of seconds before a clickjacking attempt is blocked.	1	f	934
4667	To instruct browsers to only communicate with the site using HTTPS for a specified duration, preventing protocol downgrade attacks.	2	t	934
4668	To set the maximum duration for user sessions before requiring re-authentication.	3	f	934
4669	To control how long password reset tokens remain valid.	4	f	934
4670	To configure the iteration count for password hashing algorithms.	5	f	934
4671	<code>rest_framework.viewsets.ReadOnlyModelViewSet</code>	1	f	935
4672	<code>django.views.generic.ListView</code>	2	f	935
4673	<code>rest_framework.generics.RetrieveAPIView</code>	3	f	935
4674	<code>rest_framework.generics.ListAPIView</code>	4	t	935
4675	<code>rest_framework.views.APIView</code>	5	f	935
4676	It is not crucial; Django dynamically reorders middleware based on dependencies.	1	f	936
4677	Because middleware listed later has higher precedence and can override earlier middleware.	2	f	936
4678	Because Django loads middleware alphabetically, and the list order only serves as a comment.	3	f	936
4679	The order only matters for middleware that uses the <code>process_exception</code> hook.	4	f	936
4680	Because each middleware might depend on actions performed by previous middleware (for requests) or affect subsequent ones (for responses).	5	t	936
4681	Enforcing HTTPS Everywhere by redirecting all HTTP requests to HTTPS.	1	t	937
4682	Ensuring that all secret keys are stored securely outside of version control.	2	f	937
4683	Validating all user inputs to prevent XSS and SQL injection attacks.	3	f	937
4684	Implementing HTTP Strict Transport Security (HSTS).	4	f	937
4685	Regularly updating Django and third-party dependencies.	5	f	937
4686	To prevent the Django view from hanging indefinitely if the external API is unresponsive, which could exhaust server resources.	1	t	938
4687	To ensure the external API processes the request within the specified time.	2	f	938
4688	To set the cache expiration time for the response received from the API.	3	f	938
4689	To limit the size of the response payload that can be received from the API.	4	f	938
4690	To tell the <code>requests</code> library to use an asynchronous connection.	5	f	938
4691	`reporting/commands/my_script.py`	1	f	939
4692	`reporting/management/commands/my_script.py`	2	t	939
4693	`reporting/admin_scripts/my_script.py`	3	f	939
4694	`reporting/management/my_script.py`	4	f	939
4695	`myproject/management/commands/my_script.py` (where `myproject` is the project root)	5	f	939
4696	It replaces Django's form processing logic in views with a simpler API.	1	f	940
4697	It allows forms to be submitted without a page reload, natively.	2	f	940
4698	It automatically creates database models based on form definitions.	3	f	940
4699	It automates the generation of complex form HTML with CSS framework styling (e.g., Bootstrap), reducing boilerplate.	4	t	940
4700	It handles form validation entirely on the client-side, reducing server load.	5	f	940
4701	An abstraction layer for database interactions in asynchronous Django applications.	1	f	941
4702	A UI component library provided by Django Channels for building real-time interfaces.	2	f	941
4703	A security layer in Django Channels that encrypts communication between consumers.	3	f	941
4704	A specific type of Django template layer designed for rendering real-time updates.	4	f	941
4705	A message bus system (often backed by Redis or similar) that allows different parts of the application (consumers, views, background tasks) to communicate with each other.	5	t	941
4706	To implement HTTP Strict Transport Security (HSTS), forcing browsers to use HTTPS.	1	f	942
4707	To handle user authentication, checking credentials and managing login/logout states.	2	f	942
4708	To manage the serving of static files (CSS, JavaScript) and ensure their integrity.	3	f	942
4709	To protect against Cross-Site Request Forgery (CSRF) attacks by validating a unique token for "unsafe" HTTP methods like POST.	4	t	942
4710	To encrypt and decrypt session data to prevent tampering or unauthorized access.	5	f	942
4711	`django.contrib.auth.middleware.AuthenticationMiddleware`	1	f	943
4712	`django.middleware.security.SecurityMiddleware`	2	f	943
4713	`django.middleware.csrf.CsrfViewMiddleware`	3	f	943
4714	`django.contrib.sessions.middleware.SessionMiddleware`	4	t	943
4715	`django.middleware.common.CommonMiddleware`	5	f	943
4716	`handle(self, *args, **options)`	1	t	944
4717	`do_work(self, **options)`	2	f	944
4718	`execute_task(self, **options)`	3	f	944
4719	`process_command(self, *args, **options)`	4	f	944
4720	`run_command(self, *args, **kwargs)`	5	f	944
4721	Inside the <code>process_view</code> method, after the view has executed.	1	f	945
4722	Before the line <code>response = self.get_response(request)</code>.	2	f	945
4723	Within the <code>process_template_response</code> method, regardless of response type.	3	f	945
4724	After the line <code>response = self.get_response(request)</code>.	4	t	945
4725	In the <code>__init__</code> method of the middleware.	5	f	945
4726	To close the connection for all channels currently in the specified `group_name`.	1	f	946
4727	To add the current consumer instance's unique channel (connection) to a named group, allowing it to receive messages broadcast to that group.	2	t	946
4728	To authenticate the current channel for access to a specific group.	3	f	946
4729	To create a new group named `group_name` on the channel layer if it doesn't already exist.	4	f	946
4730	To send a message from the current consumer to all members of the specified `group_name`.	5	f	946
4731	It is the incoming <code>HttpRequest</code> object, allowing for initial inspection.	1	f	947
4732	It is a function used to fetch the final <code>HttpResponse</code> object directly, bypassing subsequent middleware.	2	f	947
4733	It is a list of all other middleware components registered in the application.	3	f	947
4734	It is a configuration dictionary passed from <code>settings.py</code> for this specific middleware.	4	f	947
4735	It is a callable representing the next middleware in the chain or the view itself, which the current middleware must call to continue processing.	5	t	947
4736	In a dynamic order determined by Django at runtime based on middleware dependencies.	1	f	948
4737	In the reverse order of their listing (bottom to top) in the `MIDDLEWARE` setting.	2	f	948
4738	In the order they are listed from top to bottom in the `MIDDLEWARE` setting in `settings.py`.	3	t	948
4739	In alphabetical order based on their Python class names.	4	f	948
4740	The order during the request phase is not significant; only the response phase order matters.	5	f	948
4741	It retries the request automatically if a transient network error occurs.	1	f	949
4742	It automatically raises an <code>requests.exceptions.HTTPError</code> if the HTTP response status code is a 4xx or 5xx client/server error.	2	t	949
4743	It adds necessary authentication headers to the outgoing request.	3	f	949
4744	It logs the full request and response details for debugging purposes.	4	f	949
4745	It ensures the response content is always in JSON format.	5	f	949
4746	Cross-Site Request Forgery (CSRF) protection would cease to function for all forms.	1	f	950
4747	`AuthenticationMiddleware` would likely fail to access session data needed to identify and load the logged-in user, resulting in `request.user` often being an `AnonymousUser` even if the user is logged in.	2	t	950
4748	Django would detect this incorrect order at startup and raise an `ImproperlyConfigured` exception.	3	f	950
4749	All user sessions would become immediately invalidated and disabled, preventing logins.	4	f	950
4750	The Django administrative interface would become completely inaccessible, raising a 500 error.	5	f	950
4751	It specifies the path to a JavaScript file that handles client-side ASGI communication.	1	f	951
4752	It configures the middleware stack specifically for WebSocket connections, bypassing standard HTTP middleware.	2	f	951
4753	It defines the maximum number of concurrent ASGI connections the server can handle.	3	f	951
4754	It lists all Django apps that are compatible with ASGI.	4	f	951
4755	It points to the root ASGI application object, which ASGI servers (like Daphne or Uvicorn) use as the entry point for handling asynchronous connections.	5	t	951
4756	Storing passwords in a separate, encrypted file system.	1	f	952
4757	Using Base64 encoding for all passwords.	2	f	952
4758	One-way hashing with salting and iterations (e.g., using PBKDF2 or Argon2).	3	t	952
4759	Two-way encryption using the project's `SECRET_KEY`.	4	f	952
4760	Relying on database-level encryption features only.	5	f	952
4761	A manual JavaScript call like <code>Alpine.start()</code> must be triggered after every HTMX swap to initialize new components.	1	f	953
4762	The <code>x-data</code> scope from the parent page is automatically inherited, potentially causing conflicts.	2	f	953
4763	HTMX first converts Alpine.js directives into plain JavaScript before swapping the content.	3	f	953
4764	Alpine.js automatically initializes these new components when they are swapped into the DOM, making them functional.	4	t	953
4765	Alpine.js directives in HTMX-loaded partials are ignored, and client-side interactivity must be handled by HTMX events only.	5	f	953
4766	HTMX automatically injects <code>x-for</code> directives into the fetched JSON.	1	f	954
4767	An HTMX event listener (e.g., <code>htmx:afterSwap</code> or a custom event) updates an Alpine data array, which <code>x-for</code> then reactively renders.	2	t	954
4768	<code>x-for</code> can only iterate over data defined at page load, not dynamic data.	3	f	954
4769	<code>x-for</code> directly makes an AJAX call to fetch the JSON array.	4	f	954
4770	Django templates automatically convert JSON into <code>x-for</code> loops.	5	f	954
4771	To ensure the decorator can only be applied to functions and not class methods.	1	f	955
4772	To execute the original function multiple times with different parameters.	2	f	955
4773	To automatically handle any arguments (<code>*args</code>, <code>**kwargs</code>) passed to the decorated function.	3	f	955
4774	To preserve the metadata (like <code>__name__</code> and <code>__doc__</code>) of the original function being decorated, making the decorated function behave more like the original for introspection.	4	t	955
4775	To allow the decorator to modify the return value of the original function.	5	f	955
4776	Applied from top-down; executed from top-down.	1	f	956
4777	The order does not matter as decorators are executed asynchronously.	2	f	956
4778	Applied from bottom-up; executed from bottom-up (innermost wrapper first).	3	f	956
4779	Applied from bottom-up (closest to function definition first); executed from top-down (outermost wrapper first for request processing).	4	t	956
4780	Applied alphabetically by decorator name; executed in the same alphabetical order.	5	f	956
\.


--
-- Data for Name: multi_choice_quiz_question; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.multi_choice_quiz_question (id, text, chapter_no, tag, "position", created_at, updated_at, is_active, quiz_id, topic_id) FROM stdin;
1	In a Django view handling a form submission (e.g., in `signup_view` or `edit_profile_view`), what is the primary outcome of calling the `is_valid()` method on a form instance?	1	Form Validation	1	2025-05-14 11:16:10.34839+00	2025-05-14 11:16:10.348405+00	t	1	1
2	In the Django admin, what is the purpose of using an `InlineModelAdmin` class, such as `admin.TabularInline` or `admin.StackedInline`?	1	InlineModelAdmin	2	2025-05-14 11:16:10.348427+00	2025-05-14 11:16:10.348431+00	t	1	1
3	In a Django app's `urls.py` file, what is the primary purpose of defining the `app_name` variable (e.g., `app_name = "multi_choice_quiz"`)?	1	URL Namespacing, app_name	3	2025-05-14 11:16:10.348446+00	2025-05-14 11:16:10.34845+00	t	1	1
4	In Django templates, what is the main advantage of using the `{% url 'namespace:name' %}` tag instead of hardcoding URLs like `/path/to/view/`?	1	URL Tag	4	2025-05-14 11:16:10.348464+00	2025-05-14 11:16:10.348467+00	t	1	1
5	In the Django ORM, what does the `filter()` method on a queryset typically return?	1	QuerySet Filter	5	2025-05-14 11:16:10.348481+00	2025-05-14 11:16:10.348484+00	t	1	1
6	In a Django model, if `Quiz` has a `ManyToManyField` to `Topic` (related_name="quizzes"), how can you retrieve all quizzes associated with a specific topic instance `my_topic`?	1	ManyToManyField Reverse Access	6	2025-05-14 11:16:10.348498+00	2025-05-14 11:16:10.348501+00	t	1	1
7	What is the primary purpose of `django.contrib.auth.get_user_model()` in a Django project?	1	User Model	7	2025-05-14 11:16:10.348514+00	2025-05-14 11:16:10.348517+00	t	1	1
8	What is the purpose of the `Paginator` class in Django, as used in views like the `quizzes` view in `pages/views.py`?	1	Paginator	8	2025-05-14 11:16:10.348531+00	2025-05-14 11:16:10.348534+00	t	1	1
9	In `conftest.py`, the `admin_logged_in_page` fixture uses `User.objects.update_or_create()`. What is the behavior of this Django ORM method?	1	Update Or Create	9	2025-05-14 11:16:10.348547+00	2025-05-14 11:16:10.34855+00	t	1	1
10	What is the purpose of the `JSONField` used in `multi_choice_quiz/models.py` for the `QuizAttempt.attempt_details` field?	1	JSONField	10	2025-05-14 11:16:10.348563+00	2025-05-14 11:16:10.348566+00	t	1	1
11	What is the role of `{% csrf_token %}` in a Django template form?	1	{% csrf_token %}	11	2025-05-14 11:16:10.348578+00	2025-05-14 11:16:10.348582+00	t	1	1
12	In Django models, what is the `related_name` attribute used for in a `ForeignKey` or `ManyToManyField`?	1	related_name	12	2025-05-14 11:16:10.348594+00	2025-05-14 11:16:10.348597+00	t	1	1
13	In Django templates, such as `pages/templates/pages/profile.html`, what is the primary function of the `{% url %}` template tag (e.g., `{% url 'pages:edit_profile' %}`)?	1	URL Tag	13	2025-05-14 11:16:10.34861+00	2025-05-14 11:16:10.348613+00	t	1	1
14	In Django models, how does a `ManyToManyField` represent a relationship between two models?	1	ManyToManyField	14	2025-05-14 11:16:10.348625+00	2025-05-14 11:16:10.348628+00	t	1	1
15	What is the primary role of the `prepopulated_fields` attribute in a Django `ModelAdmin` class, often used for slug fields?	1	prepopulated_fields	15	2025-05-14 11:16:10.348641+00	2025-05-14 11:16:10.348644+00	t	1	1
16	In Django forms processing, what does calling `form.is_valid()` primarily achieve?	1	Form Validation	16	2025-05-14 11:16:10.348659+00	2025-05-14 11:16:10.348662+00	t	1	1
17	What is the role of `whitenoise.middleware.WhiteNoiseMiddleware` in a Django application, as configured in `core/settings.py`?	1	WhiteNoise Middleware	17	2025-05-14 11:16:10.348675+00	2025-05-14 11:16:10.348678+00	t	1	1
18	In a Django view that processes a POST request, how can you ensure that the view only responds to POST requests and returns an error for other methods like GET?	1	@require_POST	18	2025-05-14 11:16:10.34869+00	2025-05-14 11:16:10.348693+00	t	1	1
19	What functionality does the `list_filter` attribute in a Django `ModelAdmin` class provide?	1	list_filter	19	2025-05-14 11:16:10.348706+00	2025-05-14 11:16:10.348709+00	t	1	1
20	When handling a form submission in a Django view, what is the typical sequence of operations after instantiating the form with `request.POST`?	1	Form Handling in Views	20	2025-05-14 11:16:10.348721+00	2025-05-14 11:16:10.348724+00	t	1	1
21	In Django, what is the purpose of the `{% extends %}` template tag?	1	{% extends %}	1	2025-05-14 11:16:12.294626+00	2025-05-14 11:16:12.294651+00	t	2	1
22	What is the purpose of `on_delete=models.CASCADE` when defining a `ForeignKey` in a Django model?	1	on_delete=CASCADE	2	2025-05-14 11:16:12.294671+00	2025-05-14 11:16:12.294674+00	t	2	1
23	In Django, what is the main function of the `@login_required` decorator when applied to a view?	1	View Decorators	3	2025-05-14 11:16:12.294688+00	2025-05-14 11:16:12.294691+00	t	2	1
24	In Django templates, what is the primary purpose of the `{% url %}` template tag?	1	{% url %}	4	2025-05-14 11:16:12.294704+00	2025-05-14 11:16:12.294708+00	t	2	1
25	In `pages/forms.py`, `SignUpForm` inherits from `django.contrib.auth.forms.UserCreationForm`. What is a primary benefit of using `UserCreationForm`?	1	UserCreationForm	5	2025-05-14 11:16:12.294721+00	2025-05-14 11:16:12.294724+00	t	2	1
26	What is the primary purpose of `os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')` in Django's `manage.py` or `wsgi.py`?	1	os.environ.setdefault	6	2025-05-14 11:16:12.294738+00	2025-05-14 11:16:12.294741+00	t	2	1
27	What is the main purpose of a `ManyToManyField` in Django models, such as `Quiz.topics = models.ManyToManyField(Topic, ...)`?	1	ManyToManyField	7	2025-05-14 11:16:12.294754+00	2025-05-14 11:16:12.294758+00	t	2	1
28	In Django models, what is the purpose of `on_delete=models.CASCADE` for a `ForeignKey` field?	1	ForeignKey on_delete	8	2025-05-14 11:16:12.29477+00	2025-05-14 11:16:12.294774+00	t	2	1
29	What is the purpose of the Django messages framework (e.g., `messages.success(request, "...")`) often used in views?	1	Messages Framework	9	2025-05-14 11:16:12.294785+00	2025-05-14 11:16:12.294789+00	t	2	1
30	In a Django management command, what is the primary purpose of the `handle(self, *args, **options)` method?	1	BaseCommand Handle Method	10	2025-05-14 11:16:12.294817+00	2025-05-14 11:16:12.294821+00	t	2	1
31	What is the purpose of `django-environ` library as used in `core/settings.py`?	1	django-environ	11	2025-05-14 11:16:12.294834+00	2025-05-14 11:16:12.294837+00	t	2	1
32	In Django models, what is the primary effect of specifying `on_delete=models.CASCADE` for a `ForeignKey` field?	1	ForeignKey on_delete	12	2025-05-14 11:16:12.294849+00	2025-05-14 11:16:12.294852+00	t	2	1
33	When writing a standalone Python script that needs to interact with Django models (e.g., like `dir_import_chapter_quizzes.py`), what is the essential step to initialize the Django settings and applications?	1	Django Setup	13	2025-05-14 11:16:12.294865+00	2025-05-14 11:16:12.294868+00	t	2	1
34	When customizing the Django admin for a model, what is the role of a class that inherits from `django.contrib.admin.ModelAdmin`?	1	ModelAdmin	14	2025-05-14 11:16:12.29488+00	2025-05-14 11:16:12.294883+00	t	2	1
35	What is the primary use case for `JSONField` in Django models?	1	JSONField	15	2025-05-14 11:16:12.294898+00	2025-05-14 11:16:12.294901+00	t	2	1
36	What does the `is_authenticated` attribute of a Django `User` object (e.g., `request.user.is_authenticated`) primarily indicate?	1	User Attributes	16	2025-05-14 11:16:12.294914+00	2025-05-14 11:16:12.294917+00	t	2	1
37	What is the role of the `@login_required` decorator in Django views?	1	@login_required	17	2025-05-14 11:16:12.294929+00	2025-05-14 11:16:12.294932+00	t	2	1
38	Which Django shortcut function is commonly used in a view to render a template with a given context dictionary and return an `HttpResponse` object?	1	render()	18	2025-05-14 11:16:12.294944+00	2025-05-14 11:16:12.294948+00	t	2	1
39	In a Django Function-Based View (FBV), what is the primary role of the `request` object passed as the first argument to the view function?	1	Function-Based View (FBV)	19	2025-05-14 11:16:12.29496+00	2025-05-14 11:16:12.294963+00	t	2	1
40	What is the primary purpose of the `django.shortcuts.render()` function in a Django view?	1	render()	20	2025-05-14 11:16:12.294975+00	2025-05-14 11:16:12.294978+00	t	2	1
41	In Django models, what is the fundamental purpose of a `models.ForeignKey` field?	1	ForeignKey Field	1	2025-05-14 11:16:13.79943+00	2025-05-14 11:16:13.799444+00	t	3	1
42	In Django, what is the primary behavior of the `@login_required` decorator when applied to a view function?	1	@login_required, Decorators	2	2025-05-14 11:16:13.799463+00	2025-05-14 11:16:13.799466+00	t	3	1
43	What is the primary purpose of `os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')` in Django project files like `manage.py` or `wsgi.py`?	1	os.environ.setdefault	3	2025-05-14 11:16:13.79948+00	2025-05-14 11:16:13.799483+00	t	3	1
44	What is the purpose of a `models.ManyToManyField` in a Django model, such as `Quiz.topics` or `UserCollection.quizzes`?	1	ManyToManyField	4	2025-05-14 11:16:13.799497+00	2025-05-14 11:16:13.7995+00	t	3	1
45	What is the purpose of the `whitenoise.storage.CompressedManifestStaticFilesStorage` setting for `STATICFILES_STORAGE` in a Django project?	1	Whitenoise Storage	5	2025-05-14 11:16:13.799512+00	2025-05-14 11:16:13.799516+00	t	3	1
46	In `pages/views.py`, the `profile_view` is decorated with `@login_required`. What is the effect of this decorator?	1	@login_required Decorator	6	2025-05-14 11:16:13.799529+00	2025-05-14 11:16:13.799533+00	t	3	1
47	What is the general role of a WSGI (Web Server Gateway Interface) or ASGI (Asynchronous Server Gateway Interface) server like Gunicorn or Uvicorn when deploying a Django application?	1	WSGI/ASGI Server	7	2025-05-14 11:16:13.799545+00	2025-05-14 11:16:13.799548+00	t	3	1
48	What is the primary role of the `INSTALLED_APPS` setting in a Django project's `settings.py` file?	1	INSTALLED_APPS	8	2025-05-14 11:16:13.799561+00	2025-05-14 11:16:13.799564+00	t	3	1
49	How does the `django-environ` library, as used in `core/settings.py` with `env = environ.Env()`, typically help manage sensitive configurations like `SECRET_KEY` or database credentials across different environments (development, production)?	1	django-environ	9	2025-05-14 11:16:13.799576+00	2025-05-14 11:16:13.799579+00	t	3	1
50	How are context variables, such as `{{ user.username }}`, made available and rendered in a Django template?	1	Context Variables	10	2025-05-14 11:16:13.799591+00	2025-05-14 11:16:13.799595+00	t	3	1
51	What is the primary role of `django.setup()` when used in a standalone Python script that interacts with a Django project?	1	django.setup()	11	2025-05-14 11:16:13.799607+00	2025-05-14 11:16:13.79961+00	t	3	1
52	The `add_arguments(self, parser)` method in a Django management command is used for what purpose?	1	Add Arguments	12	2025-05-14 11:16:13.799622+00	2025-05-14 11:16:13.799625+00	t	3	1
53	In `pages/models.py`, the `SystemCategory` model has a `slug` field with `blank=True` and custom logic in its `save()` method to auto-populate it using `slugify(self.name)`. What is the primary purpose of a "slug" in web applications?	1	SlugField	13	2025-05-14 11:16:13.799637+00	2025-05-14 11:16:13.79964+00	t	3	1
54	What is the behavior of Django's `get_object_or_404()` shortcut function if the requested object, based on the provided model and lookup parameters, is not found in the database?	1	get_object_or_404	14	2025-05-14 11:16:13.799652+00	2025-05-14 11:16:13.799655+00	t	3	1
55	In Django templates, what is the primary function of the `{% verbatim %}{% url %}{% endverbatim %}` template tag?	1	{% verbatim %}{% url %}{% endverbatim %} tag	15	2025-05-14 11:16:13.799667+00	2025-05-14 11:16:13.79967+00	t	3	1
56	In a Django model's `Meta` class, what does the `unique_together` option achieve?	1	unique_together	16	2025-05-14 11:16:13.799682+00	2025-05-14 11:16:13.799685+00	t	3	1
57	In a custom Django management command, what is the role of the `handle(self, *args, **options)` method?	1	handle method	17	2025-05-14 11:16:13.799697+00	2025-05-14 11:16:13.799701+00	t	3	1
58	What is a primary advantage of using Django's `models.JSONField` for an attribute in a model like `QuizAttempt.attempt_details`?	1	JSONField	18	2025-05-14 11:16:13.799713+00	2025-05-14 11:16:13.799717+00	t	3	1
59	In Django views, what is the primary function of `get_object_or_404()`, as used in `select_collection_for_quiz_view`?	1	get_object_or_404	19	2025-05-14 11:16:13.799728+00	2025-05-14 11:16:13.799732+00	t	3	1
60	In Django models, what does `auto_now_add=True` on a `DateTimeField` signify?	1	DateTimeField auto_now_add	20	2025-05-14 11:16:13.799744+00	2025-05-14 11:16:13.799747+00	t	3	1
61	In a Django view function, when would you typically access `request.POST` data instead of `request.GET` data?	1	request.POST, request.GET	1	2025-05-14 11:16:15.296447+00	2025-05-14 11:16:15.296462+00	t	4	1
62	In Django models, what does `models.ForeignKey` represent?	1	ForeignKey Field	2	2025-05-14 11:16:15.296481+00	2025-05-14 11:16:15.296485+00	t	4	1
63	What is the purpose of the `ordering` attribute in a Django model's `Meta` class?	1	Model Meta Ordering	3	2025-05-14 11:16:15.296499+00	2025-05-14 11:16:15.296502+00	t	4	1
64	What is the primary function of `get_object_or_404()` in Django views?	1	get_object_or_404	4	2025-05-14 11:16:15.296515+00	2025-05-14 11:16:15.296519+00	t	4	1
65	What is the primary purpose of Django's `JSONField` in a model, as seen in `QuizAttempt.attempt_details`?	1	JSONField	5	2025-05-14 11:16:15.296532+00	2025-05-14 11:16:15.296535+00	t	4	1
66	If you define `search_fields = ['title', 'description']` in a Django `ModelAdmin`, what does this enable in the admin interface for that model?	1	search_fields	6	2025-05-14 11:16:15.296548+00	2025-05-14 11:16:15.296551+00	t	4	1
67	What is the primary purpose of the `django-environ` library in a Django project?	1	django-environ	7	2025-05-14 11:16:15.296564+00	2025-05-14 11:16:15.296567+00	t	4	1
68	What does `on_delete=models.CASCADE` signify for a `ForeignKey` field in a Django model?	1	on_delete CASCADE	8	2025-05-14 11:16:15.296579+00	2025-05-14 11:16:15.296582+00	t	4	1
69	In Django Template Language (DTL), what is the primary purpose of the `{% extends %}` and `{% block %}` tags?	1	Template Inheritance	9	2025-05-14 11:16:15.296595+00	2025-05-14 11:16:15.296598+00	t	4	1
70	In Django's ORM, what is the main benefit of using `bulk_create()` when adding multiple model instances, as seen in `multi_choice_quiz/utils.py`?	1	bulk_create()	10	2025-05-14 11:16:15.296611+00	2025-05-14 11:16:15.296614+00	t	4	1
71	What is the effect of applying the `@login_required` decorator to a Django view function, as seen with `profile_view`?	1	login_required Decorator	11	2025-05-14 11:16:15.296627+00	2025-05-14 11:16:15.29663+00	t	4	1
72	In Django models, what kind of database relationship does a `ManyToManyField` typically represent?	1	ManyToManyField	12	2025-05-14 11:16:15.296642+00	2025-05-14 11:16:15.296645+00	t	4	1
73	In a Django `ModelAdmin` class, what is the purpose of the `list_display` attribute?	1	list_display	13	2025-05-14 11:16:15.296658+00	2025-05-14 11:16:15.296661+00	t	4	1
74	In Django models, what does `auto_now_add=True` on a `DateTimeField` signify?	1	DateTimeField auto_now_add	14	2025-05-14 11:16:15.296673+00	2025-05-14 11:16:15.296676+00	t	4	1
75	What is the primary behavior of Django's `get_object_or_404()` shortcut function?	1	ORM Shortcuts	15	2025-05-14 11:16:15.296689+00	2025-05-14 11:16:15.296692+00	t	4	1
76	What is the main purpose of the `@login_required` decorator in Django views, such as in `pages/views.py` for `profile_view`?	1	@login_required	16	2025-05-14 11:16:15.296705+00	2025-05-14 11:16:15.29671+00	t	4	1
77	What is the primary significance of the `ROOT_URLCONF` setting in a Django project's `settings.py` file?	1	ROOT_URLCONF, settings.py	17	2025-05-14 11:16:15.296724+00	2025-05-14 11:16:15.296727+00	t	4	1
78	Within Django's `settings.LOGGING` dictionary, what is typically defined in the 'handlers' section?	1	Logging, settings.py	18	2025-05-14 11:16:15.296739+00	2025-05-14 11:16:15.296742+00	t	4	1
79	What is the security implication of the `ALLOWED_HOSTS` setting in Django, especially in a production environment?	1	ALLOWED_HOSTS	19	2025-05-14 11:16:15.296754+00	2025-05-14 11:16:15.296757+00	t	4	1
80	What is the behavior of a `DateTimeField` in a Django model when `auto_now_add=True` is set?	1	auto_now_add	20	2025-05-14 11:16:15.296769+00	2025-05-14 11:16:15.296773+00	t	4	1
81	What is the primary function of the `@pytest.mark.django_db` decorator in `pytest-django`?	2	@pytest.mark.django_db	1	2025-05-14 11:16:17.11526+00	2025-05-14 11:16:17.115275+00	t	5	2
82	What is the purpose of `page.on("console", handle_console_function)` in a Playwright test script?	2	Playwright Console Events	2	2025-05-14 11:16:17.115295+00	2025-05-14 11:16:17.115299+00	t	5	2
83	The `admin_logged_in_page` fixture in `conftest.py` uses `User.objects.update_or_create()` and `UserCollection.objects.get_or_create()`. What is a key benefit of using these methods in test fixtures?	2	Idempotent Fixtures	3	2025-05-14 11:16:17.115314+00	2025-05-14 11:16:17.115317+00	t	5	2
84	In `pytest-django`, what is the `live_server` fixture primarily used for?	2	live_server fixture	4	2025-05-14 11:16:17.11533+00	2025-05-14 11:16:17.115333+00	t	5	2
85	In Pytest, what does the `scope="function"` argument signify when defining a fixture?	2	Fixture Scope	5	2025-05-14 11:16:17.115346+00	2025-05-14 11:16:17.11535+00	t	5	2
86	While `pytest` can run Django `TestCase` subclasses, what is a key difference often seen when writing tests purely in `pytest` style for Django?	2	TestCase vs Pytest	6	2025-05-14 11:16:17.115363+00	2025-05-14 11:16:17.115367+00	t	5	2
87	In Python scripts that perform file operations or external calls, how does `unittest.mock.patch` (or its variants) assist in testing and debugging?	2	unittest.mock	7	2025-05-14 11:16:17.115379+00	2025-05-14 11:16:17.115382+00	t	5	2
88	What is the primary benefit of using `data-testid` attributes in HTML elements for end-to-end testing with tools like Playwright?	2	data-testid attribute	8	2025-05-14 11:16:17.115394+00	2025-05-14 11:16:17.115397+00	t	5	2
89	In a Pytest `conftest.py` file, what is the role of a fixture like `capture_console_errors` that interacts with Playwright's `page.on('console', ...)`?	2	Playwright Console Capture	9	2025-05-14 11:16:17.115409+00	2025-05-14 11:16:17.115412+00	t	5	2
90	In Playwright, what action does `page.locator("#username").fill("testuser")` perform?	2	Playwright fill	10	2025-05-14 11:16:17.115425+00	2025-05-14 11:16:17.115428+00	t	5	2
91	What is the primary benefit of using a utility function like `setup_test_logging` as seen in `multi_choice_quiz/tests/test_logging.py` for test environments?	2	Test Logging Setup	11	2025-05-14 11:16:17.11544+00	2025-05-14 11:16:17.115443+00	t	5	2
92	What is the role of `unittest.mock.patch` in Python testing, as seen in `test_dir_import_chapter_quizzes.py`?	2	unittest.mock.patch	12	2025-05-14 11:16:17.115455+00	2025-05-14 11:16:17.115458+00	t	5	2
93	In Playwright, what is the primary function of `page.locator()`?	2	page.locator()	13	2025-05-14 11:16:17.115471+00	2025-05-14 11:16:17.115474+00	t	5	2
94	How does using `page.screenshot()` in a Playwright test, especially on failure, aid in debugging E2E tests?	2	Playwright Screenshots	14	2025-05-14 11:16:17.115486+00	2025-05-14 11:16:17.115489+00	t	5	2
95	In `pytest-django`, what does the `live_server` fixture primarily provide for end-to-end testing?	2	Pytest live_server	15	2025-05-14 11:16:17.115502+00	2025-05-14 11:16:17.115524+00	t	5	2
96	When testing a Python script that parses command-line arguments using `sys.argv`, what is a common approach using `unittest.mock.patch`?	2	Mocking sys.argv	16	2025-05-14 11:16:17.115537+00	2025-05-14 11:16:17.11554+00	t	5	2
97	In Django testing with `pytest-django`, what is the significance of the `@pytest.mark.django_db` marker?	2	pytest.mark.django_db	17	2025-05-14 11:16:17.115552+00	2025-05-14 11:16:17.115556+00	t	5	2
98	In the Pytest E2E tests (e.g., `test_database_quiz.py`), what is the primary function of the `live_server` fixture provided by `pytest-django`?	2	live_server fixture	18	2025-05-14 11:16:17.115568+00	2025-05-14 11:16:17.115571+00	t	5	2
99	What is the purpose of the `live_server` fixture provided by `pytest-django`?	2	Pytest live_server	19	2025-05-14 11:16:17.115583+00	2025-05-14 11:16:17.115586+00	t	5	2
100	What is the `live_server` fixture provided by `pytest-django` primarily used for in testing?	2	live_server fixture	20	2025-05-14 11:16:17.115598+00	2025-05-14 11:16:17.115602+00	t	5	2
101	In `multi_choice_quiz/tests/test_responsive.py`, Playwright's `page.set_viewport_size(viewport)` is used. What is the primary purpose of this function in the context of responsive web testing?	2	Viewport Simulation	1	2025-05-14 11:16:19.351094+00	2025-05-14 11:16:19.35111+00	t	6	3
102	In `pytest-django`, what is the effect of using the `@pytest.mark.django_db` marker on a test function?	2	pytest.mark.django_db	2	2025-05-14 11:16:19.351128+00	2025-05-14 11:16:19.351132+00	t	6	3
103	In Pytest, what is a primary benefit of using fixtures (e.g., defined with `@pytest.fixture`)?	2	Pytest Fixtures	3	2025-05-14 11:16:19.351146+00	2025-05-14 11:16:19.35115+00	t	6	3
104	In Pytest, what is the purpose of a fixture decorated with `@pytest.fixture`?	2	@pytest.fixture	4	2025-05-14 11:16:19.351164+00	2025-05-14 11:16:19.351167+00	t	6	3
105	In Playwright, what is the main advantage of using `expect(locator).to_be_visible()` over manually checking an element's display style?	2	Playwright Expect	5	2025-05-14 11:16:19.351182+00	2025-05-14 11:16:19.351187+00	t	6	3
106	In Pytest, what is the primary role of the `live_server` fixture provided by `pytest-django`?	2	live_server fixture	6	2025-05-14 11:16:19.3512+00	2025-05-14 11:16:19.351203+00	t	6	3
107	In Pytest, what is the main role of a fixture, such as `admin_logged_in_page` defined in `conftest.py`?	2	Pytest Fixtures	7	2025-05-14 11:16:19.351216+00	2025-05-14 11:16:19.351219+00	t	6	3
108	What is the primary purpose of the `client` fixture provided by `pytest-django`?	2	Pytest-Django Client	8	2025-05-14 11:16:19.351232+00	2025-05-14 11:16:19.351236+00	t	6	3
109	In Pytest, when testing a Django application with Playwright, what is the role of the `live_server` fixture, as used in `test_database_quiz.py`?	2	live_server fixture	9	2025-05-14 11:16:19.351248+00	2025-05-14 11:16:19.351252+00	t	6	3
110	When testing a Python script that interacts with the file system, like `dir_import_chapter_quizzes.py` which reads `.pkl` files from a directory, what is a key principle for ensuring tests are isolated and do not affect the actual project files? (Consider practices from `TESTING_GUIDE.md` and `test_dir_import_chapter_quizzes.py`)	2	Mocking File System	10	2025-05-14 11:16:19.351265+00	2025-05-14 11:16:19.351268+00	t	6	3
111	Conceptually, how does HTMX differ from client-side JavaScript frameworks like Alpine.js, React, or Vue in its approach to updating web pages?	3	HTMX Principles	1	2025-05-14 11:16:21.164621+00	2025-05-14 11:16:21.164635+00	t	7	4
112	In Alpine.js, what is the `x-data` directive primarily used for, as seen in `multi_choice_quiz/index.html`?	3	Alpine.js x-data	2	2025-05-14 11:16:21.164655+00	2025-05-14 11:16:21.164659+00	t	7	4
113	In JavaScript, what does `window.sessionStorage` provide?	3	sessionStorage	3	2025-05-14 11:16:21.164673+00	2025-05-14 11:16:21.164676+00	t	7	4
114	If you were to use HTMX to handle form submissions in a Django application (e.g., a form in `pages/templates/pages/edit_profile.html`), what would an HTMX attribute like `hx-post` typically point to?	3	HTMX and Django Forms	4	2025-05-14 11:16:21.16469+00	2025-05-14 11:16:21.164693+00	t	7	4
115	In Alpine.js, what is the `x-data` directive typically used for?	3	Alpine.js x-data	5	2025-05-14 11:16:21.164706+00	2025-05-14 11:16:21.16471+00	t	7	4
116	When using the JavaScript `fetch` API to make a POST request with a JSON payload, which of the following `headers` is typically required for the server to correctly interpret the body?	3	Fetch API	6	2025-05-14 11:16:21.164723+00	2025-05-14 11:16:21.164726+00	t	7	4
117	What is the purpose of the `x-init` directive in Alpine.js, as seen in `multi_choice_quiz/templates/multi_choice_quiz/index.html`?	3	x-init	7	2025-05-14 11:16:21.164739+00	2025-05-14 11:16:21.164742+00	t	7	4
118	In a Django PWA (Progressive Web App) setup, as indicated by settings like `PWA_APP_NAME` and `PWA_APP_ICONS` in `core/settings.py`, what is the typical purpose of the `PWA_APP_NAME` setting?	3	PWA Configuration, settings.py	8	2025-05-14 11:16:21.164762+00	2025-05-14 11:16:21.164766+00	t	7	4
119	In Alpine.js, what is the `x-data` directive primarily used for?	3	x-data directive	9	2025-05-14 11:16:21.164779+00	2025-05-14 11:16:21.164783+00	t	7	4
120	What is the primary role of the `x-data` directive in Alpine.js?	3	x-data	10	2025-05-14 11:16:21.164796+00	2025-05-14 11:16:21.164799+00	t	7	4
121	In an Alpine.js component, what is the primary role of the `x-data` directive?	3	Alpine.js x-data	11	2025-05-14 11:16:21.164835+00	2025-05-14 11:16:21.164839+00	t	7	4
122	In the context of `multi_choice_quiz/static/multi_choice_quiz/app.js` and its corresponding template, what is the role of the `x-data` attribute in an HTML element when using Alpine.js?	3	x-data directive	12	2025-05-14 11:16:21.164852+00	2025-05-14 11:16:21.164855+00	t	7	4
123	The `pages/templates/pages/base.html` uses Alpine.js directives like `x-data="{ open: false }"` and `@click="open = !open"` for the mobile menu. What is the general purpose of `x-data` in Alpine.js?	3	Alpine.js x-data	13	2025-05-14 11:16:21.164868+00	2025-05-14 11:16:21.164871+00	t	7	4
124	What is `JSON.stringify()` commonly used for in JavaScript when interacting with APIs?	3	JSON.stringify()	14	2025-05-14 11:16:21.164884+00	2025-05-14 11:16:21.164887+00	t	7	4
125	In Alpine.js, what is the primary role of the `x-data` directive when applied to an HTML element?	3	Alpine.js State	15	2025-05-14 11:16:21.1649+00	2025-05-14 11:16:21.164903+00	t	7	4
126	In JavaScript, what is the purpose of the `fetch` API?	3	Fetch API	16	2025-05-14 11:16:21.164916+00	2025-05-14 11:16:21.164919+00	t	7	4
127	In `multi_choice_quiz/static/multi_choice_quiz/app.js`, the `quizApp` function returns an object. In the context of Alpine.js, what does this returned object represent?	3	Component Definition	17	2025-05-14 11:16:21.164931+00	2025-05-14 11:16:21.164935+00	t	7	4
128	In Alpine.js, as used in `multi_choice_quiz/static/multi_choice_quiz/app.js`, what is the primary purpose of the `x-data` directive on an HTML element?	3	x-data directive	18	2025-05-14 11:16:21.164947+00	2025-05-14 11:16:21.16495+00	t	7	4
129	The `multi_choice_quiz/static/multi_choice_quiz/app.js` file uses `fetch()` to submit quiz results to `/quiz/submit_attempt/`. What HTTP method is typically used with `fetch()` for sending data to a server to create or update a resource?	3	Fetch API POST	19	2025-05-14 11:16:21.164962+00	2025-05-14 11:16:21.164966+00	t	7	4
130	In JavaScript, what is the primary function of `JSON.parse()`?	3	JSON.parse	20	2025-05-14 11:16:21.164978+00	2025-05-14 11:16:21.164981+00	t	7	4
131	What is the primary purpose of a `try-except` block in Python, as seen in various parts of the codebase (e.g., import scripts, views)?	4	Try-Except Block	1	2025-05-14 11:16:22.984107+00	2025-05-14 11:16:22.984122+00	t	8	5
132	When using `pathlib.Path` in Python, as seen in `dir_import_chapter_quizzes.py`, what is an advantage of using the `/` operator for joining path segments (e.g., `project_root / "some_dir"`)?	4	pathlib.Path	2	2025-05-14 11:16:22.984141+00	2025-05-14 11:16:22.984145+00	t	8	5
133	When using Python's `pathlib.Path` object, what is a common and recommended way to join path segments to construct a new path?	4	Pathlib Module	3	2025-05-14 11:16:22.984158+00	2025-05-14 11:16:22.984162+00	t	8	5
134	The `setup_test_logging` function in `multi_choice_quiz/tests/test_logging.py` configures a logger with both a `FileHandler` and a `StreamHandler`. What is the typical behavior of these two handlers in Python's `logging` module?	4	Logging Handlers	4	2025-05-14 11:16:22.984175+00	2025-05-14 11:16:22.984179+00	t	8	5
135	What is a key advantage of using `pathlib.Path` objects in Python for file system path manipulation compared to string-based path operations?	4	pathlib.Path	5	2025-05-14 11:16:22.984192+00	2025-05-14 11:16:22.984195+00	t	8	5
136	In Python's `pathlib` module, what does the `Path.glob()` method typically return?	4	pathlib.Path.glob	6	2025-05-14 11:16:22.984208+00	2025-05-14 11:16:22.984212+00	t	8	5
137	In Python's `logging` module, what is the role of a `Handler` (e.g., `FileHandler`, `StreamHandler`)?	4	Logging Handlers	7	2025-05-14 11:16:22.984224+00	2025-05-14 11:16:22.984228+00	t	8	5
138	In Python's `logging` module, what is the common effect of calling `logging.getLogger(__name__)`?	4	logging.getLogger	8	2025-05-14 11:16:22.98424+00	2025-05-14 11:16:22.984244+00	t	8	5
139	What is a key advantage of using `pathlib.Path` objects for file system operations in Python, as seen in `dir_import_chapter_quizzes.py`?	4	pathlib.Path	9	2025-05-14 11:16:22.984256+00	2025-05-14 11:16:22.98426+00	t	8	5
140	What is the primary purpose of using `pathlib.Path` in Python, as seen in `core/settings.py` for defining `BASE_DIR`?	4	pathlib.Path	10	2025-05-14 11:16:22.984272+00	2025-05-14 11:16:22.984275+00	t	8	5
141	In Python's `logging` module, what is the typical use of `logging.getLogger(__name__)`?	4	Logging Module	11	2025-05-14 11:16:22.984288+00	2025-05-14 11:16:22.984291+00	t	8	5
142	What is the primary purpose of a `try-except` block in Python, as seen in `dir_import_chapter_quizzes.py`?	4	Try-Except Block	12	2025-05-14 11:16:22.984303+00	2025-05-14 11:16:22.984307+00	t	8	5
143	What is the primary purpose of the `pd.read_pickle()` function from the Pandas library, as used in `multi_choice_quiz/management/commands/import_quiz_bank.py`?	5	pd.read_pickle	1	2025-05-14 11:16:24.799237+00	2025-05-14 11:16:24.799251+00	t	9	6
144	The `load_quiz_bank` function in `multi_choice_quiz/utils.py` reads data using `pd.read_pickle()`. What is a primary characteristic of data stored in Pickle (`.pkl`) format?	5	Pandas Read Pickle	2	2025-05-14 11:16:24.79927+00	2025-05-14 11:16:24.799274+00	t	9	6
145	The `dir_import_chapter_quizzes.py` script uses `pandas` to read `.pkl` files. What is a `.pkl` file in the context of Python and Pandas?	5	Pickle Files (Pandas)	3	2025-05-14 11:16:24.799288+00	2025-05-14 11:16:24.799291+00	t	9	6
146	The `import_from_dataframe` function in `multi_choice_quiz/utils.py` handles DataFrames where the 'options' column might contain a JSON string or a comma-separated string. What is a robust way to parse such a column into a list of strings in Python?	5	String Parsing	4	2025-05-14 11:16:24.799304+00	2025-05-14 11:16:24.799308+00	t	9	6
147	When creating a `Dockerfile` for a Python/Django application intended for Cloud Run, why is it crucial to use a production WSGI server like Gunicorn or Uvicorn instead of Django's built-in development server (`manage.py runserver`)?	1	WSGI Server	1	2025-05-14 11:16:26.61225+00	2025-05-14 11:16:26.612265+00	t	10	7
148	What is the primary purpose of implementing health checks (e.g., a `/healthz` endpoint) in a Cloud Run service?	1	Health Check	2	2025-05-14 11:16:26.612285+00	2025-05-14 11:16:26.612289+00	t	10	7
149	What is a common pitfall associated with Docker image sizes for Cloud Run deployments, and why does it matter?	1	Image Optimization	3	2025-05-14 11:16:26.612303+00	2025-05-14 11:16:26.612306+00	t	10	7
150	In the context of Cloud Run, what does "scale-to-zero" mean?	1	Scale-to-Zero	4	2025-05-14 11:16:26.612319+00	2025-05-14 11:16:26.612322+00	t	10	7
151	According to the provided guide, what is a key advantage of Cloud Run's serverless execution model for Python web applications?	1	Serverless Scaling	5	2025-05-14 11:16:26.612335+00	2025-05-14 11:16:26.612338+00	t	10	7
152	According to the Week 1 guide, what is a key characteristic of Cloud Run's serverless execution model?	1	Serverless Execution	6	2025-05-14 11:16:26.612351+00	2025-05-14 11:16:26.612354+00	t	10	7
153	What is the primary benefit of using Docker containers, as described in the context of deploying Python applications to Cloud Run?	1	Containerization	7	2025-05-14 11:16:26.612366+00	2025-05-14 11:16:26.61237+00	t	10	7
154	What is a common pitfall mentioned regarding `Dockerfile` creation for Python applications deployed to Cloud Run?	1	Dockerfile Optimization	8	2025-05-14 11:16:26.612382+00	2025-05-14 11:16:26.612386+00	t	10	7
155	What is a significant benefit of using multi-stage builds when creating a Dockerfile for a Python/Django application?	1	Dockerfile Optimization Multi-stage Builds	9	2025-05-14 11:16:26.612399+00	2025-05-14 11:16:26.612402+00	t	10	7
156	What is a primary benefit of using Docker containers, as highlighted in the context of deploying Python applications to Cloud Run?	1	Container Fundamentals	10	2025-05-14 11:16:26.612415+00	2025-05-14 11:16:26.612418+00	t	10	7
157	The guide strongly advises against using Django's built-in development server (<code>manage.py runserver</code>) in a Cloud Run container. Why?	1	WSGI Server	11	2025-05-14 11:16:26.61243+00	2025-05-14 11:16:26.612433+00	t	10	7
158	Why is it crucial to use a production WSGI server like Gunicorn or Uvicorn in a Cloud Run container instead of Django's `manage.py runserver` or Flask's development server?	1	WSGI Server Production	12	2025-05-14 11:16:26.612445+00	2025-05-14 11:16:26.612448+00	t	10	7
159	What is the primary benefit of using Docker containers for deploying Python applications, as described in the guide?	1	Container Fundamentals	13	2025-05-14 11:16:26.61246+00	2025-05-14 11:16:26.612463+00	t	10	7
160	What is the main purpose of the Cloud SQL Auth Proxy tool?	2	Auth Proxy	1	2025-05-14 11:16:28.852129+00	2025-05-14 11:16:28.852145+00	t	11	8
161	Why is connection pooling important for web applications like Django connecting to Cloud SQL, especially under load?	2	Connection Pooling	2	2025-05-14 11:16:28.852164+00	2025-05-14 11:16:28.852168+00	t	11	8
162	What is a major security risk associated with hardcoding database credentials directly into application code (e.g., `settings.py`)?	2	Credential Management	3	2025-05-14 11:16:28.852182+00	2025-05-14 11:16:28.852185+00	t	11	8
163	Why is connection pooling important for web applications connecting to a database like Cloud SQL?	2	Connection Pooling Performance	4	2025-05-14 11:16:28.852199+00	2025-05-14 11:16:28.852202+00	t	11	8
164	What is the primary security benefit of using Private IP access for a Cloud SQL instance compared to Public IP?	2	Private IP	5	2025-05-14 11:16:28.852215+00	2025-05-14 11:16:28.852218+00	t	11	8
165	What is the recommended tool, according to the guide, for securely connecting to a Cloud SQL instance (both Private and Public IP) from a local development machine or environments outside the VPC?	2	Cloud SQL Auth Proxy	6	2025-05-14 11:16:28.852231+00	2025-05-14 11:16:28.852234+00	t	11	8
166	When migrating a Django application from SQLite to Cloud SQL PostgreSQL, what is the main advantage offered by Cloud SQL?	2	Managed Database	7	2025-05-14 11:16:28.852247+00	2025-05-14 11:16:28.85225+00	t	11	8
167	The guide mentions connection pooling as important for Cloud SQL performance. What problem does connection pooling primarily solve?	2	Connection Pooling	8	2025-05-14 11:16:28.852263+00	2025-05-14 11:16:28.852266+00	t	11	8
168	Which common pitfall regarding Cloud SQL involves storing database credentials directly in source code (e.g., `settings.py`)?	2	Credential Management Security	9	2025-05-14 11:16:28.852279+00	2025-05-14 11:16:28.852282+00	t	11	8
169	What is the main purpose of the Cloud SQL Auth Proxy?	2	Cloud SQL Auth Proxy	10	2025-05-14 11:16:28.852295+00	2025-05-14 11:16:28.852298+00	t	11	8
170	What is the primary security advantage of configuring a Cloud SQL instance with a Private IP address compared to a Public IP address?	2	Private IP Security	11	2025-05-14 11:16:28.85231+00	2025-05-14 11:16:28.852313+00	t	11	8
171	What is the primary security advantage of configuring Cloud SQL with a Private IP address instead of a Public IP?	2	Private IP vs Public IP	12	2025-05-14 11:16:28.852326+00	2025-05-14 11:16:28.852329+00	t	11	8
172	How does a Service Account typically authenticate when running code directly on GCP compute services like Cloud Run (using the recommended approach)?	3	Service Account Authentication	1	2025-05-14 11:16:30.669746+00	2025-05-14 11:16:30.669761+00	t	12	9
173	When accessing secrets from Secret Manager within a Python application using the `google-cloud-secret-manager` library, what is an efficient access pattern?	3	Secret Access Patterns	2	2025-05-14 11:16:30.669781+00	2025-05-14 11:16:30.669784+00	t	12	9
174	What is the core principle of "Least Privilege" in the context of GCP IAM, as emphasized in Week 3?	3	Least Privilege	3	2025-05-14 11:16:30.669798+00	2025-05-14 11:16:30.669832+00	t	12	9
175	What is a recommended practice for accessing secrets from Secret Manager within a Python application to avoid performance issues?	3	Secret Access Performance	4	2025-05-14 11:16:30.669846+00	2025-05-14 11:16:30.669849+00	t	12	9
176	In the context of GCP IAM, what does the "Principle of Least Privilege" mean?	3	Least Privilege	5	2025-05-14 11:16:30.669862+00	2025-05-14 11:16:30.669865+00	t	12	9
177	What is the main difference between a Service Account and a User Account in GCP IAM?	3	Service Accounts	6	2025-05-14 11:16:30.669882+00	2025-05-14 11:16:30.669886+00	t	12	9
178	What is the primary advantage of using GCP Secret Manager over environment variables for storing sensitive data like API keys and database passwords?	3	Secret Manager Benefits	7	2025-05-14 11:16:30.669899+00	2025-05-14 11:16:30.669903+00	t	12	9
179	When accessing secrets from Secret Manager within a Python application running on Cloud Run, what is the recommended authentication method for the client library?	3	Secret Manager API	8	2025-05-14 11:16:30.669916+00	2025-05-14 11:16:30.669919+00	t	12	9
180	When managing secrets like database passwords or API keys, why is using Secret Manager's versioning feature beneficial?	3	Secret Versioning Rotation	9	2025-05-14 11:16:30.669931+00	2025-05-14 11:16:30.669934+00	t	12	9
181	How does the Google Cloud Client Library for Secret Manager typically authenticate when running within a Cloud Run service that has a service account attached?	3	Authentication ADC Service Account	10	2025-05-14 11:16:30.669947+00	2025-05-14 11:16:30.669951+00	t	12	9
182	What is the core principle of "Least Privilege" in Google Cloud IAM?	3	Least Privilege IAM	11	2025-05-14 11:16:30.669972+00	2025-05-14 11:16:30.669975+00	t	12	9
183	How should sensitive credentials like database passwords or API keys ideally be managed in a Python application deployed on Cloud Run, according to the guide?	3	Secret Manager API	12	2025-05-14 11:16:30.669988+00	2025-05-14 11:16:30.669991+00	t	12	9
184	What is a significant benefit of using multi-stage deployments (e.g., dev -&gt; staging -&gt; production) managed via a CI/CD pipeline?	4	Multi-stage Deployment	1	2025-05-14 11:16:32.482649+00	2025-05-14 11:16:32.482665+00	t	13	10
185	Why is caching dependencies (e.g., using Docker layer caching or Cloud Build cache volumes) important in a Cloud Build CI pipeline for Python projects?	4	Dependency Caching	2	2025-05-14 11:16:32.482736+00	2025-05-14 11:16:32.48274+00	t	13	10
186	If automated tests pass consistently on a developer's local machine but frequently fail in the Cloud Build CI environment, what is a likely cause according to the guide?	4	Test Environment Consistency	3	2025-05-14 11:16:32.482754+00	2025-05-14 11:16:32.482757+00	t	13	10
187	How can caching be implemented in Cloud Build to speed up Python dependency installation?	4	Dependency Caching Performance	4	2025-05-14 11:16:32.48277+00	2025-05-14 11:16:32.482773+00	t	13	10
188	In GCP Cloud Build, what is the role of a `cloudbuild.yaml` file?	4	cloudbuild.yaml	5	2025-05-14 11:16:32.482786+00	2025-05-14 11:16:32.482789+00	t	13	10
189	In Cloud Build, what is the typical role of the `cloudbuild.yaml` file?	4	cloudbuild.yaml	6	2025-05-14 11:16:32.482829+00	2025-05-14 11:16:32.482833+00	t	13	10
190	What is the primary goal of Continuous Integration (CI) in a software development workflow?	4	Continuous Integration	7	2025-05-14 11:16:32.482846+00	2025-05-14 11:16:32.482849+00	t	13	10
191	What is a common pitfall mentioned for Cloud Build pipelines involving Python dependency installation, and what is a suggested fix?	4	Dependency Caching	8	2025-05-14 11:16:32.482862+00	2025-05-14 11:16:32.482865+00	t	13	10
192	What is a common reason for Django tests passing locally but failing in a Cloud Build CI environment?	4	CI Test Failures Environment	9	2025-05-14 11:16:32.482877+00	2025-05-14 11:16:32.48288+00	t	13	10
193	In a `cloudbuild.yaml` configuration file, what does the `steps` section define?	4	cloudbuild yaml steps	10	2025-05-14 11:16:32.482893+00	2025-05-14 11:16:32.482896+00	t	13	10
194	What is the primary goal of Continuous Integration (CI) as implemented with Cloud Build?	4	Continuous Integration CI	11	2025-05-14 11:16:32.482909+00	2025-05-14 11:16:32.482912+00	t	13	10
195	What is the primary goal of Continuous Integration (CI) as defined in the Week 4 guide?	4	CI vs CD	12	2025-05-14 11:16:32.482929+00	2025-05-14 11:16:32.482934+00	t	13	10
196	When using `django-storages` with Google Cloud Storage, how does the library typically handle authentication when running on Cloud Run with a configured service account?	5	django-storages Authentication	1	2025-05-14 11:16:34.308927+00	2025-05-14 11:16:34.308942+00	t	14	11
197	What is the primary recommended use case for Signed URLs when integrating Django applications with Cloud Storage, based on the Week 5 material?	5	Signed URLs	2	2025-05-14 11:16:34.308961+00	2025-05-14 11:16:34.308966+00	t	14	11
198	How does Object Storage (like Google Cloud Storage) fundamentally differ from a traditional File System, according to the guide?	5	Object Storage	3	2025-05-14 11:16:34.308984+00	2025-05-14 11:16:34.308987+00	t	14	11
199	What is the main benefit of using Cloud CDN in front of a Cloud Storage bucket serving static assets (CSS, JS, images)?	5	CDN	4	2025-05-14 11:16:34.309001+00	2025-05-14 11:16:34.309004+00	t	14	11
200	What is a major pitfall mentioned regarding file uploads and Cloud Run, and what is the recommended solution?	5	File Upload Pattern	5	2025-05-14 11:16:34.309016+00	2025-05-14 11:16:34.30902+00	t	14	11
201	What is a potential pitfall of configuring overly permissive public access (e.g., `allUsers` with `Storage Object Creator`) on a Cloud Storage bucket intended for user uploads?	5	Bucket Permissions	6	2025-05-14 11:16:34.309032+00	2025-05-14 11:16:34.309035+00	t	14	11
202	What is the primary recommended use case for Signed URLs in Google Cloud Storage when dealing with user file uploads?	5	Signed URL	7	2025-05-14 11:16:34.309048+00	2025-05-14 11:16:34.309051+00	t	14	11
203	When serving static assets (CSS, JS, images) from Cloud Storage, what is the primary role of integrating Cloud CDN?	5	Cloud CDN Static Assets	8	2025-05-14 11:16:34.309064+00	2025-05-14 11:16:34.309067+00	t	14	11
204	How does Cloud Storage (Object Storage) fundamentally differ from a traditional file system?	5	Object Storage	9	2025-05-14 11:16:34.309079+00	2025-05-14 11:16:34.309082+00	t	14	11
205	If your frontend JavaScript application, running on `https://myapp.com`, fails to upload a file to Cloud Storage using a Signed URL, receiving a CORS error, what is the most likely cause?	5	CORS Configuration	10	2025-05-14 11:16:34.309094+00	2025-05-14 11:16:34.309097+00	t	14	11
206	What is the primary purpose of running the `python manage.py collectstatic` command when using `django-storages` configured with Cloud Storage as the `STATICFILES_STORAGE`?	5	collectstatic Cloud Storage	11	2025-05-14 11:16:34.30911+00	2025-05-14 11:16:34.309113+00	t	14	11
207	When using `django-storages` with Google Cloud Storage for handling user uploads (`DEFAULT_FILE_STORAGE`), what is the implication of setting `GS_DEFAULT_ACL = 'private'`?	5	django-storages ACLs	12	2025-05-14 11:16:34.309126+00	2025-05-14 11:16:34.309129+00	t	14	11
208	What is the recommended approach for allowing end-users to securely upload files directly from their browser to a private Cloud Storage bucket?	5	Signed URLs Uploads Security	13	2025-05-14 11:16:34.309141+00	2025-05-14 11:16:34.309144+00	t	14	11
209	Why is Cloud Storage generally preferred over storing files on a Cloud Run instance's local filesystem for user uploads or static assets?	5	Object Storage vs Filesystem	14	2025-05-14 11:16:34.309157+00	2025-05-14 11:16:34.30916+00	t	14	11
210	Why is configuring CORS (Cross-Origin Resource Sharing) necessary on a Cloud Storage bucket when implementing direct user uploads via Signed URLs from a web frontend?	5	CORS	15	2025-05-14 11:16:34.309172+00	2025-05-14 11:16:34.309175+00	t	14	11
211	In GCP Cloud Monitoring, what defines an Alert Policy?	6	Alert Policy	1	2025-05-14 11:16:36.131933+00	2025-05-14 11:16:36.131948+00	t	15	12
284	Which Django form class is specifically designed for user registration?	3	Django Registration Form Class	1	2025-05-14 11:16:43.089236+00	2025-05-14 11:16:43.089251+00	t	19	15
212	When integrating Django logging with Cloud Logging using the `google-cloud-logging` library, what is a recommended practice for performance, especially in high-traffic services?	6	Cloud Logging Integration	2	2025-05-14 11:16:36.131967+00	2025-05-14 11:16:36.131971+00	t	15	12
213	What is a common consequence of "Alert Fatigue" caused by poorly configured monitoring alerts (e.g., thresholds too low, too many non-actionable alerts)?	6	Alert Fatigue	3	2025-05-14 11:16:36.131985+00	2025-05-14 11:16:36.131988+00	t	15	12
214	Why might you create Custom Metrics in Cloud Monitoring for your Python application, in addition to using the standard metrics provided by Cloud Run?	6	Custom Metrics Monitoring	4	2025-05-14 11:16:36.132002+00	2025-05-14 11:16:36.132005+00	t	15	12
215	What is the purpose of creating Custom Metrics in Cloud Monitoring for your application?	6	Custom Metric	5	2025-05-14 11:16:36.132018+00	2025-05-14 11:16:36.132021+00	t	15	12
216	The guide discusses Custom Metrics in Cloud Monitoring. What is their primary purpose?	6	Custom Metrics	6	2025-05-14 11:16:36.132034+00	2025-05-14 11:16:36.132037+00	t	15	12
217	What is the primary advantage of using structured logging (e.g., logging messages as JSON objects) compared to plain text logging in cloud environments like GCP?	6	Structured Logging	7	2025-05-14 11:16:36.13205+00	2025-05-14 11:16:36.132054+00	t	15	12
218	When configuring Django's logging to integrate with Cloud Logging using the `google-cloud-logging` library, what is the purpose of using the `BackgroundThreadTransport`?	6	CloudLoggingHandler Transport	8	2025-05-14 11:16:36.132067+00	2025-05-14 11:16:36.13207+00	t	15	12
219	When using the `google-cloud-logging` library in Django, what is the purpose of configuring a `BackgroundThreadTransport` for the `CloudLoggingHandler`?	6	CloudLoggingHandler BackgroundThreadTransport	9	2025-05-14 11:16:36.132083+00	2025-05-14 11:16:36.132086+00	t	15	12
220	What is the key advantage of using structured logging (e.g., logging JSON payloads) compared to plain text logging in cloud environments like GCP?	6	Structured Logging JSON	10	2025-05-14 11:16:36.1321+00	2025-05-14 11:16:36.132103+00	t	15	12
221	What is "Alert Fatigue," as described in the common pitfalls for Monitoring and Logging?	6	Alert Fatigue	11	2025-05-14 11:16:36.132116+00	2025-05-14 11:16:36.132119+00	t	15	12
222	In GCP Cloud Monitoring, what components typically make up an Alert Policy?	6	Alert Policy Components	12	2025-05-14 11:16:36.132132+00	2025-05-14 11:16:36.132135+00	t	15	12
223	What is the key advantage of Structured Logging (e.g., logging JSON payloads) compared to plain text logging, according to the Week 6 guide?	6	Structured Logging	13	2025-05-14 11:16:36.132148+00	2025-05-14 11:16:36.132151+00	t	15	12
224	Which of the following WSGI server configurations would be most appropriate for a low-traffic Django application on Cloud Run with a default instance (1 vCPU)?	1	Django Cloud Run WSGI Config	1	2025-05-14 11:16:37.952619+00	2025-05-14 11:16:37.952636+00	t	16	13
225	What is the purpose of the Cloud SQL Auth Proxy when running Django database migrations for a Cloud Run deployment?	1	Django Cloud Run SQL Proxy	2	2025-05-14 11:16:37.952657+00	2025-05-14 11:16:37.952662+00	t	16	13
226	Which of the following is the correct command in a Dockerfile to run Django's collectstatic process during the container image build?	1	Django Dockerfile Collectstatic Command	3	2025-05-14 11:16:37.952685+00	2025-05-14 11:16:37.952691+00	t	16	13
227	When configuring ALLOWED_HOSTS in Django for Cloud Run deployment, which environment variable provides the service URL?	1	Django Cloud Run ALLOWED_HOSTS	4	2025-05-14 11:16:37.952714+00	2025-05-14 11:16:37.952718+00	t	16	13
228	Which of the following is NOT a Google Cloud API that needs to be enabled for a typical Django deployment to Cloud Run with Cloud SQL?	1	Django Cloud Run GCP API	5	2025-05-14 11:16:37.952731+00	2025-05-14 11:16:37.952734+00	t	16	13
229	What is the primary ongoing cost factor for a low-traffic Django application deployed on Cloud Run?	1	Django Cloud Run Cost	6	2025-05-14 11:16:37.952748+00	2025-05-14 11:16:37.952751+00	t	16	13
230	What is the recommended approach for setting Django's SECRET_KEY in a Cloud Run deployment?	1	Django Cloud Run SECRET_KEY	7	2025-05-14 11:16:37.952764+00	2025-05-14 11:16:37.952767+00	t	16	13
231	What is the purpose of using whitenoise in a Django application deployed to Cloud Run?	1	Django Cloud Run Whitenoise	8	2025-05-14 11:16:37.95278+00	2025-05-14 11:16:37.952784+00	t	16	13
232	When setting up a Django application for production deployment on Cloud Run, why is it important to set DEBUG=False?	1	Django Cloud Run DEBUG False	9	2025-05-14 11:16:37.952797+00	2025-05-14 11:16:37.952821+00	t	16	13
233	In a Django settings.py file for Cloud Run deployment, what is the purpose of the SECURE_PROXY_SSL_HEADER setting?	1	Django Cloud Run SSL Header	10	2025-05-14 11:16:37.952835+00	2025-05-14 11:16:37.952839+00	t	16	13
234	What does the --add-cloudsql-instances flag do when deploying to Cloud Run?	1	Cloud Run Add Cloud SQL Flag	11	2025-05-14 11:16:37.952852+00	2025-05-14 11:16:37.952855+00	t	16	13
235	In a Dockerfile for a Django application, why is it beneficial to copy and install the requirements.txt file before copying the application code?	1	Django Dockerfile Requirements Order	12	2025-05-14 11:16:37.952868+00	2025-05-14 11:16:37.952871+00	t	16	13
236	What is the purpose of the .dockerignore file when deploying a Django application to Cloud Run?	1	Django Cloud Run Dockerignore	13	2025-05-14 11:16:37.952884+00	2025-05-14 11:16:37.952887+00	t	16	13
237	What is the primary benefit of using Google Cloud Run for low-traffic Django applications?	1	Django Cloud Run Benefit	14	2025-05-14 11:16:37.9529+00	2025-05-14 11:16:37.952903+00	t	16	13
238	What does the EXPOSE directive do in a Dockerfile for a Django Cloud Run deployment?	1	Django Cloud Run Dockerfile EXPOSE	15	2025-05-14 11:16:37.952923+00	2025-05-14 11:16:37.952926+00	t	16	13
239	What happens if you don't run Django migrations after deploying to Cloud Run?	1	Django Cloud Run Missing Migrations	16	2025-05-14 11:16:37.952938+00	2025-05-14 11:16:37.952941+00	t	16	13
240	What command is typically used to run a Django application in a production container on Cloud Run?	1	Django Cloud Run Production Run	17	2025-05-14 11:16:37.952955+00	2025-05-14 11:16:37.952958+00	t	16	13
241	When using Cloud Run with secrets from Secret Manager, what role must be assigned to the Cloud Run service account?	1	Cloud Run Secret Manager Role	18	2025-05-14 11:16:37.952971+00	2025-05-14 11:16:37.952974+00	t	16	13
242	In the context of Django on Cloud Run, why is the gunicorn web server used instead of Django's built-in development server?	1	Django Cloud Run Gunicorn Reason	19	2025-05-14 11:16:37.952986+00	2025-05-14 11:16:37.952989+00	t	16	13
243	Which environment variable format is typically used to connect a Django application to a Cloud SQL PostgreSQL database in Cloud Run?	1	Django Cloud Run Database Var	20	2025-05-14 11:16:37.953002+00	2025-05-14 11:16:37.953005+00	t	16	13
244	When running Django migrations for a Cloud Run deployment using the Cloud SQL Auth Proxy, which port is typically used for a PostgreSQL database?	2	Django Migrations Cloud SQL Port	1	2025-05-14 11:16:39.769243+00	2025-05-14 11:16:39.769259+00	t	17	14
245	What does the PYTHONDONTWRITEBYTECODE environment variable do in a Django container?	2	Django PYTHONDONTWRITEBYTECODE	2	2025-05-14 11:16:39.769279+00	2025-05-14 11:16:39.769284+00	t	17	14
246	What is the purpose of the `PYTHONUNBUFFERED` environment variable in a Django application Dockerfile?	2	Django Dockerfile PYTHONUNBUFFERED	3	2025-05-14 11:16:39.769298+00	2025-05-14 11:16:39.769301+00	t	17	14
247	In a Docker container running on Cloud Run, what does the CMD instruction in the Dockerfile specify?	2	Docker CMD Instruction CloudRun	4	2025-05-14 11:16:39.769315+00	2025-05-14 11:16:39.769318+00	t	17	14
248	What is an advantage of using a smaller Cloud SQL instance (like db-f1-micro) for a Django application with low traffic?	2	Cloud SQL Instance Benefit	5	2025-05-14 11:16:39.769332+00	2025-05-14 11:16:39.769335+00	t	17	14
249	What is the purpose of the STATICFILES_STORAGE setting in a Django application for Cloud Run?	2	Django STATICFILES_STORAGE CloudRun	6	2025-05-14 11:16:39.769349+00	2025-05-14 11:16:39.769353+00	t	17	14
250	What happens if the ALLOWED_HOSTS setting is not properly configured in a Django application deployed to Cloud Run?	2	Django ALLOWED_HOSTS CloudRun	7	2025-05-14 11:16:39.769366+00	2025-05-14 11:16:39.769369+00	t	17	14
251	When configuring CSRF protection for a Django application running on Cloud Run, what setting is needed due to Cloud Run's architecture?	2	Django Cloud Run CSRF Setting	8	2025-05-14 11:16:39.769382+00	2025-05-14 11:16:39.769385+00	t	17	14
252	Why should you use environment variables for configuration in a Django application deployed to Cloud Run?	2	Django Cloud Run Env Vars	9	2025-05-14 11:16:39.769398+00	2025-05-14 11:16:39.769401+00	t	17	14
253	In the Dockerfile, why should you set WORKDIR to /app for a Django application?	2	Django Dockerfile WORKDIR	10	2025-05-14 11:16:39.769414+00	2025-05-14 11:16:39.769418+00	t	17	14
254	What is the purpose of the --allow-unauthenticated flag when deploying to Cloud Run?	2	Cloud Run Allow Unauthenticated	11	2025-05-14 11:16:39.769431+00	2025-05-14 11:16:39.769434+00	t	17	14
255	Which Google Cloud service is responsible for building the container image during Cloud Run deployment with --source flag?	2	Cloud Run Image Build Service	12	2025-05-14 11:16:39.769446+00	2025-05-14 11:16:39.769449+00	t	17	14
256	What is the recommended pattern for installing dependencies in a multi-stage Dockerfile for a Django application?	2	Docker Django Dependencies	13	2025-05-14 11:16:39.769462+00	2025-05-14 11:16:39.769465+00	t	17	14
257	What is a key advantage of containerizing Django applications for Cloud Run deployment?	2	Django Cloud Run Container Advantage	14	2025-05-14 11:16:39.769478+00	2025-05-14 11:16:39.769481+00	t	17	14
258	When following best practices for Cloud Run deployments, where should the Django collectstatic command be run?	2	Django collectstatic CloudRun	15	2025-05-14 11:16:39.769494+00	2025-05-14 11:16:39.769497+00	t	17	14
259	Which of the following correctly describes the relationship between gunicorn and whitenoise in a Django Cloud Run deployment?	2	Django CloudRun gunicorn whitenoise	16	2025-05-14 11:16:39.769509+00	2025-05-14 11:16:39.769512+00	t	17	14
260	When a Django application on Cloud Run needs to connect to a Cloud SQL instance, what component manages this connection securely?	2	Django Cloud Run SQL Security	17	2025-05-14 11:16:39.769525+00	2025-05-14 11:16:39.769528+00	t	17	14
261	What is the most important reason NOT to use Django's built-in sqlite database when deploying to Cloud Run?	2	Django Cloud Run SQLite Issue	18	2025-05-14 11:16:39.769541+00	2025-05-14 11:16:39.769544+00	t	17	14
262	What does the --set-secrets flag do when deploying a Django application to Cloud Run?	2	Cloud Run Set Secrets Flag	19	2025-05-14 11:16:39.769557+00	2025-05-14 11:16:39.76956+00	t	17	14
263	Which of the following is the correct format for DATABASE_URL when connecting to a PostgreSQL Cloud SQL instance from Cloud Run?	2	Django Cloud Run Database Format	20	2025-05-14 11:16:39.769573+00	2025-05-14 11:16:39.769576+00	t	17	14
264	Which class-based view is most appropriate for implementing a user registration view in Django?	3	Django Registration Class View	1	2025-05-14 11:16:41.59014+00	2025-05-14 11:16:41.590156+00	t	18	15
265	What is the correct way to check if a user has a specific permission in a Django view?	3	Django Check Permissions View	2	2025-05-14 11:16:41.590175+00	2025-05-14 11:16:41.590179+00	t	18	15
266	What is the primary purpose of Django's Groups in the authentication system?	3	Django Auth Groups Purpose	3	2025-05-14 11:16:41.590194+00	2025-05-14 11:16:41.590198+00	t	18	15
267	How do you access a user's permissions in a Django template?	3	Django Template User Permissions	4	2025-05-14 11:16:41.590211+00	2025-05-14 11:16:41.590215+00	t	18	15
268	What is the purpose of the @login_required decorator in Django views?	3	Django login_required Decorator	5	2025-05-14 11:16:41.590228+00	2025-05-14 11:16:41.590232+00	t	18	15
269	When a user successfully logs in to a Django application, what is stored in the session to maintain their authenticated state?	3	Django Session Auth State	6	2025-05-14 11:16:41.590246+00	2025-05-14 11:16:41.590249+00	t	18	15
270	What is the meaning of the is_superuser flag on Django's User model?	3	Django User is_superuser Flag	7	2025-05-14 11:16:41.590263+00	2025-05-14 11:16:41.590266+00	t	18	15
271	What is the purpose of the `{% csrf_token %}` in a Django login form template?	3	Django Login CSRF Token	8	2025-05-14 11:16:41.590279+00	2025-05-14 11:16:41.590282+00	t	18	15
272	What happens when the @permission_required decorator is used with raise_exception=True and a user without the required permission attempts to access the view?	3	Django Permission Decorator Exception	9	2025-05-14 11:16:41.590296+00	2025-05-14 11:16:41.590299+00	t	18	15
273	Which of these fields is NOT part of Django's built-in User model?	3	Django User Model Fields	10	2025-05-14 11:16:41.590313+00	2025-05-14 11:16:41.590316+00	t	18	15
274	Why must SessionMiddleware be placed before AuthenticationMiddleware in the MIDDLEWARE setting?	3	Django Middleware Order	11	2025-05-14 11:16:41.590329+00	2025-05-14 11:16:41.590332+00	t	18	15
275	What is the difference between is_staff and is_superuser flags on a Django User?	3	Django User is_staff is_superuser	12	2025-05-14 11:16:41.590345+00	2025-05-14 11:16:41.590348+00	t	18	15
276	How does Django store user passwords in the database?	3	Django Password Storage	13	2025-05-14 11:16:41.590361+00	2025-05-14 11:16:41.590364+00	t	18	15
277	Which decorator can be used to restrict a Django view to users with specific permissions?	3	Django Permission Required Decorator	14	2025-05-14 11:16:41.590377+00	2025-05-14 11:16:41.59038+00	t	18	15
278	When using Django's built-in UserCreationForm for registration, what important step should you take after form.save() to improve user experience?	3	Django Registration UserCreationForm Save	15	2025-05-14 11:16:41.590392+00	2025-05-14 11:16:41.590395+00	t	18	15
279	What is the correct way to include Django's built-in authentication URLs in your project?	3	Django Auth URLs Include	16	2025-05-14 11:16:41.590409+00	2025-05-14 11:16:41.590412+00	t	18	15
280	If a user is redirected to the login page by the @login_required decorator, what happens after they successfully log in?	3	Django login_required Redirect Behavior	17	2025-05-14 11:16:41.590425+00	2025-05-14 11:16:41.590428+00	t	18	15
281	In Django's authentication system, which middleware is responsible for associating users with requests?	3	Django Auth Middleware Users	18	2025-05-14 11:16:41.59044+00	2025-05-14 11:16:41.590444+00	t	18	15
282	In Django, how are permissions typically created for models?	3	Django Model Permissions Create	19	2025-05-14 11:16:41.590456+00	2025-05-14 11:16:41.590459+00	t	18	15
283	Which of the following Django settings.py INSTALLED_APPS is NOT directly related to the authentication system?	3	Django Auth INSTALLED_APPS	20	2025-05-14 11:16:41.590472+00	2025-05-14 11:16:41.590475+00	t	18	15
285	Which setting controls where users are redirected after successful login in Django?	3	Django Login Redirect Setting	2	2025-05-14 11:16:43.089271+00	2025-05-14 11:16:43.089275+00	t	19	15
286	What's the best approach for implementing role-based access control in Django?	3	Django Role Based Access	3	2025-05-14 11:16:43.089289+00	2025-05-14 11:16:43.089293+00	t	19	15
287	What's the primary reason for using a POST request instead of a GET request for logout functionality?	3	Logout POST vs GET	4	2025-05-14 11:16:43.089306+00	2025-05-14 11:16:43.08931+00	t	19	15
288	In Django's auth system, what is the purpose of the 'next' parameter in the login URL?	3	Django Login next Parameter	5	2025-05-14 11:16:43.089323+00	2025-05-14 11:16:43.089327+00	t	19	15
289	What is Django's AnonymousUser and when is it used?	3	Django AnonymousUser Purpose	6	2025-05-14 11:16:43.08934+00	2025-05-14 11:16:43.089344+00	t	19	15
290	What does the following code check in a Django template?\n\n<pre><code class="language-html">\n{% if user.is_authenticated %}\n  <!-- Content here -->\n{% endif %}\n</code></pre>	3	Django Template is_authenticated	7	2025-05-14 11:16:43.089357+00	2025-05-14 11:16:43.08936+00	t	19	15
291	What is the purpose of the `is_active` field in Django's User model?	3	Django User is_active Field	8	2025-05-14 11:16:43.089373+00	2025-05-14 11:16:43.089376+00	t	19	15
292	What is the central question that guides the "Thinking Like a Tester" mindset, as emphasized in section 1.4?	1	Core Tester Question	1	2025-05-14 11:16:44.909937+00	2025-05-14 11:16:44.909952+00	t	20	16
293	What is the recommended structure for `pytest` fixture names to ensure clarity about the resource or state they provide?	1	Fixture Naming	2	2025-05-14 11:16:44.909971+00	2025-05-14 11:16:44.909975+00	t	20	16
294	Consider the `temporary_media_root` fixture example, which modifies `settings.MEDIA_ROOT` during its setup phase. Why is it crucial for this fixture to restore the original value of `settings.MEDIA_ROOT` in its teardown phase?	1	Settings Management Teardown	3	2025-05-14 11:16:44.909989+00	2025-05-14 11:16:44.909992+00	t	20	16
295	Why is it important to consider "Empty/Initial States" when testing application functionalities (e.g., a new user with no profile data)?	1	Application States Empty	4	2025-05-14 11:16:44.910005+00	2025-05-14 11:16:44.910009+00	t	20	16
296	What is the primary purpose of the `pytest-cov` plugin in a Django testing environment?	1	pytest-cov Purpose	5	2025-05-14 11:16:44.910021+00	2025-05-14 11:16:44.910025+00	t	20	16
297	When using `@pytest.mark.parametrize("name, width, height", VIEWPORTS)`, what is the expected structure of the `VIEWPORTS` variable to correctly pass these arguments to the test function?	1	parametrize Syntax	6	2025-05-14 11:16:44.910037+00	2025-05-14 11:16:44.910041+00	t	20	16
298	When you identify duplicated setup code (e.g., creating the same model instances) across multiple test functions in a `pytest` environment, what is the primary `pytest` mechanism recommended by the text for refactoring this duplication?	1	Pytest Fixtures	7	2025-05-14 11:16:44.910053+00	2025-05-14 11:16:44.910057+00	t	20	16
299	According to the strategic allocation of testing effort in Django, which types of components should be the primary focus for **unit tests**?	1	Unit Test Focus	8	2025-05-14 11:16:44.910069+00	2025-05-14 11:16:44.910072+00	t	20	16
300	What does the <code>-s</code> (or <code>--capture=no</code>) option primarily allow when running <code>pytest</code>?	1	Command Line Options	9	2025-05-14 11:16:44.910084+00	2025-05-14 11:16:44.910088+00	t	20	16
301	What is the combined effect of running `pytest` with both the <code>-v</code> and <code>-s</code> flags (i.e., <code>pytest -v -s</code>)?	1	Combining Output Flags	10	2025-05-14 11:16:44.9101+00	2025-05-14 11:16:44.910103+00	t	20	16
302	According to `pytest`'s default test discovery rules, which of the following file names would typically be discovered as a test file?	1	File Naming	11	2025-05-14 11:16:44.910115+00	2025-05-14 11:16:44.910118+00	t	20	16
303	The text provides a conceptual test `test_published_article_is_visible_to_public`. How does this test's structure (name, docstring using GIVEN-WHEN-THEN, assertions) contribute to it being "living documentation"?	1	Test Structure Documentation	12	2025-05-14 11:16:44.91013+00	2025-05-14 11:16:44.910133+00	t	20	16
304	In `pytest` commands like `pytest path/to/file.py::ClassName::test_method`, what is the primary role of the `::` separator?	1	Node ID Separator	13	2025-05-14 11:16:44.910146+00	2025-05-14 11:16:44.910149+00	t	20	16
305	What is a significant maintenance consequence of writing the same setup code in multiple test functions, as highlighted in the text?	1	DRY Principle	14	2025-05-14 11:16:44.910162+00	2025-05-14 11:16:44.910165+00	t	20	16
306	According to the recommended Django test organization, where should tests for a specific application (e.g., a 'polls' app) primarily reside?	1	App-Specific Tests	15	2025-05-14 11:16:44.910177+00	2025-05-14 11:16:44.91018+00	t	20	16
307	Which of the following describes the "Inverted Pyramid" or "Ice Cream Cone" anti-pattern in test distribution?	1	Anti-Patterns Inverted Pyramid	16	2025-05-14 11:16:44.910192+00	2025-05-14 11:16:44.910195+00	t	20	16
308	What is the purpose of the built-in `pytest` marker `@pytest.mark.skipif(condition, reason="...")`?	1	Built-in Markers skipif	17	2025-05-14 11:16:44.910207+00	2025-05-14 11:16:44.91021+00	t	20	16
309	Which fixture scope provides the highest level of test isolation, ensuring that each test function receives a completely fresh instance of the fixture's resource?	1	function scope	18	2025-05-14 11:16:44.910223+00	2025-05-14 11:16:44.910226+00	t	20	16
310	What is the key difference between a test reported as <code>FAIL</code> and one reported as <code>ERROR</code> by <code>pytest</code>?	1	FAIL vs ERROR	19	2025-05-14 11:16:44.910238+00	2025-05-14 11:16:44.910241+00	t	20	16
311	In the Arrange-Act-Assert (AAA) pattern for structuring tests, what is the primary purpose of the "Arrange" phase?	1	AAA Pattern Arrange	20	2025-05-14 11:16:44.910253+00	2025-05-14 11:16:44.910256+00	t	20	16
312	The text mentions that the `pytest-django` `client` fixture and the `@pytest.mark.django_db` marker are examples of pre-existing fixture-like mechanisms. What common characteristic do they share that aligns with the purpose of fixtures?	1	Existing Fixtures	1	2025-05-14 11:16:47.150064+00	2025-05-14 11:16:47.15008+00	t	21	17
313	What is a primary problem associated with the "Hourglass" anti-pattern (many unit and E2E tests, few integration tests)?	1	Anti-Patterns Hourglass	2	2025-05-14 11:16:47.1501+00	2025-05-14 11:16:47.150104+00	t	21	17
314	What is a significant long-term cost of *insufficient* testing, apart from fixing bugs found in production?	1	Insufficient Testing Costs	3	2025-05-14 11:16:47.150123+00	2025-05-14 11:16:47.150127+00	t	21	17
315	What is the primary role of a test suite when refactoring code in a Django application?	1	Refactoring Safety Net	4	2025-05-14 11:16:47.150141+00	2025-05-14 11:16:47.150145+00	t	21	17
316	What typically occurs during the "Act" phase of the Arrange-Act-Assert (AAA) pattern?	1	AAA Pattern Act	5	2025-05-14 11:16:47.150157+00	2025-05-14 11:16:47.150161+00	t	21	17
317	What is the most basic command you would typically run in your project's root directory to execute all discovered <code>pytest</code> tests?	1	Command Line	6	2025-05-14 11:16:47.150174+00	2025-05-14 11:16:47.150177+00	t	21	17
318	You want to run tests that are related to "profile" AND (either "edit" OR "view"). Which `pytest -k` command achieves this?	1	pytest -k Complex	7	2025-05-14 11:16:47.15019+00	2025-05-14 11:16:47.150194+00	t	21	17
319	What are the two primary concerns that fixture scopes in pytest (function, class, module, session) help manage?	1	Scope Purpose	8	2025-05-14 11:16:47.150207+00	2025-05-14 11:16:47.15021+00	t	21	17
320	What is the main purpose of the <code>@pytest.fixture</code> decorator when applied to a Python function?	1	@pytest.fixture decorator	9	2025-05-14 11:16:47.150223+00	2025-05-14 11:16:47.150226+00	t	21	17
321	How does the scope of a `yield` fixture (e.g., `function`, `class`, `module`, `session`) influence when its teardown logic (code after `yield`) is executed?	1	Scope Teardown Timing	10	2025-05-14 11:16:47.150239+00	2025-05-14 11:16:47.150242+00	t	21	17
322	The text likens a test suite to a "pilot's pre-flight checklist." What critical aspect of testing does this analogy emphasize?	1	Pre-Flight Checklist	11	2025-05-14 11:16:47.150254+00	2025-05-14 11:16:47.150258+00	t	21	17
323	If a test named `test_layout` in file `test_my_responsive_feature.py` is parameterized with `VIEWPORTS = [("mobile", 375, 812), ("desktop", 1920, 1080)]` and fails for the mobile viewport but passes for desktop, what would a typical Pytest output line for the specific failure look like?	1	parametrize Output Feedback	12	2025-05-14 11:16:47.15027+00	2025-05-14 11:16:47.150273+00	t	21	17
324	Which of the following scenarios would most likely result in a test being marked as <code>ERROR</code> by <code>pytest</code>?	1	ERROR outcome	13	2025-05-14 11:16:47.150285+00	2025-05-14 11:16:47.150289+00	t	21	17
325	What is the correct `pytest` command to run all tests specifically within the class `TestProductListView` located in the file `products/tests/test_views.py`?	1	Class Execution	14	2025-05-14 11:16:47.150301+00	2025-05-14 11:16:47.150304+00	t	21	17
326	How do you correctly apply a custom marker, say `integration`, to a Python test function named `test_user_api_interaction` using `pytest`?	1	Applying Markers	15	2025-05-14 11:16:47.150317+00	2025-05-14 11:16:47.15032+00	t	21	17
327	If a third-party payment gateway your Django application relies on becomes unavailable, which category of "What could go wrong?" does this primarily fall into?	1	External Dependencies	16	2025-05-14 11:16:47.150332+00	2025-05-14 11:16:47.150336+00	t	21	17
328	According to the provided text, beyond catching bugs, what is a primary value proposition of a well-crafted test suite in Django development?	1	Proactive Benefits	17	2025-05-14 11:16:47.150348+00	2025-05-14 11:16:47.150351+00	t	21	17
329	What is the main advantage of running specific tests (e.g., a single file, class, or method) during the development phase rather than the entire suite?	1	Development Workflow	18	2025-05-14 11:16:47.150363+00	2025-05-14 11:16:47.150366+00	t	21	17
330	Which `pytest` command is used to run only those tests that have been decorated with `@pytest.mark.smoke`?	1	pytest -m	19	2025-05-14 11:16:47.150379+00	2025-05-14 11:16:47.150382+00	t	21	17
331	In what situation would you most likely use the <code>pytest -q</code> (or <code>pytest --quiet</code>) command?	1	pytest -q	20	2025-05-14 11:16:47.150394+00	2025-05-14 11:16:47.150397+00	t	21	17
332	If you find a test in your suite that has been commented out, and you determine that the feature it was testing has been completely removed from the application, what is the most appropriate action to take according to the text?	1	Commented-out Tests	1	2025-05-14 11:16:48.963401+00	2025-05-14 11:16:48.963416+00	t	22	18
333	If a single test function is found to be very long, verifying multiple distinct user actions and outcomes (e.g., user registration, profile viewing, and account deletion), what is the recommended refactoring strategy according to the "long test smell" discussion?	1	Long Test Smell	2	2025-05-14 11:16:48.963435+00	2025-05-14 11:16:48.963439+00	t	22	18
334	Why are UI test locators that rely on very specific CSS paths (e.g., <code>div &gt; div:nth-child(2) &gt; button</code>) considered "brittle"?	1	Brittle Locators	3	2025-05-14 11:16:48.963453+00	2025-05-14 11:16:48.963457+00	t	22	18
335	According to the text, what is a common cause of "flaky" UI tests (tests that pass and fail inconsistently without code changes)?	1	Flaky UI Tests	4	2025-05-14 11:16:48.96347+00	2025-05-14 11:16:48.963474+00	t	22	18
336	Scenario: You run <code>pytest</code>, and <code>test_A</code> fails. You then apply a code fix. You run <code>pytest --lf</code>, and <code>test_A</code> now passes. What is the expected outcome if you immediately run <code>pytest --lf</code> again without further changes?	1	pytest --lf Workflow	5	2025-05-14 11:16:48.963487+00	2025-05-14 11:16:48.96349+00	t	22	18
337	What is the main purpose of using the <code>pytest -s</code> (or <code>pytest --capture=no</code>) command during test execution?	1	pytest -s Purpose	6	2025-05-14 11:16:48.963503+00	2025-05-14 11:16:48.963506+00	t	22	18
338	What is the primary function of the `yield` statement when used in a pytest fixture?	1	yield statement	7	2025-05-14 11:16:48.963519+00	2025-05-14 11:16:48.963523+00	t	22	18
339	How do you define a custom marker, for example, to label a test function `test_complex_calculation()` as `compute_intensive`?	1	Custom Markers	8	2025-05-14 11:16:48.963535+00	2025-05-14 11:16:48.963539+00	t	22	18
340	In the context of the Arrange-Act-Assert (AAA) pattern, what is the main goal of the "Assert" phase?	1	AAA Pattern Assert	9	2025-05-14 11:16:48.963551+00	2025-05-14 11:16:48.963555+00	t	22	18
341	How does <code>pytest</code> primarily discover test functions to execute?	1	Test Naming Conventions	10	2025-05-14 11:16:48.963567+00	2025-05-14 11:16:48.963571+00	t	22	18
342	If a test covers a feature that is temporarily disabled in the application, and you want to prevent this test from running and failing CI builds without deleting it, what is the recommended `pytest` approach?	1	pytest.mark.skip	11	2025-05-14 11:16:48.963583+00	2025-05-14 11:16:48.963586+00	t	22	18
343	Consider the following test for a <code>generate_slug(text)</code> function:\n<pre><code class="language-python">\ndef test_slug_creation():\n    # Phase 1\n    original_text = "My Test Title"\n    expected_slug = "my-test-title"\n\n    # Phase 2\n    actual_slug = generate_slug(original_text)\n\n    # Phase 3\n    assert actual_slug == expected_slug\n</code></pre>\nIn this test structured with AAA, what does "Phase 2" represent?	1	AAA Pattern Example	12	2025-05-14 11:16:48.963599+00	2025-05-14 11:16:48.963602+00	t	22	18
344	In which development scenario is using <code>pytest --lf</code> (last-failed) most appropriate and beneficial?	1	pytest --lf Use Case	13	2025-05-14 11:16:48.963615+00	2025-05-14 11:16:48.963618+00	t	22	18
345	What is a key advantage of using `yield` fixtures for teardown logic (e.g., deleting temporary files) compared to manually implementing teardown with `try...finally` blocks within each test function?	1	yield vs try-finally	14	2025-05-14 11:16:48.96363+00	2025-05-14 11:16:48.963634+00	t	22	18
346	What is the "coverage trap" as described in the context of test coverage?	1	Coverage Trap	15	2025-05-14 11:16:48.963646+00	2025-05-14 11:16:48.963649+00	t	22	18
347	What fundamental capability do markers provide to a `pytest` test suite?	1	Marker Purpose	16	2025-05-14 11:16:48.963662+00	2025-05-14 11:16:48.963665+00	t	22	18
348	The `admin_logged_in_page` fixture example orchestrates several resources (Playwright page, live server, temporary admin user). How does it achieve this orchestration?	1	Fixture Composition E2E	17	2025-05-14 11:16:48.963677+00	2025-05-14 11:16:48.96368+00	t	22	18
382	Why is <code>locator.uncheck()</code> generally not used for radio buttons in Playwright?	2	Radio Button Uncheck	11	2025-05-14 11:16:53.017844+00	2025-05-14 11:16:53.017847+00	t	24	20
349	If you have a helper function named <code>setup_user_data()</code> inside a test file (e.g., <code>test_views.py</code>), why will <code>pytest</code> NOT run it as a standalone test?	1	Test Naming Conventions	18	2025-05-14 11:16:48.963693+00	2025-05-14 11:16:48.963696+00	t	22	18
350	Which naming convention must a class adhere to for `pytest` to discover it as a container for test methods?	1	Class Naming	19	2025-05-14 11:16:48.963708+00	2025-05-14 11:16:48.963711+00	t	22	18
351	When "Thinking Like a Tester" about "User Inputs," what category of input data typically involves values like empty strings for optional fields or a quantity of 0?	1	User Inputs Unusual	20	2025-05-14 11:16:48.963726+00	2025-05-14 11:16:48.963729+00	t	22	18
352	What does `locator.filter(has=inner_locator)` achieve in Playwright?	2	filter has	1	2025-05-14 11:16:50.780139+00	2025-05-14 11:16:50.780154+00	t	23	19
353	Which scenario is most appropriate for using <code>page.wait_for_load_state('networkidle')</code>?	2	networkidle state	2	2025-05-14 11:16:50.780172+00	2025-05-14 11:16:50.780176+00	t	23	19
354	When using <code>expect(locator).to_have_css("color", "rgb(255, 0, 0)")</code>, what specific value is Playwright comparing against the expected "rgb(255, 0, 0)"?	2	to_have_css Computed	3	2025-05-14 11:16:50.78019+00	2025-05-14 11:16:50.780194+00	t	23	19
355	The case study suggests using <code>page.get_by_label("Username:")</code> to locate the username field on the Django admin login page. Why is this approach often preferred?	2	Get By Label Admin	4	2025-05-14 11:16:50.780207+00	2025-05-14 11:16:50.78021+00	t	23	19
356	What is the recommended first choice in the locator hierarchy for maintainable tests, according to the provided content?	2	Locator Hierarchy	5	2025-05-14 11:16:50.780223+00	2025-05-14 11:16:50.780227+00	t	23	19
357	If a Playwright test attempts `page.goto("http://localhost:8000/some-page/")` without a development server running or the `live_server` fixture active, what is the most likely outcome?	2	Network Accessibility	6	2025-05-14 11:16:50.780239+00	2025-05-14 11:16:50.780243+00	t	23	19
358	How can you instruct <code>expect(locator).to_contain_text()</code> to perform a case-insensitive comparison?	2	to_contain_text ignore_case	7	2025-05-14 11:16:50.780256+00	2025-05-14 11:16:50.780259+00	t	23	19
359	What is "locator chaining" in Playwright?	2	Chaining Definition	8	2025-05-14 11:16:50.780272+00	2025-05-14 11:16:50.780275+00	t	23	19
360	Which Playwright method is commonly used to simulate dragging an element (source) and dropping it onto another element (target)?	2	Drag and Drop	9	2025-05-14 11:16:50.780288+00	2025-05-14 11:16:50.78029+00	t	23	19
361	Why is it important that Playwright's <code>.fill()</code> method simulates user typing and triggers JavaScript events like <code>input</code>, <code>change</code>, <code>keydown</code>, etc.?	2	Fill Event Simulation	10	2025-05-14 11:16:50.780303+00	2025-05-14 11:16:50.780306+00	t	23	19
362	How does Playwright's <code>expect(locator).to_be_visible(timeout=5000)</code> function as a waiting mechanism?	2	expect timeout	11	2025-05-14 11:16:50.780319+00	2025-05-14 11:16:50.780322+00	t	23	19
363	In the "ensemble analogy" describing the components of Django E2E testing, if `@pytest.mark.django_db` is the "Data Custodian" and `live_server` is the "Stage Manager," what role does the Playwright `page` fixture typically play?	2	Browser Interaction	12	2025-05-14 11:16:50.780334+00	2025-05-14 11:16:50.780337+00	t	23	19
364	When is <code>locator.press()</code> preferred over <code>locator.fill()</code> for text input?	2	Press vs Fill	13	2025-05-14 11:16:50.78035+00	2025-05-14 11:16:50.780353+00	t	23	19
365	What is an effective way to wait for a loading spinner (e.g., <code>div id="spinner"/div</code>) to disappear after an action?	2	to_be_hidden	14	2025-05-14 11:16:50.780365+00	2025-05-14 11:16:50.780368+00	t	23	19
366	When <code>page.keyboard.press("Escape")</code> is called, to which element is the key press event typically directed?	2	Page Keyboard Press	15	2025-05-14 11:16:50.78038+00	2025-05-14 11:16:50.780383+00	t	23	19
367	What is the core principle for writing reliable assertions in E2E tests for dynamic web applications, especially when dealing with asynchronous operations?	2	Reliable Assertions Definite Outcome	16	2025-05-14 11:16:50.780395+00	2025-05-14 11:16:50.780399+00	t	23	19
368	Why do End-to-End (E2E) tests typically focus on the "happy path" of critical user flows?	2	Happy Path Focus	17	2025-05-14 11:16:50.780411+00	2025-05-14 11:16:50.780414+00	t	23	19
369	How can you select multiple options, "Red" (value "R") and "Blue" (value "B"), in a <code>&lt;select multiple&gt;</code> dropdown with ID <code>colors-select</code> using Playwright?	2	Select Multiple Options	18	2025-05-14 11:16:50.780426+00	2025-05-14 11:16:50.78043+00	t	23	19
370	How does Playwright's automatic waiting mechanism contribute to test reliability compared to using fixed <code>time.sleep()</code> calls?	2	Reliability Benefits	19	2025-05-14 11:16:50.780442+00	2025-05-14 11:16:50.780445+00	t	23	19
371	How do `data-testid` attributes contribute to test stability when CSS class names are refactored for styling purposes?	2	data-testid Styling Changes	20	2025-05-14 11:16:50.780457+00	2025-05-14 11:16:50.78046+00	t	23	19
372	How do you assert that a checkbox located by <code>agree_checkbox</code> is currently unchecked using Playwright's <code>expect</code> library?	2	Checkbox Assertion	1	2025-05-14 11:16:53.017638+00	2025-05-14 11:16:53.017665+00	t	24	20
373	In the synergy of `live_server`, `page`, and `@pytest.mark.django_db` for E2E testing, what is the primary responsibility of the `@pytest.mark.django_db` marker?	2	Data Isolation	2	2025-05-14 11:16:53.017684+00	2025-05-14 11:16:53.017688+00	t	24	20
374	The <code>expect(locator).to_have_value()</code> assertion is primarily designed for verifying the current value of which types of HTML elements?	2	to_have_value Elements	3	2025-05-14 11:16:53.017702+00	2025-05-14 11:16:53.017706+00	t	24	20
375	In the context of E2E testing with `pytest-playwright`, if a test fails due to an element not being found, taking a screenshot just before the failing action is useful because it helps you:	2	Screenshot Utility	4	2025-05-14 11:16:53.017719+00	2025-05-14 11:16:53.017723+00	t	24	20
376	By default, `page.goto(url)` waits for a specific page event before returning. What is this default event?	2	page.goto() Waiting	5	2025-05-14 11:16:53.017735+00	2025-05-14 11:16:53.017739+00	t	24	20
377	When using `page.goto(url)` in Playwright, what is a key characteristic of the `url` argument you provide?	2	page.goto() URL	6	2025-05-14 11:16:53.017752+00	2025-05-14 11:16:53.017755+00	t	24	20
378	In the E2E user login example using `pytest-django`'s `client`, what is the primary purpose of `client.post(login_url, ..., follow=True)`?	2	Client POST Follow	7	2025-05-14 11:16:53.017767+00	2025-05-14 11:16:53.017771+00	t	24	20
379	In the example <code>target_url = live_server.url + reverse('simple_page')</code>, what is the benefit of using Django's <code>reverse('simple_page')</code>?	2	reverse() Function	8	2025-05-14 11:16:53.017783+00	2025-05-14 11:16:53.017786+00	t	24	20
380	The code snippet <code>heading_element = page.locator("h1")</code> is used before taking an element-specific screenshot. What does <code>page.locator("h1")</code> do?	2	Element Locators	9	2025-05-14 11:16:53.017798+00	2025-05-14 11:16:53.017815+00	t	24	20
381	What is the primary purpose of the `page.goto(url)` method in Playwright?	2	page.goto()	10	2025-05-14 11:16:53.017829+00	2025-05-14 11:16:53.017832+00	t	24	20
383	What is the primary purpose of <code>page.wait_for_load_state()</code> in Playwright?	2	page.wait_for_load_state	12	2025-05-14 11:16:53.01786+00	2025-05-14 11:16:53.017863+00	t	24	20
384	If you call <code>my_checkbox.check()</code> on a checkbox that is already checked, what will Playwright do?	2	Checkbox Check	13	2025-05-14 11:16:53.017875+00	2025-05-14 11:16:53.017879+00	t	24	20
385	When testing a Django application with `pytest-playwright`, why is it crucial to use `live_server.url` as the base for navigation with `page.goto()`?	2	live_server Fixture	14	2025-05-14 11:16:53.01789+00	2025-05-14 11:16:53.017894+00	t	24	20
386	What is the primary goal of End-to-End (E2E) tests?	2	Purpose User Perspective	15	2025-05-14 11:16:53.017906+00	2025-05-14 11:16:53.017909+00	t	24	20
387	What does the command <code>pip install pytest-playwright</code> primarily achieve in your Python environment?	2	pip install	16	2025-05-14 11:16:53.017921+00	2025-05-14 11:16:53.017924+00	t	24	20
388	After a successful login attempt using `client.post(login_url, ..., follow=True)` in the E2E example, how is the user's authentication status typically verified?	2	Authentication Check Client	17	2025-05-14 11:16:53.017937+00	2025-05-14 11:16:53.01794+00	t	24	20
389	What is the fundamental reason Django's `client` fixture is unsuitable for End-to-End (E2E) tests conducted with tools like Playwright?	2	HTTP Server Requirement	18	2025-05-14 11:16:53.017952+00	2025-05-14 11:16:53.017955+00	t	24	20
390	A web page has a button that, when clicked, fetches data and updates a <code>p id="status"Initial/p</code> to <code>p id="status"Updated/p</code> after a delay. Which Playwright assertion correctly waits for this text change?	2	to_have_text	19	2025-05-14 11:16:53.017967+00	2025-05-14 11:16:53.017971+00	t	24	20
391	What is the primary purpose of adding `data-testid` attributes to HTML elements in the context of E2E testing?	2	data-testid Purpose	20	2025-05-14 11:16:53.017983+00	2025-05-14 11:16:53.017986+00	t	24	20
392	After selecting an option with <code>value="CA"</code> in a single-select dropdown located by <code>country_dropdown_locator</code>, how can you assert that this value is indeed selected?	2	Select Assert Value	1	2025-05-14 11:16:54.517941+00	2025-05-14 11:16:54.517964+00	t	25	19
393	In the context of end-to-end (E2E) testing with Playwright and `pytest-django`, what is the main purpose of the `live_server` fixture?	2	live_server fixture	2	2025-05-14 11:16:54.517985+00	2025-05-14 11:16:54.51799+00	t	25	19
394	Which of the following is NOT a typical capability of the Playwright `Page` object provided by the `page` fixture?	2	Page Object Capabilities	3	2025-05-14 11:16:54.518008+00	2025-05-14 11:16:54.518012+00	t	25	19
395	When might you consider using <code>locator.fill("text", force=True)</code>, and why is it generally discouraged?	2	Fill Force Option	4	2025-05-14 11:16:54.518025+00	2025-05-14 11:16:54.518029+00	t	25	19
396	Consider the following HTML snippet, and assume you need to click the "Submit Details" button.\n<pre><code class="language-html">h1Welcome/h1\na href="/login" role="link"Go to Login Page/a\nbutton onclick="submitForm()"Submit Details/button\ninput type="text" id="username" name="username" /\n</code></pre>\nWhich Playwright locator is generally the most robust and recommended for finding the "Submit Details" button based on Section 11.1?	2	get_by_role Usage	5	2025-05-14 11:16:54.518042+00	2025-05-14 11:16:54.518045+00	t	25	19
397	If a Playwright action like <code>button_locator.click()</code> is called, but the button is not yet in the DOM, what is Playwright's default behavior?	2	Timeout Behavior	6	2025-05-14 11:16:54.518058+00	2025-05-14 11:16:54.518062+00	t	25	19
398	Consider a scenario where clicking a "Submit" button on a form triggers an API call, shows a "Saving..." message, then displays "Data saved successfully!" and disables the button. Which of the following assertions is most reliable for verifying successful submission?	2	Reliable Assertions Playwright Expect	7	2025-05-14 11:16:54.518075+00	2025-05-14 11:16:54.518078+00	t	25	19
399	If Playwright's <code>.click()</code> action fails with a <code>TimeoutError</code> stating an element is "obscured by another element," what is a likely cause?	2	Click Obscured	8	2025-05-14 11:16:54.518091+00	2025-05-14 11:16:54.518094+00	t	25	19
400	What is generally considered a robust and user-centric way to locate a checkbox or radio button in Playwright, assuming HTML labels are correctly associated?	2	Locating Checkboxes Radios	9	2025-05-14 11:16:54.518106+00	2025-05-14 11:16:54.518109+00	t	25	19
401	In `pytest-playwright`, what does the `page` fixture primarily represent for your test function?	2	page Fixture	10	2025-05-14 11:16:54.518122+00	2025-05-14 11:16:54.518125+00	t	25	19
402	How can you use <code>to_have_attribute</code> to verify only the presence of an HTML attribute on an element, without checking its specific value?	2	to_have_attribute Presence	11	2025-05-14 11:16:54.518137+00	2025-05-14 11:16:54.51814+00	t	25	19
403	What is a primary risk associated with using highly structural CSS selectors like `div &gt; div &gt; .item-list &gt; div:nth-child(3)`?	2	CSS Structural Brittleness	12	2025-05-14 11:16:54.518152+00	2025-05-14 11:16:54.518155+00	t	25	19
404	What is the primary purpose of Playwright's actionability checks performed before executing a <code>.click()</code> action?	2	Click Actionability	13	2025-05-14 11:16:54.518168+00	2025-05-14 11:16:54.518171+00	t	25	19
405	How can you instruct `page.screenshot()` to capture the entire scrollable length of a web page, not just the visible viewport?	2	page.screenshot() Options	14	2025-05-14 11:16:54.518183+00	2025-05-14 11:16:54.518186+00	t	25	19
406	Consider the following `pytest-playwright` test function signature. How does the test gain access to the browser page object?\n\n<pre><code class="language-python">\nfrom playwright.sync_api import Page\n\ndef test_my_feature(page: Page):\n    # test code uses 'page'\n    pass\n</code></pre>	2	page Fixture Usage	15	2025-05-14 11:16:54.518199+00	2025-05-14 11:16:54.518202+00	t	25	19
407	Which of the following conditions would typically cause <code>expect(locator).to_be_visible()</code> to fail, even if the element exists in the DOM and has <code>display: block</code>?	2	to_be_visible	16	2025-05-14 11:16:54.518214+00	2025-05-14 11:16:54.518217+00	t	25	19
408	When you install `pytest-playwright` using <code>pip install pytest-playwright</code>, which other crucial Playwright-related Python package is automatically installed as a dependency?	2	Dependency Management	17	2025-05-14 11:16:54.518229+00	2025-05-14 11:16:54.518232+00	t	25	19
409	When <code>my_radio_button.check()</code> is called on a radio button that is part of a group (same <code>name</code> attribute), what happens to other radio buttons in the same group?	2	Radio Button Check	18	2025-05-14 11:16:54.518246+00	2025-05-14 11:16:54.51825+00	t	25	19
410	The text mentions using <code>expect(page).to_have_title("Example Domain")</code>. What is the primary advantage of using Playwright's `expect` assertion library over standard Python `assert` for web testing?	2	expect() Function	19	2025-05-14 11:16:54.518263+00	2025-05-14 11:16:54.518266+00	t	25	19
411	What is a key benefit of Playwright's <code>expect()</code> function concerning test stability and reliability?	2	Auto-waiting	20	2025-05-14 11:16:54.518278+00	2025-05-14 11:16:54.518281+00	t	25	19
440	What is a crucial prerequisite that must be met before calling `form.save()` on a Django `ModelForm` instance within a test (and in typical application code)?	3	Save Prerequisite	9	2025-05-14 11:16:58.162516+00	2025-05-14 11:16:58.162519+00	t	27	22
412	If an `EmailField` in a Django form is defined as `email = forms.EmailField(error_messages={'required': 'Kindly supply your email.'})`, and a form submission omits the 'email' field entirely, what error message should be present in `form.errors['email']`?	3	Custom Error Message	1	2025-05-14 11:16:56.341357+00	2025-05-14 11:16:56.341372+00	t	26	21
413	How does the Django test `client` (used by `pytest-django`'s `client` fixture) interact with the Django request-response cycle?	3	Client Mechanism	2	2025-05-14 11:16:56.341392+00	2025-05-14 11:16:56.341396+00	t	26	21
414	How does Django's test `client` typically handle CSRF tokens when making POST requests?	3	CSRF Handling	3	2025-05-14 11:16:56.34141+00	2025-05-14 11:16:56.341414+00	t	26	21
415	In Django form processing, when is the `form.cleaned_data` dictionary typically populated, and what does it contain?	3	cleaned_data	4	2025-05-14 11:16:56.341428+00	2025-05-14 11:16:56.341432+00	t	26	21
416	If `response = client.get(url, follow=True)` results in following one or more redirects, what information does `response.redirect_chain` provide?	3	response.redirect_chain	5	2025-05-14 11:16:56.341445+00	2025-05-14 11:16:56.341448+00	t	26	21
417	Why is a marker like `@pytest.mark.django_db` (for Pytest) or inheriting from `django.test.TestCase` (for unittest) essential when writing tests for `ModelForm.save()` methods?	3	django_db marker	6	2025-05-14 11:16:56.34146+00	2025-05-14 11:16:56.341464+00	t	26	21
418	In a Post/Redirect/Get scenario, a view adds a success message using `messages.success(request, ...)` and then redirects. You test this with `response = client.post(url, data, follow=True)`. Where would you typically find the success message?	3	Messages with Redirect	7	2025-05-14 11:16:56.341477+00	2025-05-14 11:16:56.34148+00	t	26	21
419	When a Django view uses `django.shortcuts.render(request, template_name, context)`, how can you access the `context` dictionary data in your `pytest-django` test after a `client.get()` call?	3	response.context	8	2025-05-14 11:16:56.341494+00	2025-05-14 11:16:56.341497+00	t	26	21
420	When testing a model property like `@property def is_eligible(self):`, which relies on other model fields, what is a good testing strategy?	3	testing model property	9	2025-05-14 11:16:56.34151+00	2025-05-14 11:16:56.341514+00	t	26	21
421	Consider a `PostQuerySet` with methods `published(self)` and `by_author(self, author)`.\nHow would you test the scenario of retrieving all published posts by a specific author using these chainable methods?	3	chaining queryset methods	10	2025-05-14 11:16:56.341526+00	2025-05-14 11:16:56.34153+00	t	26	21
422	When using `client.force_login(user, backend='django.contrib.auth.backends.ModelBackend')`, why is it often good practice to provide the `backend` argument?	3	force_login backend	11	2025-05-14 11:16:56.341542+00	2025-05-14 11:16:56.341546+00	t	26	21
423	After a Django form's validation has failed due to an invalid 'email' field, how do you access the list of specific error messages associated with the 'email' field?	3	Field Specific Errors	12	2025-05-14 11:16:56.341558+00	2025-05-14 11:16:56.341561+00	t	26	21
424	In a Django project using <code>pytest</code>, what is the most fundamental setting typically configured in <code>pytest.ini</code> to enable <code>pytest-django</code>?	3	DJANGO_SETTINGS_MODULE	13	2025-05-14 11:16:56.341574+00	2025-05-14 11:16:56.341577+00	t	26	21
425	If a Django form field has an `initial` value (e.g., `subject = forms.CharField(initial="Default")`) and data is submitted for the form, but the `'subject'` key is *omitted* from the submitted data dictionary, what happens to the 'subject' field when the form is bound?	3	Initial vs Data	14	2025-05-14 11:16:56.341589+00	2025-05-14 11:16:56.341592+00	t	26	21
426	How do you typically raise a validation error from within a Django form's `clean()` method that should be considered a "non-field error" (i.e., an error applying to the form as a whole)?	3		15	2025-05-14 11:16:56.341604+00	2025-05-14 11:16:56.341607+00	t	26	21
427	What is a key advantage of using `assertContains(response, "User Name")` over manually checking `assert "User Name" in response.content.decode()`?	3		16	2025-05-14 11:16:56.341619+00	2025-05-14 11:16:56.341622+00	t	26	21
428	When testing the `save()` method of a `ModelForm` for creating a new database object, what key aspects should typically be verified?	3	Save Create Object	17	2025-05-14 11:16:56.341634+00	2025-05-14 11:16:56.341637+00	t	26	21
429	What is a potential pitfall of writing tests that assert against Django's exact default error message strings, and what's a common mitigation strategy?	3	Error Message Brittleness	18	2025-05-14 11:16:56.34165+00	2025-05-14 11:16:56.341653+00	t	26	21
430	A `FeedbackForm` defines `name = forms.CharField(required=True)`. If test data `{'email': 'user@example.com', 'message': 'A message'}` (omitting 'name') is submitted to this form, which set of assertions correctly tests for the missing 'name' error?	3	Required Field Error	19	2025-05-14 11:16:56.341665+00	2025-05-14 11:16:56.341668+00	t	26	21
431	What is the primary advantage of using the `client` fixture provided by `pytest-django` for testing Django views compared to end-to-end browser tests?	3	Client Benefits	20	2025-05-14 11:16:56.341681+00	2025-05-14 11:16:56.341684+00	t	26	21
432	In `pytest-django`, what is the role of a fixture like `@pytest.fixture def my_user(db): return User.objects.create_user(...)` when testing model manager or QuerySet methods that involve users?	3	pytest fixtures data	1	2025-05-14 11:16:58.162364+00	2025-05-14 11:16:58.162379+00	t	27	22
433	Consider a Django model field defined as:\n`status = models.CharField(max_length=10, default='PENDING')`\nIf you create an instance of this model in a test without specifying the `status` field (e.g., `MyModel.objects.create(name="Test")`), what value will `instance.status` have?	3	model field default	2	2025-05-14 11:16:58.162399+00	2025-05-14 11:16:58.162403+00	t	27	22
434	If `response.context` is a `ContextList` (a list-like structure of context dictionaries), how does accessing an item like `response.context['my_key']` typically behave?	3	ContextList Behavior	3	2025-05-14 11:16:58.162417+00	2025-05-14 11:16:58.16242+00	t	27	22
435	If a test function attempts to perform a Django ORM operation (e.g., `MyModel.objects.create()`) without being decorated with `@pytest.mark.django_db` or an equivalent fixture, what is the most likely outcome?	3	django_db marker error	4	2025-05-14 11:16:58.162434+00	2025-05-14 11:16:58.162438+00	t	27	22
436	In the context of testing Django forms, which aspect is most effectively verified using unit tests?	3	Form Validation Testing	5	2025-05-14 11:16:58.162451+00	2025-05-14 11:16:58.162455+00	t	27	22
437	Why is it generally insufficient to only `assert not form.is_valid()` when testing form submissions with invalid data, and what additional checks are highly recommended?	3	Error Message Specificity	6	2025-05-14 11:16:58.162469+00	2025-05-14 11:16:58.162472+00	t	27	22
438	If your Django project is named <code>my_store</code> and its main settings file is <code>my_store/settings.py</code>, what would be the correct value for <code>DJANGO_SETTINGS_MODULE</code> in <code>pytest.ini</code>?	3	DJANGO_SETTINGS_MODULE	7	2025-05-14 11:16:58.162485+00	2025-05-14 11:16:58.162488+00	t	27	22
439	Why is the default transactional behavior of `@pytest.mark.django_db` (rolling back changes after each test) beneficial for testing?	3	test isolation speed	8	2025-05-14 11:16:58.1625+00	2025-05-14 11:16:58.162504+00	t	27	22
669	What is a key limitation of expressions within the Django `{% if %}` template tag?	3	if tag limitations	20	2025-05-14 11:17:19.733663+00	2025-05-14 11:17:19.733666+00	t	39	33
441	When testing a Django view that lists filtered items, like the `article_list_view` example, what does asserting `unpublished_article not in response.context['articles']` primarily confirm?	3	View Logic Context Assertion	10	2025-05-14 11:16:58.162531+00	2025-05-14 11:16:58.162535+00	t	27	22
442	What happens when you use `client.get(url, follow=True)` for a URL that issues a redirect?	3	follow=True	11	2025-05-14 11:16:58.162547+00	2025-05-14 11:16:58.16255+00	t	27	22
443	If `model_obj = my_form.save(commit=False)` is executed, and `model_obj` is subsequently modified (e.g., `model_obj.author = current_user`), how is `model_obj` then actually persisted to the database?	3	commit=False Persist	12	2025-05-14 11:16:58.162563+00	2025-05-14 11:16:58.162566+00	t	27	22
444	In a test scenario where you update an existing model instance `my_instance` using `form.save()`, why might it be necessary to call `my_instance.refresh_from_db()` before asserting changes on `my_instance`'s attributes?	3	refresh_from_db	13	2025-05-14 11:16:58.162578+00	2025-05-14 11:16:58.162581+00	t	27	22
445	If a Django model method involves complex calculations based on its own fields and does NOT access the database or related models, what is the most appropriate way to test it?	3	Model Method Testing	14	2025-05-14 11:16:58.162593+00	2025-05-14 11:16:58.162597+00	t	27	22
446	What is the primary purpose of the <code>pytest-django</code> plugin?	3	pytest-django	15	2025-05-14 11:16:58.162609+00	2025-05-14 11:16:58.162612+00	t	27	22
447	What is the primary role of the <code>@pytest.mark.django_db</code> marker when applied to a test function in a `pytest-django` setup?	3	@pytest.mark.django_db	16	2025-05-14 11:16:58.162624+00	2025-05-14 11:16:58.162627+00	t	27	22
448	What is a likely consequence if <code>DJANGO_SETTINGS_MODULE</code> is not correctly configured when using <code>pytest-django</code>?	3	DJANGO_SETTINGS_MODULE	17	2025-05-14 11:16:58.162639+00	2025-05-14 11:16:58.162642+00	t	27	22
449	When testing a Django model, why is it good practice to fetch an object from the database after creating it and then assert its field values, rather than only asserting values on the instance returned by `MyModel.objects.create()`?	3	persistence verification	18	2025-05-14 11:16:58.162654+00	2025-05-14 11:16:58.162657+00	t	27	22
450	Given a Django form `MyForm` with `name = forms.CharField(required=True)` and `send_updates = forms.BooleanField(required=False)`. If `form_data = {'name': 'Valid Name'}` (omitting `send_updates`) is used to instantiate the form, what is the most likely outcome after calling `form.is_valid()`?	3	Valid Data Optional	19	2025-05-14 11:16:58.16267+00	2025-05-14 11:16:58.162673+00	t	27	22
451	Within a Django form test, how can you programmatically determine if a form instance has been instantiated with data (i.e., it's a "bound" form)?	3	is_bound attribute	20	2025-05-14 11:16:58.162694+00	2025-05-14 11:16:58.162697+00	t	27	22
452	What HTTP status code would you typically assert for a successful GET request to an existing, publicly accessible page?	3	Status Codes	1	2025-05-14 11:17:00.004349+00	2025-05-14 11:17:00.004365+00	t	28	23
453	When simulating a standard HTML form submission using `client.post(path, data=form_data)`, what is the typical `content_type` that the client uses by default if not specified?	3	client.post content_type	2	2025-05-14 11:17:00.004384+00	2025-05-14 11:17:00.004388+00	t	28	23
454	What is the default transactional behavior when a test function is decorated with `@pytest.mark.django_db`?	3	transaction behavior	3	2025-05-14 11:17:00.004402+00	2025-05-14 11:17:00.004406+00	t	28	23
455	After `response = client.get(url_that_redirects)`, how do you typically get the URL that the client would be redirected to?	3	response.url	4	2025-05-14 11:17:00.004419+00	2025-05-14 11:17:00.004423+00	t	28	23
456	Which of the following scenarios is a prime candidate for an integration test in Django, rather than a unit test?	3	What to Integrate	5	2025-05-14 11:17:00.004436+00	2025-05-14 11:17:00.004439+00	t	28	23
457	In the unit test example for `BlogPost.is_published_recently()`, specifically `test_post_published_exactly_seven_days_ago()`, why does the assertion `assert is_recent is False` pass?\nThe method's logic is: `self.published_date &gt; seven_days_ago and self.published_date = now`.	3	Boundary Conditions Date Logic	6	2025-05-14 11:17:00.004452+00	2025-05-14 11:17:00.004455+00	t	28	23
458	When instantiating a Django form in a test to simulate user-submitted data for the purpose of validation, which parameter should be used to pass this data?	3	Form Instantiation Data	7	2025-05-14 11:17:00.004468+00	2025-05-14 11:17:00.004471+00	t	28	23
459	A `Message` object retrieved from `get_messages` has a `level` attribute. How should you typically compare this level in your tests?	3	Message Level	8	2025-05-14 11:17:00.004484+00	2025-05-14 11:17:00.004488+00	t	28	23
460	When testing a custom QuerySet method like `older_than(self, days)`, which filters objects based on a date field, what's an important consideration for making the tests reliable across different execution times?	3	time-sensitive testing	9	2025-05-14 11:17:00.004501+00	2025-05-14 11:17:00.004504+00	t	28	23
461	In a Django form test, if a form's `clean()` method is expected to raise a non-field error, how can you typically access and verify these specific errors?	3	Accessing NonFieldErrors	10	2025-05-14 11:17:00.004517+00	2025-05-14 11:17:00.00452+00	t	28	23
462	Consider the following Django form field:\n<pre><code class="language-python">\n# contact_app/forms.py\nclass ContactForm(forms.Form):\n    subject = forms.CharField(max_length=200, initial="General Inquiry", required=False)\n    # other fields...\n</code></pre>\nIf an instance is created as `form = ContactForm(data={'name': 'Test Name'})` (omitting 'subject' from the `data` dictionary), what is true about `form.data` regarding the 'subject' field?	3	Initial Data Omission	11	2025-05-14 11:17:00.004533+00	2025-05-14 11:17:00.004536+00	t	28	23
463	If your Django application uses custom middleware, what type of test would be most appropriate to verify that this middleware correctly processes requests and responses as part of the request-response cycle?	3	Middleware Testing	12	2025-05-14 11:17:00.004549+00	2025-05-14 11:17:00.004552+00	t	28	23
464	One of the benefits of unit tests is "Confidence in Refactoring." How do unit tests primarily provide this confidence?	3	Refactoring Confidence	13	2025-05-14 11:17:00.004564+00	2025-05-14 11:17:00.004567+00	t	28	23
465	What is a key reason for creating custom Model Managers or custom QuerySet methods in Django?	3	manager queryset purpose	14	2025-05-14 11:17:00.00458+00	2025-05-14 11:17:00.004583+00	t	28	23
466	If a Django view explicitly raises `django.http.Http404`, what status code will the `client` generally observe in the response?	3	Http404 Handling	15	2025-05-14 11:17:00.004596+00	2025-05-14 11:17:00.004599+00	t	28	23
467	If a custom validation method `clean_feedback_text()` in a Django form raises `forms.ValidationError("Feedback too short.")`, how would you typically verify this specific error occurred in a test after submitting invalid data?	3	clean_fieldname Method	16	2025-05-14 11:17:00.004611+00	2025-05-14 11:17:00.004615+00	t	28	23
468	Which of the following describes a key difference in how Playwright (controlling a real browser) and Django's `client` fixture handle HTML content from a view?	3	HTML Rendering CSS	17	2025-05-14 11:17:00.004627+00	2025-05-14 11:17:00.00463+00	t	28	23
469	Why is it generally NOT recommended to write unit tests for Django's built-in functionality, such as verifying that <code>CharField</code> stores a string?	3	Test Scope	18	2025-05-14 11:17:00.004643+00	2025-05-14 11:17:00.004646+00	t	28	23
470	When writing an integration test for a Django view that processes form submissions, what is a key aspect to verify for an *invalid* submission?	3	View Form Invalid Submission	19	2025-05-14 11:17:00.004713+00	2025-05-14 11:17:00.004716+00	t	28	23
471	After `new_object = form.save(commit=False)` is called for a `ModelForm` that is creating a new object (not updating an existing one), what is typically true about `new_object.pk` and the database state?	3	commit=False State	20	2025-05-14 11:17:00.004729+00	2025-05-14 11:17:00.004733+00	t	28	23
472	Which GitHub Action is typically used to save files generated during a workflow run, such as test coverage reports or build outputs, so they can be downloaded later?	4	Upload Artifact	1	2025-05-14 11:17:01.870169+00	2025-05-14 11:17:01.870185+00	t	29	24
473	What is the primary purpose of a <code>requirements.txt</code> file in a Python project?	4	requirements.txt	2	2025-05-14 11:17:01.870205+00	2025-05-14 11:17:01.87021+00	t	29	24
474	What is the primary difference between `unittest.mock.Mock` and `unittest.mock.MagicMock`?	4	MagicMock	3	2025-05-14 11:17:01.870224+00	2025-05-14 11:17:01.870228+00	t	29	24
475	What is the main benefit of caching dependencies (like Python packages installed via pip or Playwright browser binaries) in a GitHub Actions workflow?	4	Dependency Caching	4	2025-05-14 11:17:01.870242+00	2025-05-14 11:17:01.870245+00	t	29	24
476	What is a common pitfall when `autospec=True` is NOT used with `unittest.mock.patch`, potentially leading to misleadingly passing tests?	4	autospec benefits	5	2025-05-14 11:17:01.870259+00	2025-05-14 11:17:01.870263+00	t	29	24
477	Which `unittest.mock` assertion method should be used to verify that a mock method named `send_data` was called exactly once, and that single call was with the arguments `customer_id=101` and `payload={'type': 'update'}`?	4	assert_called_once_with	6	2025-05-14 11:17:01.870276+00	2025-05-14 11:17:01.87028+00	t	29	24
478	What is the primary goal of Continuous Integration (CI) in software development?	4	Continuous Integration	7	2025-05-14 11:17:01.870293+00	2025-05-14 11:17:01.870297+00	t	29	24
479	What is the primary reason a fixture that performs Django ORM operations (e.g., `Model.objects.create()`) must be decorated with `@pytest.mark.django_db`?	4	django_db marker	8	2025-05-14 11:17:01.87031+00	2025-05-14 11:17:01.870314+00	t	29	24
480	What is the recommended best practice if you encounter the `PytestDeprecationWarning: The django_db marker should be used explicitly on fixtures that need database access`?	4	DeprecationWarning django_db	9	2025-05-14 11:17:01.870334+00	2025-05-14 11:17:01.870337+00	t	29	24
481	In advanced mocking with `pytest-mock`, what is the described purpose of `mocker.spy()`?	4	mocker.spy	10	2025-05-14 11:17:01.870351+00	2025-05-14 11:17:01.870354+00	t	29	24
482	What is described as a major advantage of using the `factory_boy` library for generating test data in Django projects, especially for models with relationships?	4	factory_boy Advantage	11	2025-05-14 11:17:01.870367+00	2025-05-14 11:17:01.870371+00	t	29	24
483	Which command is commonly used to create a new virtual environment named <code>venv</code> using Python's built-in <code>venv</code> module?	4	venv creation	12	2025-05-14 11:17:01.870384+00	2025-05-14 11:17:01.870387+00	t	29	24
484	When testing a standard Django form submission view that is CSRF-protected, why is it generally unnecessary to manually fetch and include the `csrfmiddlewaretoken` when using `pytest-django`'s `client.post()`?	4	Test Client CSRF Handling	13	2025-05-14 11:17:01.8704+00	2025-05-14 11:17:01.870403+00	t	29	24
485	If a mock method's `side_effect` is configured with a list of values, for example, `mock_method.side_effect = ["first", "second"]`, what will happen if `mock_method()` is called a third time?	4	Mock side_effect Iterable	14	2025-05-14 11:17:01.870416+00	2025-05-14 11:17:01.870419+00	t	29	24
486	What is a key advantage of using the `mocker` fixture provided by the `pytest-mock` plugin, as mentioned in the text?	4	mocker fixture	15	2025-05-14 11:17:01.870432+00	2025-05-14 11:17:01.870435+00	t	29	24
487	What are the two indispensable elements that the `live_server` fixture ingeniously combines for E2E testing in Django?	4	Core Components	16	2025-05-14 11:17:01.870449+00	2025-05-14 11:17:01.870452+00	t	29	24
488	Besides consistency and frequency, what key benefit of automating test runs using a CI server like GitHub Actions is particularly emphasized in the text for providing "peaceful nights" and "confidence in deployments"?	4	Automated Testing Benefits	17	2025-05-14 11:17:01.870465+00	2025-05-14 11:17:01.870468+00	t	29	24
489	How can you configure a single GitHub Actions job to run your test suite against multiple Python versions, such as 3.9, 3.10, and 3.11?	4	Python Version Matrix	18	2025-05-14 11:17:01.87048+00	2025-05-14 11:17:01.870484+00	t	29	24
490	For what type of performance testing is the tool `locust` primarily designed, according to the text?	4	Locust	19	2025-05-14 11:17:01.870496+00	2025-05-14 11:17:01.8705+00	t	29	24
491	In `unittest.mock`, when is `patch.object()` most appropriately used compared to the standard `@patch()` decorator?	4	patch.object	20	2025-05-14 11:17:01.870512+00	2025-05-14 11:17:01.870516+00	t	29	24
492	Why is the dynamic allocation of port numbers for the `live_server` a critical design choice in `pytest-django`?	4	Dynamic Port Allocation	1	2025-05-14 11:17:03.37127+00	2025-05-14 11:17:03.371286+00	t	30	24
493	How does the `live_server` fixture ensure that the Django application it runs is connected to the correct, isolated test database prepared by `@pytest.mark.django_db`?	4	Test Database Connection	2	2025-05-14 11:17:03.371306+00	2025-05-14 11:17:03.37131+00	t	30	24
494	What is the primary purpose of the `actions/checkout@vX` action in a GitHub Actions workflow file?	4	actions/checkout	3	2025-05-14 11:17:03.371324+00	2025-05-14 11:17:03.371327+00	t	30	24
495	How should sensitive information, such as API keys or production database credentials that might be needed for certain types of tests, be securely managed and accessed within GitHub Actions workflows?	4	GitHub Secrets	4	2025-05-14 11:17:03.371341+00	2025-05-14 11:17:03.371344+00	t	30	24
496	The text describes a `PytestDeprecationWarning` related to database access in fixtures. What is the core issue this warning addresses?	4	DeprecationWarning django_db	5	2025-05-14 11:17:03.371357+00	2025-05-14 11:17:03.371361+00	t	30	24
497	In the "restaurant analogy" used in the provided text, if `live_server` is the operational restaurant and Django is the kitchen, what does a Playwright-controlled browser represent?	4	User Simulation	6	2025-05-14 11:17:03.371374+00	2025-05-14 11:17:03.371377+00	t	30	24
498	Which `pytest` plugin is specifically mentioned in the text as providing excellent support for testing asynchronous Python code written with `asyncio`, allowing tests to be defined as `async def` functions?	4	pytest-asyncio	7	2025-05-14 11:17:03.37139+00	2025-05-14 11:17:03.371393+00	t	30	24
499	What is a primary reason for Django's testing framework creating a separate, isolated database for test runs?	4	Test Database Purpose	8	2025-05-14 11:17:03.371406+00	2025-05-14 11:17:03.371409+00	t	30	24
500	What is a key characteristic of property-based testing, for example, when using a tool like Hypothesis?	4	Hypothesis	9	2025-05-14 11:17:03.371421+00	2025-05-14 11:17:03.371425+00	t	30	24
501	What is considered the "golden rule" for using `unittest.mock.patch` regarding the target string (e.g., `'module.submodule.object_to_patch'`)?	4	Patch Where Looked Up	10	2025-05-14 11:17:03.371437+00	2025-05-14 11:17:03.371441+00	t	30	24
502	What information does the `live_server.url` attribute, provided by the `live_server` fixture, typically contain?	4	Server Address	11	2025-05-14 11:17:03.371453+00	2025-05-14 11:17:03.371456+00	t	30	24
503	What is a primary benefit of using virtual environments in Python development?	4	Virtual Environments	12	2025-05-14 11:17:03.371469+00	2025-05-14 11:17:03.371472+00	t	30	24
504	In a GitHub Actions workflow YAML file, what does the `on` keyword specify?	4	Workflow Trigger	13	2025-05-14 11:17:03.371485+00	2025-05-14 11:17:03.371488+00	t	30	24
505	In `pytest-django`, how is data isolation typically maintained between different test functions that interact with the database (e.g., those marked with `@pytest.mark.django_db`)?	4	pytest-django Transaction Rollback	14	2025-05-14 11:17:03.3715+00	2025-05-14 11:17:03.371503+00	t	30	24
506	What is the primary benefit of using `autospec=True` (or `create_autospec=True`) when patching an object with `unittest.mock.patch`?	4	autospec=True	15	2025-05-14 11:17:03.371516+00	2025-05-14 11:17:03.371519+00	t	30	24
507	In `unittest.mock`, if you want a mock object's method call (e.g., `mock_service.do_task()`) to raise a `ValueError("Invalid input")` when it's called, how would you configure the mock?	4	Mock side_effect Exception	16	2025-05-14 11:17:03.371532+00	2025-05-14 11:17:03.371535+00	t	30	24
508	Which of the following is highlighted as a best practice for effective mocking in the provided text?	4	Mocking Best Practices	17	2025-05-14 11:17:03.371547+00	2025-05-14 11:17:03.37155+00	t	30	24
509	According to the lifecycle of `live_server` in a test, what typically happens immediately after `pytest-django` ensures the test database is ready and before Playwright starts interacting with the application?	4	Server Activation	18	2025-05-14 11:17:03.371563+00	2025-05-14 11:17:03.371566+00	t	30	24
510	In the `pytest-django` test database lifecycle, what is the state of the database tables immediately after the "Applying Migrations" phase but before any individual test's specific data setup code (e.g., in fixtures or the test body) runs?	4	Migrations Initial State	19	2025-05-14 11:17:03.371578+00	2025-05-14 11:17:03.371581+00	t	30	24
511	What is a primary advantage of using the Django ORM (e.g., `MyModel.objects.create()`) to create test data compared to writing raw SQL queries in your tests?	4	ORM benefits	20	2025-05-14 11:17:03.371593+00	2025-05-14 11:17:03.371597+00	t	30	24
512	In the context of detecting content overflow within an HTML element, what does it typically signify if that element's `scrollHeight` property is greater than its `clientHeight` property?	5	Overflow Detection	1	2025-05-14 11:17:05.188357+00	2025-05-14 11:17:05.188373+00	t	31	25
513	Which Playwright `Page` method is used to capture a screenshot of the current page and save it to a specified file path?	5	page.screenshot	2	2025-05-14 11:17:05.188392+00	2025-05-14 11:17:05.188396+00	t	31	25
514	In responsive web design, why might developers use entirely different HTML elements (and thus different locators for testing) for similar functionality across various screen sizes (e.g., a desktop menu vs. a mobile hamburger icon)?	5	Locator Strategy	3	2025-05-14 11:17:05.18841+00	2025-05-14 11:17:05.188414+00	t	31	25
515	One of the key takeaways for reliable E2E login tests in Django is to always use `live_server.url` as the base for navigation. Why is this crucial?	5	live_server.url usage	4	2025-05-14 11:17:05.188428+00	2025-05-14 11:17:05.188431+00	t	31	25
516	Why is using fixed waits like <code>page.wait_for_timeout(2000)</code> or <code>time.sleep(2)</code> generally discouraged in Playwright tests for synchronization?	5	Problem with Fixed Waits	5	2025-05-14 11:17:05.188444+00	2025-05-14 11:17:05.188448+00	t	31	25
517	Consider the code:\n<pre><code class="language-python">\nwith page.expect_response("**/api/data"):\n    page.locator("#fetch-button").click()\n</code></pre>\nWhat does this Playwright snippet achieve?	5	expect_response context	6	2025-05-14 11:17:05.188461+00	2025-05-14 11:17:05.188465+00	t	31	25
518	Which of the following Playwright approaches is the most robust and efficient way to wait for an element with <code>id="result"</code> to become visible after clicking a button?	5	Conditional Waits	7	2025-05-14 11:17:05.188478+00	2025-05-14 11:17:05.188481+00	t	31	25
519	What fundamental principle does relying on Playwright's actionability checks and <code>expect()</code> assertions with timeouts adhere to, in contrast to fixed waits?	5	Conditional vs Time Waits	8	2025-05-14 11:17:05.188494+00	2025-05-14 11:17:05.188497+00	t	31	25
520	What does the `element_handle.bounding_box()` (or `locator.bounding_box()`) method in Playwright typically return if the element is visible and part of the layout?	5	bounding_box	9	2025-05-14 11:17:05.18851+00	2025-05-14 11:17:05.188513+00	t	31	25
521	How does `page.set_viewport_size()` typically trigger responsive changes in a web page?	5	set_viewport_size Mechanism	10	2025-05-14 11:17:05.188525+00	2025-05-14 11:17:05.188529+00	t	31	25
522	Which of the following code snippets correctly demonstrates setting a mobile viewport in Playwright using recommended practices?\n<pre><code class="language-python">\n# Assume 'page' is a Playwright Page object\n# mobile_dimensions = ?\n</code></pre>	5	set_viewport_size Syntax	11	2025-05-14 11:17:05.188541+00	2025-05-14 11:17:05.188544+00	t	31	25
523	In a basic Visual Regression Testing workflow using Playwright, what is the significance of a "baseline screenshot"?	5	Baseline Screenshot	12	2025-05-14 11:17:05.188557+00	2025-05-14 11:17:05.18856+00	t	31	25
524	What is the primary purpose of Playwright's `page.set_viewport_size()` method in the context of testing responsive Django applications?	5	set_viewport_size	13	2025-05-14 11:17:05.188572+00	2025-05-14 11:17:05.188575+00	t	31	25
525	For optimal results when testing responsive behavior, when is it generally best practice to call `page.set_viewport_size()`?	5	set_viewport_size Timing	14	2025-05-14 11:17:05.188588+00	2025-05-14 11:17:05.188591+00	t	31	25
526	Which of the following is a common characteristic of a "brittle" locator?	5	Brittle Locator Trait	15	2025-05-14 11:17:05.188603+00	2025-05-14 11:17:05.188606+00	t	31	25
527	What is a common pitfall to avoid when using `page.goto()` in Playwright tests that rely on Django's `live_server` fixture?	5	Hardcoded URLs	16	2025-05-14 11:17:05.188619+00	2025-05-14 11:17:05.188622+00	t	31	25
528	When using <code>page.wait_for_url(url_condition, wait_until="domcontentloaded")</code>, what does Playwright wait for?	5	wait_until parameter	17	2025-05-14 11:17:05.188634+00	2025-05-14 11:17:05.188637+00	t	31	25
529	What is the primary function of the <code>page.set_viewport_size({"width": W, "height": H})</code> method in Playwright when testing responsive UIs?	5	set_viewport_size	18	2025-05-14 11:17:05.18865+00	2025-05-14 11:17:05.188653+00	t	31	25
530	What is the fundamental principle of Visual Regression Testing (VRT)?	5	VRT Basics	19	2025-05-14 11:17:05.188664+00	2025-05-14 11:17:05.188677+00	t	31	25
531	Under what rare circumstance might <code>page.wait_for_timeout()</code> be used, albeit with extreme caution and typically not for UI synchronization?	5	page.wait_for_timeout Usage	20	2025-05-14 11:17:05.188689+00	2025-05-14 11:17:05.188692+00	t	31	25
532	When is using <code>page.wait_for_response()</code> generally more appropriate than waiting for a UI change with <code>expect(locator)...</code>?	5	Response vs UI Wait	1	2025-05-14 11:17:07.011279+00	2025-05-14 11:17:07.011295+00	t	32	26
533	What is the fundamental problem with locators that are tightly coupled to the HTML structure?	5	Structural Coupling Problem	2	2025-05-14 11:17:07.011314+00	2025-05-14 11:17:07.011318+00	t	32	26
534	What is the core principle for writing robust and resilient locators, as suggested by the text?	5	Robust Locator Principle	3	2025-05-14 11:17:07.011331+00	2025-05-14 11:17:07.011334+00	t	32	26
535	If `live_server.url` is `http://127.0.0.1:8081` and you want Playwright to navigate to a page at the path `/app/items/`, how would you typically form the URL for `page.goto()`?	5	page.goto usage	4	2025-05-14 11:17:07.011347+00	2025-05-14 11:17:07.011351+00	t	32	26
536	Why can testing drag-and-drop interactions sometimes be more complex or less reliable than simpler actions like clicks?	5	Drag and Drop Reliability	5	2025-05-14 11:17:07.011363+00	2025-05-14 11:17:07.011367+00	t	32	26
537	Why is a locator like `div.product-list &gt; div.product-card:nth-child(2) &gt; button` often considered bad practice for test automation?	5	nth-child Brittleness	6	2025-05-14 11:17:07.011379+00	2025-05-14 11:17:07.011382+00	t	32	26
538	Given a Django view mapped to the root URL (`/`) of an application, and `live_server.url` providing `http://localhost:55555`, which `page.goto()` call correctly navigates to this root page?	5	Root URL Navigation	7	2025-05-14 11:17:07.011395+00	2025-05-14 11:17:07.011398+00	t	32	26
539	What is the primary function of <code>page.wait_for_url()</code> in Playwright?	5	page.wait_for_url	8	2025-05-14 11:17:07.01141+00	2025-05-14 11:17:07.011414+00	t	32	26
540	In the context of testing responsive web designs with Playwright, what is a crucial consideration regarding element visibility?	5	Viewport Visibility	9	2025-05-14 11:17:07.011427+00	2025-05-14 11:17:07.011431+00	t	32	26
541	What is a likely consequence if a test uses <code>page.wait_for_timeout(500)</code> but the UI element it's implicitly waiting for takes 1 second to appear?	5	Flaky Tests	10	2025-05-14 11:17:07.011444+00	2025-05-14 11:17:07.011447+00	t	32	26
542	What is the primary goal of visual regression testing in web application development?	5	Visual Testing Purpose	11	2025-05-14 11:17:07.01146+00	2025-05-14 11:17:07.011463+00	t	32	26
543	What is the primary purpose of <code>page.wait_for_response()</code> in Playwright tests?	5	page.wait_for_response	12	2025-05-14 11:17:07.011476+00	2025-05-14 11:17:07.011479+00	t	32	26
544	Under which circumstance might a locator involving some positional aspect (like `:first-child`) be *cautiously* considered, according to the text?	5	Positional Locator Exception	13	2025-05-14 11:17:07.011491+00	2025-05-14 11:17:07.011494+00	t	32	26
545	How can you access an element's DOM properties like `scrollWidth` and `clientWidth` in a Playwright test, for example, to check for horizontal overflow?	5	Element Properties evaluate	14	2025-05-14 11:17:07.011506+00	2025-05-14 11:17:07.011509+00	t	32	26
546	What is a key benefit of using a predicate function (e.g., <code>lambda response: response.url.endswith("/foo") and response.status == 200</code>) with <code>page.wait_for_response()</code>?	5	Response Predicate	15	2025-05-14 11:17:07.011527+00	2025-05-14 11:17:07.01153+00	t	32	26
547	If a web page uses <code>&lt;div&gt;</code> elements styled to look like checkboxes, and JavaScript to handle their state, how should you typically interact with them in Playwright?	5	Custom Checkboxes Radios	16	2025-05-14 11:17:07.011542+00	2025-05-14 11:17:07.011545+00	t	32	26
548	Consider the following Django project structure:\n<pre><code class="language-text">\nmy_project_root/\n├── manage.py\n├── my_project/\n├── polls/\n│   ├── models.py\n│   └── tests/\n│       ├── test_models.py\n│       └── test_views.py\n└── users/\n    ├── models.py\n    └── tests/\n        └── test_models.py\n</code></pre>\nHow would you use `pytest` to run all tests for ONLY the `polls` application?	6	Targeted Test Runs	1	2025-05-14 11:17:08.827054+00	2025-05-14 11:17:08.827069+00	t	33	27
549	Which Django test discovery mechanism primarily looks for tests in files named `tests.py` or files matching `test*.py` within a `tests/` directory inside an app when using `python manage.py test`?	6	Django Test Runner	2	2025-05-14 11:17:08.827089+00	2025-05-14 11:17:08.827093+00	t	33	27
550	What is the primary benefit of defining custom methods on a QuerySet class rather than only on a Manager class in Django?	1	Custom QuerySet Methods	1	2025-05-14 11:17:10.643494+00	2025-05-14 11:17:10.643509+00	t	34	28
551	If `Author` has a related name `books` for `Book` objects, how would you use `annotate()` to add a `num_books` attribute to each `Author` instance, representing the count of books they have written?	1	annotate Count	2	2025-05-14 11:17:10.643531+00	2025-05-14 11:17:10.643535+00	t	34	28
552	What does the "N+1 query problem" in Django typically refer to?	1	N+1 Problem	3	2025-05-14 11:17:10.643549+00	2025-05-14 11:17:10.643552+00	t	34	28
553	When is it more efficient to use `queryset.exists()` rather than `queryset.count() &gt; 0` or `if queryset:` in Django?	1	QuerySet.exists()	4	2025-05-14 11:17:10.643565+00	2025-05-14 11:17:10.643568+00	t	34	28
554	If a Django ORM query is returning unexpected results (e.g., an empty QuerySet when you expect data), what is a useful first step to debug the query logic itself?	1	Debugging QuerySets	5	2025-05-14 11:17:10.643581+00	2025-05-14 11:17:10.643584+00	t	34	28
555	What does `Book.objects.all()` initially return before it's evaluated?	1	all() method	6	2025-05-14 11:17:10.643597+00	2025-05-14 11:17:10.6436+00	t	34	28
556	How does a relational database typically implement a many-to-many relationship between two tables (e.g., `Articles` and `Tags`)?	1	ManyToMany Implementation	7	2025-05-14 11:17:10.643612+00	2025-05-14 11:17:10.643616+00	t	34	28
557	What is the primary characteristic of an Abstract Base Class (ABC) in Django model inheritance?	1	Abstract Base Class	8	2025-05-14 11:17:10.643628+00	2025-05-14 11:17:10.643631+00	t	34	28
558	Which two exceptions should you typically be prepared to handle when using `Model.objects.get()` to retrieve a single object?	1	get() method exceptions	9	2025-05-14 11:17:10.643644+00	2025-05-14 11:17:10.643648+00	t	34	28
559	In Django models, what is the `Meta` inner class primarily used for?	1	Meta Class Purpose	10	2025-05-14 11:17:10.64366+00	2025-05-14 11:17:10.643663+00	t	34	28
560	What is the convenience method provided by Django's `QuerySet` class to quickly create a manager that uses that `QuerySet` as its default?	1	QuerySet as_manager	11	2025-05-14 11:17:10.643675+00	2025-05-14 11:17:10.643678+00	t	34	28
561	How can you specify a custom database table name for a Django model?	1	Meta db_table	12	2025-05-14 11:17:10.64369+00	2025-05-14 11:17:10.643693+00	t	34	28
562	What is the primary function of Django's Object-Relational Mapper (ORM)?	1	ORM Function	13	2025-05-14 11:17:10.643705+00	2025-05-14 11:17:10.643708+00	t	34	28
563	What is a primary motivation for creating a custom model manager in Django?	1	Custom Manager Purpose	14	2025-05-14 11:17:10.64372+00	2025-05-14 11:17:10.643723+00	t	34	28
564	When should you typically use `prefetch_related` instead of `select_related` in Django?	1	prefetch_related	15	2025-05-14 11:17:10.643736+00	2025-05-14 11:17:10.643739+00	t	34	28
565	To get the number of objects matching a QuerySet, why is `my_queryset.count()` generally more efficient than `len(my_queryset)`?	1	count() vs len()	16	2025-05-14 11:17:10.643751+00	2025-05-14 11:17:10.643754+00	t	34	28
566	In the context of Django and PostgreSQL, what is the role of `SearchVector` from `django.contrib.postgres.search`?	1	SearchVector Full-Text Search	17	2025-05-14 11:17:10.643766+00	2025-05-14 11:17:10.643769+00	t	34	28
567	In a Django signal receiver function connected to `post_save`, what does the `created` argument typically indicate?	1	post_save created argument	18	2025-05-14 11:17:10.643781+00	2025-05-14 11:17:10.643784+00	t	34	28
568	If you want to roll back all migrations for an app named `library`, effectively reverting its schema to an empty state (as if no migrations for it were ever applied), which command would you use?	1	Reversing Migrations	19	2025-05-14 11:17:10.643796+00	2025-05-14 11:17:10.643799+00	t	34	28
569	What is the primary function of the `python manage.py makemigrations [app_label]` command in Django?	1	makemigrations command	20	2025-05-14 11:17:10.643831+00	2025-05-14 11:17:10.643834+00	t	34	28
570	How do you typically connect a custom `ArticleQuerySet` to an `Article` model so that `Article.objects.all()` returns an instance of `ArticleQuerySet`?	1	Linking Custom QuerySet	1	2025-05-14 11:17:12.459997+00	2025-05-14 11:17:12.460013+00	t	35	29
571	If `article_obj` is an instance of an `Article` model with a `ManyToManyField` to `Tag` named `tags`, and `tag1` is a `Tag` instance, how do you associate `tag1` with `article_obj`?	1	ManyToManyField add	2	2025-05-14 11:17:12.460032+00	2025-05-14 11:17:12.460036+00	t	35	29
572	Inside a Django migration file, what does the `dependencies` attribute typically specify?	1	Migration Dependencies	3	2025-05-14 11:17:12.460056+00	2025-05-14 11:17:12.460059+00	t	35	29
573	What is the purpose of the `related_name` argument when defining a relationship field like `OneToOneField`, `ForeignKey`, or `ManyToManyField`?	1	related_name	4	2025-05-14 11:17:12.460073+00	2025-05-14 11:17:12.460076+00	t	35	29
574	The `max_length` attribute is mandatory for which of the following Django model field types?	1	max_length	5	2025-05-14 11:17:12.460089+00	2025-05-14 11:17:12.460093+00	t	35	29
575	In a Django model, if a `OneToOneField` named `profile` links `UserProfile` to `User` with `on_delete=models.CASCADE`, what happens if a `User` instance is deleted?	1	on_delete CASCADE	6	2025-05-14 11:17:12.460106+00	2025-05-14 11:17:12.46011+00	t	35	29
576	The "object-relational impedance mismatch" primarily refers to the challenges of:	1	Impedance Mismatch	7	2025-05-14 11:17:12.460123+00	2025-05-14 11:17:12.460126+00	t	35	29
577	If a `ForeignKey` field `article.author` has `on_delete=models.PROTECT`, what happens if you try to delete an `Author` instance that has associated `Article`s?	1	on_delete PROTECT	8	2025-05-14 11:17:12.460138+00	2025-05-14 11:17:12.460142+00	t	35	29
578	If you want a `ForeignKey` field to be set to `NULL` in the database when the referenced object is deleted, what options are required for that field?	1	on_delete SET_NULL	9	2025-05-14 11:17:12.460154+00	2025-05-14 11:17:12.460158+00	t	35	29
579	If you define a `models.BooleanField` in your Django model as `is_published = models.BooleanField(default=True)`, what does this mean?	1	BooleanField default	10	2025-05-14 11:17:12.46017+00	2025-05-14 11:17:12.460173+00	t	35	29
580	In Django, how does adding a database index (e.g., via `db_index=True` or `Meta.indexes`) primarily improve query performance?	1	Database Indexing Benefit	11	2025-05-14 11:17:12.460186+00	2025-05-14 11:17:12.460189+00	t	35	29
581	What is a key principle for safeguarding data integrity during complex Django migrations, especially in production?	1	Data Integrity Backups	12	2025-05-14 11:17:12.460202+00	2025-05-14 11:17:12.460205+00	t	35	29
582	When querying a parent model `Place` in an MTI setup (e.g., `Place.objects.all()`), how can you access fields specific to a child model like `Restaurant` for an instance that is indeed a Restaurant?	1	MTI Downcasting	13	2025-05-14 11:17:12.460217+00	2025-05-14 11:17:12.460221+00	t	35	29
583	What is the difference between `auto_now=True` and `auto_now_add=True` when used as options for `DateField` or `DateTimeField` in Django?	1	auto_now vs auto_now_add	14	2025-05-14 11:17:12.460233+00	2025-05-14 11:17:12.460236+00	t	35	29
584	In Django, what is the primary role of a Model class?	1	Model Definition	15	2025-05-14 11:17:12.460249+00	2025-05-14 11:17:12.460252+00	t	35	29
585	Which are the three fundamental types of database relationships that Django models can represent?	1	Relationship Types	16	2025-05-14 11:17:12.460264+00	2025-05-14 11:17:12.460267+00	t	35	29
586	How does Django's ORM contribute to "Database Agnosticism"?	1	Database Agnosticism	17	2025-05-14 11:17:12.46028+00	2025-05-14 11:17:12.460283+00	t	35	29
587	How do you define a self-referential `ForeignKey` in a Django model, for example, an `Employee` model where an employee can have a manager who is also an employee?	1	Self-Referential ForeignKey	18	2025-05-14 11:17:12.460295+00	2025-05-14 11:17:12.460298+00	t	35	29
588	When a custom method in a Django model modifies an instance's attributes (e.g., `self.stock_quantity -= 1`), what is the common practice regarding saving these changes to the database within that method?	1	save() in methods	19	2025-05-14 11:17:12.46031+00	2025-05-14 11:17:12.460313+00	t	35	29
589	If `PublishedPost` is a proxy model for `Post`, which of the following is true?	1	Proxy Model Characteristics	20	2025-05-14 11:17:12.460326+00	2025-05-14 11:17:12.460329+00	t	35	29
590	What is a key performance consideration when using Multi-Table Inheritance (MTI) extensively?	1	MTI Performance	1	2025-05-14 11:17:14.281095+00	2025-05-14 11:17:14.28111+00	t	36	30
591	Consider an Abstract Base Class `TimestampedModel` with `created_at` and `updated_at` fields. If `Article` and `Product` models inherit from `TimestampedModel`, what is the database impact?	1	ABC Database Impact	2	2025-05-14 11:17:14.281131+00	2025-05-14 11:17:14.281135+00	t	36	30
592	What is the primary purpose of `QuerySet.explain()` in Django?	1	QuerySet.explain()	3	2025-05-14 11:17:14.281149+00	2025-05-14 11:17:14.281153+00	t	36	30
593	Why is it essential for a Django model class to inherit from `django.db.models.Model`?	1	models.Model inheritance	4	2025-05-14 11:17:14.281166+00	2025-05-14 11:17:14.28117+00	t	36	30
594	If two developers on a team create conflicting migrations for the same app (e.g., both create `0003_....py`), what command can Django often use to resolve this by creating a new merge migration?	1	Merge Migrations	5	2025-05-14 11:17:14.281183+00	2025-05-14 11:17:14.281186+00	t	36	30
595	What is the key difference between `models.CharField` and `models.TextField` in Django?	1	CharField vs TextField	6	2025-05-14 11:17:14.281199+00	2025-05-14 11:17:14.281203+00	t	36	30
596	What is the key difference between `aggregate()` and `annotate()` when used with Django QuerySets?	1	aggregate vs annotate	7	2025-05-14 11:17:14.281215+00	2025-05-14 11:17:14.281219+00	t	36	30
597	When writing a `RunPython` data migration function, why should you use `apps.get_model('app_label', 'ModelName')` instead of importing the model directly from your `models.py` file?	1	apps.get_model()	8	2025-05-14 11:17:14.281232+00	2025-05-14 11:17:14.281235+00	t	36	30
598	Why is `models.DecimalField` generally preferred over `models.FloatField` for storing monetary values in Django?	1	DecimalField	9	2025-05-14 11:17:14.281248+00	2025-05-14 11:17:14.281251+00	t	36	30
599	What is the primary characteristic of Multi-Table Inheritance (MTI) in Django?	1	Multi-Table Inheritance	10	2025-05-14 11:17:14.281264+00	2025-05-14 11:17:14.281267+00	t	36	30
600	What is the fundamental difference between the `null` and `blank` field options in Django models?	1	null vs blank	11	2025-05-14 11:17:14.281279+00	2025-05-14 11:17:14.281282+00	t	36	30
601	When is it more appropriate to use `db_index=True` directly on a model field definition rather than using `Meta.indexes`?	1	db_index vs Meta.indexes	12	2025-05-14 11:17:14.281294+00	2025-05-14 11:17:14.281297+00	t	36	30
602	If `MyModel.objects.all()` returns a QuerySet, what does the Python slice `MyModel.objects.all()[10:20]` typically translate to in terms of SQL?	1	QuerySet Slicing	13	2025-05-14 11:17:14.281309+00	2025-05-14 11:17:14.281313+00	t	36	30
603	Consider a model `Post` and its proxy model `ArchivedPost`. If `ArchivedPost` defines a custom method `days_archived()`, how can you call this method?	1	Proxy Model Methods	14	2025-05-14 11:17:14.281325+00	2025-05-14 11:17:14.281328+00	t	36	30
604	What is the most common and significant impact of defining a `__str__(self)` method on a Django model?	1	__str__ method	15	2025-05-14 11:17:14.28134+00	2025-05-14 11:17:14.281343+00	t	36	30
605	What is the primary purpose of inserting `import pdb; pdb.set_trace()` into your Python code (e.g., within a Django model method)?	1	pdb set_trace	16	2025-05-14 11:17:14.281355+00	2025-05-14 11:17:14.281358+00	t	36	30
606	How can you typically configure Django's logging system to display the SQL queries being executed by the ORM to the console?	1	Logging SQL	17	2025-05-14 11:17:14.28137+00	2025-05-14 11:17:14.281373+00	t	36	30
607	For an optional string-based field like `description = models.TextField()`, what is the generally recommended Django convention regarding `null` and `blank`?	1	Optional String Fields	18	2025-05-14 11:17:14.281385+00	2025-05-14 11:17:14.281388+00	t	36	30
608	When should you generally choose to implement a computed value as a `@property` rather than a regular method in a Django model?	1	Property vs Method	19	2025-05-14 11:17:14.2814+00	2025-05-14 11:17:14.281404+00	t	36	30
609	What is the purpose of the `UniqueConstraint` option in a Django model's `Meta.constraints`?	1	Meta UniqueConstraint	20	2025-05-14 11:17:14.281416+00	2025-05-14 11:17:14.281419+00	t	36	30
610	How can user-uploaded media files be served by Django's built-in development server when `DEBUG=True`?	2	Serving Media Debug	1	2025-05-14 11:17:16.103274+00	2025-05-14 11:17:16.103289+00	t	37	31
611	What is a common misunderstanding or incorrect practice by beginners regarding the `STATIC_ROOT` directory during the development phase of a Django project?	2	STATIC_ROOT Misconception	2	2025-05-14 11:17:16.103309+00	2025-05-14 11:17:16.103312+00	t	37	31
612	If you define a form field as <code>name = forms.CharField()</code>, what default widget will Django typically use to render it?	2	Default Widgets	3	2025-05-14 11:17:16.103326+00	2025-05-14 11:17:16.10333+00	t	37	31
613	What is the primary role of a "Form Field" (e.g., <code>forms.CharField</code>) in Django?	2	Form Field Role	4	2025-05-14 11:17:16.103343+00	2025-05-14 11:17:16.103347+00	t	37	31
614	What is the conventional location for defining Django form classes within an application's directory structure?	2	Form Code Organization	5	2025-05-14 11:17:16.10336+00	2025-05-14 11:17:16.103363+00	t	37	31
615	When would you typically choose to use a standard <code>django.forms.Form</code> class over a <code>django.forms.ModelForm</code>?	2	Form vs ModelForm	6	2025-05-14 11:17:16.103376+00	2025-05-14 11:17:16.103379+00	t	37	31
616	What command is used to upload a Django project's static files to Google Cloud Storage when `django-storages` is configured with the GCS backend for static files?	2	collectstatic GCS	7	2025-05-14 11:17:16.103392+00	2025-05-14 11:17:16.103395+00	t	37	31
617	In Django's `settings.py`, what is the primary role of the `STATIC_URL` setting?	2	STATIC_URL	8	2025-05-14 11:17:16.103408+00	2025-05-14 11:17:16.103412+00	t	37	31
618	In a Django view, how do you access uploaded file data when instantiating a form?	2	request.FILES	9	2025-05-14 11:17:16.103424+00	2025-05-14 11:17:16.103428+00	t	37	31
619	What is the purpose of <code>{{ formset.management_form }}</code> when rendering a formset in a Django template?	2	Formset Management Form	10	2025-05-14 11:17:16.10344+00	2025-05-14 11:17:16.103444+00	t	37	31
620	When is the form's general <code>clean()</code> method called during the validation process, and what is its primary purpose?	2	clean Method	11	2025-05-14 11:17:16.103456+00	2025-05-14 11:17:16.103459+00	t	37	31
621	How can you specify that a <code>forms.CharField</code> should be rendered as a multi-line <code>&lt;textarea&gt;</code> HTML element?	2	Customizing Widgets	12	2025-05-14 11:17:16.103472+00	2025-05-14 11:17:16.103475+00	t	37	31
622	What is the primary purpose of calling <code>form.save(commit=False)</code> on a <code>ModelForm</code> instance?	2	ModelForm save commit False	13	2025-05-14 11:17:16.103488+00	2025-05-14 11:17:16.103491+00	t	37	31
623	How does a <code>ModelForm</code> typically determine the <code>label</code> and <code>help_text</code> for an auto-generated form field?	2	ModelForm Attribute Propagation	14	2025-05-14 11:17:16.103504+00	2025-05-14 11:17:16.103507+00	t	37	31
624	When is a standard <code>django.forms.Form</code> generally more appropriate than a <code>ModelForm</code>?	2	When to use Form	15	2025-05-14 11:17:16.103519+00	2025-05-14 11:17:16.103523+00	t	37	31
625	When manually rendering a Django form field in a template, what does <code>{{ field.label_tag }}</code> typically output?	2	field.label_tag	16	2025-05-14 11:17:16.103536+00	2025-05-14 11:17:16.10354+00	t	37	31
626	To adhere to the DRY (Don't Repeat Yourself) principle, if you have complex validation logic that needs to be applied to fields in multiple different forms, what is a recommended approach?	2	DRY Validation Logic	17	2025-05-14 11:17:16.103552+00	2025-05-14 11:17:16.103556+00	t	37	31
627	What is the primary purpose of third-party libraries like <code>django-crispy-forms</code>?	2	django-crispy-forms Purpose	18	2025-05-14 11:17:16.103568+00	2025-05-14 11:17:16.103571+00	t	37	31
628	When overriding a form's <code>__init__</code> method to accept custom arguments (e.g., <code>user</code>), what is a critical step regarding the parent class's <code>__init__</code>?	2	Form __init__ super	19	2025-05-14 11:17:16.103584+00	2025-05-14 11:17:16.103587+00	t	37	31
629	When raising a `ValidationError` within a model's `clean()` method, how can you associate the error with a specific field for better form display?	2	clean() Field-Specific Errors	20	2025-05-14 11:17:16.1036+00	2025-05-14 11:17:16.103603+00	t	37	31
630	What is the purpose of the <code>attrs</code> argument when instantiating a widget, for example, <code>forms.TextInput(attrs={'class': 'my-class', 'placeholder': 'Enter text'})</code>?	2	Widget Attributes	1	2025-05-14 11:17:17.915149+00	2025-05-14 11:17:17.915165+00	t	38	32
631	Which of Django's default staticfiles finders is responsible for locating static files within a subdirectory named `static/` inside each application listed in `INSTALLED_APPS`?	2	AppDirectoriesFinder	2	2025-05-14 11:17:17.915184+00	2025-05-14 11:17:17.915188+00	t	38	32
632	What is the relationship between a Django form field (e.g., <code>forms.EmailField</code>) and its widget (e.g., <code>forms.EmailInput</code>)?	2	Field Widget Relationship	3	2025-05-14 11:17:17.915203+00	2025-05-14 11:17:17.915207+00	t	38	32
633	What is a key security benefit provided by Django's forms system, specifically mentioned in the advantages?	2	CSRF Protection Advantage	4	2025-05-14 11:17:17.915221+00	2025-05-14 11:17:17.915227+00	t	38	32
634	When using WhiteNoise with Django, what is the benefit of setting `STATICFILES_STORAGE` to `whitenoise.storage.CompressedManifestStaticFilesStorage`?	2	WhiteNoise Storage	5	2025-05-14 11:17:17.915241+00	2025-05-14 11:17:17.915244+00	t	38	32
635	When using a `FileField` or `ImageField` in a Django model, what does the `upload_to` argument specify?	2	upload_to Argument	6	2025-05-14 11:17:17.915258+00	2025-05-14 11:17:17.915262+00	t	38	32
636	Which of the following is NOT a standard argument commonly accepted by most Django form field types like <code>CharField</code> or <code>IntegerField</code>?	2	Common Field Arguments	7	2025-05-14 11:17:17.915275+00	2025-05-14 11:17:17.915278+00	t	38	32
637	When overriding a <code>ModelForm</code>'s <code>save()</code> method to set a field like <code>created_by</code> based on the current user, how is the user object typically passed to the form?	2	ModelForm Custom Save User	8	2025-05-14 11:17:17.915291+00	2025-05-14 11:17:17.915294+00	t	38	32
638	What is the primary purpose of Django's built-in CSRF (Cross-Site Request Forgery) protection mechanism?	2	CSRF Protection Purpose	9	2025-05-14 11:17:17.915307+00	2025-05-14 11:17:17.91531+00	t	38	32
639	What is the significance of the Post/Redirect/Get (PRG) pattern in Django form handling?	2	Post Redirect Get	10	2025-05-14 11:17:17.915323+00	2025-05-14 11:17:17.915327+00	t	38	32
640	The "DRY" (Don't Repeat Yourself) principle is a significant advantage of Django's forms. How does using <code>ModelForm</code> particularly embody this principle?	2	ModelForm DRY Principle	11	2025-05-14 11:17:17.915339+00	2025-05-14 11:17:17.915343+00	t	38	32
641	If you need to use a custom widget for a field in a <code>ModelForm</code> that would otherwise be auto-generated, what is a common way to specify this?	2	ModelForm Meta widgets	12	2025-05-14 11:17:17.915356+00	2025-05-14 11:17:17.915359+00	t	38	32
642	When a custom validator function applied to a Django model field detects invalid data, how should it signal this error?	2	ValidationError	13	2025-05-14 11:17:17.915372+00	2025-05-14 11:17:17.915375+00	t	38	32
643	What is the primary advantage of using the `{% static %}` template tag over hardcoding static file URLs (e.g., `/static/css/style.css`) in Django templates?	2	static TemplateTag	14	2025-05-14 11:17:17.915387+00	2025-05-14 11:17:17.91539+00	t	38	32
644	When rendering a Django form in a template, which method provides the most control over the HTML structure for each field, its label, errors, and help text?	2	Manual Form Rendering	15	2025-05-14 11:17:17.915403+00	2025-05-14 11:17:17.915406+00	t	38	32
645	What HTML attribute is essential for a <code>form</code> tag to correctly handle file uploads?	2	File Upload enctype	16	2025-05-14 11:17:17.915419+00	2025-05-14 11:17:17.915422+00	t	38	32
646	How can you display errors that are not specific to any particular form field (non-field errors) in a Django template?	2	Displaying Non-field Errors	17	2025-05-14 11:17:17.915435+00	2025-05-14 11:17:17.915438+00	t	38	32
647	When creating a custom Django inclusion tag function (e.g., <code>@register.inclusion_tag('path/to/snippet.html') def my_tag(form_field): ...</code>), what must this function return?	2	Inclusion Tag Return Value	18	2025-05-14 11:17:17.91545+00	2025-05-14 11:17:17.915453+00	t	38	32
648	How can you make a Django form dynamic, such as by changing a field's choices or attributes based on the current user?	2	Dynamic Forms Initialization	19	2025-05-14 11:17:17.915466+00	2025-05-14 11:17:17.915469+00	t	38	32
649	When handling large file uploads in Django, why is it recommended to process the file in chunks (e.g., using <code>uploaded_file.chunks()</code>) rather than reading the entire file into memory at once (e.g., <code>uploaded_file.read()</code>)?	2	File Upload Chunks	20	2025-05-14 11:17:17.915481+00	2025-05-14 11:17:17.915485+00	t	38	32
650	What is the primary benefit of using asynchronous views (<code>async def</code>) in Django for I/O-bound workloads?	3	Async IO-Bound	1	2025-05-14 11:17:19.733343+00	2025-05-14 11:17:19.733358+00	t	39	33
651	Inside a Django `{% for %}` loop, what does the special loop variable `forloop.first` indicate?	3	forloop variable	2	2025-05-14 11:17:19.733377+00	2025-05-14 11:17:19.733381+00	t	39	33
652	In the lifecycle of a Django Class-Based View, what is the main responsibility of the <code>setup(self, request, *args, **kwargs)</code> method?	3	setup method	3	2025-05-14 11:17:19.733394+00	2025-05-14 11:17:19.733398+00	t	39	33
653	In a Django <code>DetailView</code>, how does overriding <code>get_queryset()</code> affect object retrieval?	3	get_queryset DetailView	4	2025-05-14 11:17:19.73341+00	2025-05-14 11:17:19.733414+00	t	39	33
654	When using `{% cache timeout "fragment_name" var1 var2 %}`, what is the role of `var1` and `var2`?	3	Cache Tag Vary-On	5	2025-05-14 11:17:19.733426+00	2025-05-14 11:17:19.73343+00	t	39	33
655	What is the correct placement and purpose of the `{% extends "base.html" %}` tag in a Django child template?	3	extends tag	6	2025-05-14 11:17:19.733443+00	2025-05-14 11:17:19.733446+00	t	39	33
656	In Django's URL routing, what is the primary purpose of using the <code>include()</code> function with a <code>namespace</code> argument, like <code>path('blog/', include('blog.urls', namespace='blog'))</code>?	3	URL include namespace	7	2025-05-14 11:17:19.733459+00	2025-05-14 11:17:19.733462+00	t	39	33
657	When overriding <code>get_context_data(**kwargs)</code> in a Django CBV, what is the typical first step to ensure base context data is included?	3	get_context_data	8	2025-05-14 11:17:19.733475+00	2025-05-14 11:17:19.733478+00	t	39	33
658	If you need to dynamically choose a template in a Django CBV based on request properties (e.g., user type or HTMX request), which method is most appropriate to override?	3	get_template_names	9	2025-05-14 11:17:19.733491+00	2025-05-14 11:17:19.733495+00	t	39	33
659	When `DEBUG = True` in Django settings, what is one of the most valuable pieces of information provided on the Django error page for debugging logic errors like `AttributeError` or `TypeError` in a view?	3	Django Debug Page	10	2025-05-14 11:17:19.733508+00	2025-05-14 11:17:19.733511+00	t	39	33
660	How can `pdb.set_trace()` be used when debugging a Django view?	3	pdb	11	2025-05-14 11:17:19.733524+00	2025-05-14 11:17:19.733527+00	t	39	33
661	Why is the `success_url` attribute (or overriding `get_success_url()`) mandatory for `django.views.generic.DeleteView`?	3	DeleteView success_url	12	2025-05-14 11:17:19.73354+00	2025-05-14 11:17:19.733543+00	t	39	33
662	What is a common pitfall to avoid when structuring complex user interfaces in Django templates, especially regarding repeated UI elements?	3	DRY Principle	13	2025-05-14 11:17:19.733555+00	2025-05-14 11:17:19.733558+00	t	39	33
663	In a Django generic `ListView`, if you set `model = Book` and `context_object_name = 'my_books'`, how would you access the list of books in your template?	3	ListView context_object_name	14	2025-05-14 11:17:19.733571+00	2025-05-14 11:17:19.733574+00	t	39	33
664	The `NoReverseMatch` error in Django typically indicates an issue with:	3	NoReverseMatch	15	2025-05-14 11:17:19.733586+00	2025-05-14 11:17:19.733589+00	t	39	33
665	In a Django <code>ListView</code>, if you want to display only published articles by the current user, ordered by date, which method should you primarily override to achieve this dynamic filtering?	3	get_queryset dynamic filtering	16	2025-05-14 11:17:19.733602+00	2025-05-14 11:17:19.733605+00	t	39	33
666	Which `HttpResponse` subclass is commonly used to redirect a user to a different URL?	3	HttpResponse Subclasses	17	2025-05-14 11:17:19.733617+00	2025-05-14 11:17:19.73362+00	t	39	33
667	What is a primary advantage of using Class-Based Views (CBVs) in Django?	3	CBV Advantages	18	2025-05-14 11:17:19.733633+00	2025-05-14 11:17:19.733636+00	t	39	33
668	In Django templating, what is the purpose of using `{{ block.super }}` within a `{% block %}` tag?	3	block.super	19	2025-05-14 11:17:19.733648+00	2025-05-14 11:17:19.733651+00	t	39	33
670	How can a custom simple tag, registered with `@register.simple_tag(takes_context=True)`, access the current user object in a Django template?	3	Simple Tag Context	1	2025-05-14 11:17:21.544106+00	2025-05-14 11:17:21.544121+00	t	40	34
671	What is a key advantage of using Python's `logging` module in Django views over simple `print()` statements for debugging?	3	Logging Module	2	2025-05-14 11:17:21.544141+00	2025-05-14 11:17:21.544145+00	t	40	34
672	When are Function-Based Views (FBVs) often preferred over Class-Based Views (CBVs) in Django?	3	FBV Usage	3	2025-05-14 11:17:21.544159+00	2025-05-14 11:17:21.544163+00	t	40	34
673	If you consistently hardcode URLs like `a href="/myapp/items/1/"` in your Django templates, what is the primary risk?	3	Hardcoding URLs	4	2025-05-14 11:17:21.544176+00	2025-05-14 11:17:21.544179+00	t	40	34
674	When customizing a generic `ListView` by overriding the `get_queryset()` method, what is the primary purpose?	3	get_queryset	5	2025-05-14 11:17:21.544193+00	2025-05-14 11:17:21.544196+00	t	40	34
675	What is a key advantage of applying decorators to CBVs in <code>urls.py</code> (e.g., <code>login_required(MyView.as_view())</code>) compared to using <code>@method_decorator</code> within the class definition?	3	Decorating as_view	6	2025-05-14 11:17:21.54421+00	2025-05-14 11:17:21.544213+00	t	40	34
676	In Django templates, what function do filters primarily serve?\nExample: <code>{{ article.publish_date|date:"F j, Y" }}</code>	3	Filter Purpose	7	2025-05-14 11:17:21.544226+00	2025-05-14 11:17:21.544229+00	t	40	34
677	When applying a decorator like <code>@login_required</code> to a Django Class-Based View (CBV) to protect all HTTP methods, which method is most commonly targeted using <code>@method_decorator</code>?	3	method_decorator dispatch	8	2025-05-14 11:17:21.544242+00	2025-05-14 11:17:21.544245+00	t	40	34
678	When using <code>sync_to_async</code> to wrap a synchronous Django ORM call from an async view, why is the <code>thread_sensitive=True</code> argument often important?	3	sync_to_async thread_sensitive	9	2025-05-14 11:17:21.544257+00	2025-05-14 11:17:21.54426+00	t	40	34
679	If you need to add extra data to the template context in a generic `DetailView` (e.g., a list of related items), which method is most appropriate to override?	3	get_context_data	10	2025-05-14 11:17:21.544273+00	2025-05-14 11:17:21.544276+00	t	40	34
680	What is the primary role of the <code>as_view()</code> class method in Django's Class-Based Views (CBVs)?	3	as_view	11	2025-05-14 11:17:21.544289+00	2025-05-14 11:17:21.544292+00	t	40	34
681	When implementing dynamic URL dispatching using a "catch-all" URL pattern in Django (e.g., for a CMS), why is its position in the <code>urlpatterns</code> list critical?	3	Catch-all URL Order	12	2025-05-14 11:17:21.544305+00	2025-05-14 11:17:21.544308+00	t	40	34
682	Which attribute of `django.views.generic.DetailView` is typically used to specify the name of the URL keyword argument that contains the primary key of the object to be displayed?	3	DetailView pk_url_kwarg	13	2025-05-14 11:17:21.54432+00	2025-05-14 11:17:21.544324+00	t	40	34
683	If you create a custom Django context processor function, what must this function accept as an argument and what must it return?	3	Context Processor Signature	14	2025-05-14 11:17:21.544336+00	2025-05-14 11:17:21.544339+00	t	40	34
684	If a view decorated with `@require_POST` receives a GET request, what is the typical outcome?	3	require_POST	15	2025-05-14 11:17:21.544352+00	2025-05-14 11:17:21.544355+00	t	40	34
685	When extending a generic Django CBV like <code>CreateView</code>, what is a common reason to override the <code>form_valid(self, form)</code> method?	3	form_valid override	16	2025-05-14 11:17:21.544367+00	2025-05-14 11:17:21.54437+00	t	40	34
686	What is the primary purpose of the Post/Redirect/Get (PRG) pattern in web applications?	3	PRG Pattern	17	2025-05-14 11:17:21.544382+00	2025-05-14 11:17:21.544385+00	t	40	34
687	What is the fundamental characteristic of a Function-Based View (FBV) in Django?	3	FBV Definition	18	2025-05-14 11:17:21.544398+00	2025-05-14 11:17:21.544401+00	t	40	34
688	In Django templates, how do you typically access the value of a variable named `product_name` passed in the context dictionary `{'product_name': 'Super Widget'}`?	3	Template Variables	19	2025-05-14 11:17:21.544413+00	2025-05-14 11:17:21.544416+00	t	40	34
689	How can a child template add content to a block defined in a parent template without completely replacing the parent block's original content?	3	block.super	20	2025-05-14 11:17:21.544429+00	2025-05-14 11:17:21.544432+00	t	40	34
690	If a property `myVar` in your Alpine.js component's state is the string `'emImportant/em'`, what will be displayed by the HTML snippet `div x-text="myVar"/div`?	4	x-text Behavior	1	2025-05-14 11:17:23.360684+00	2025-05-14 11:17:23.360701+00	t	41	35
691	What is a primary benefit of using <code>$dispatch</code> for communication between Alpine.js components?	4	$dispatch Communication	2	2025-05-14 11:17:23.360727+00	2025-05-14 11:17:23.360731+00	t	41	35
692	Which of the following is a common and appropriate use case for the `x-init` directive in Alpine.js?	4	x-init Use Case	3	2025-05-14 11:17:23.360745+00	2025-05-14 11:17:23.360748+00	t	41	35
693	For a custom dropdown menu built with Alpine.js (using <code>div</code>s and <code>a</code> tags), what is a key consideration for keyboard navigation accessibility?	4	Keyboard Navigation	4	2025-05-14 11:17:23.360762+00	2025-05-14 11:17:23.360765+00	t	41	35
694	When is it generally recommended to define global stores using <code>Alpine.store(name, initialValue)</code>?	4	Alpine.store	5	2025-05-14 11:17:23.360777+00	2025-05-14 11:17:23.360781+00	t	41	35
695	You want to disable a form's submit button until a required text input field, bound to `feedbackText` in Alpine's state, is not empty (ignoring any leading or trailing whitespace). Which `x-bind:disabled` expression is most appropriate for this?	4	x-bind:disabled Condition	6	2025-05-14 11:17:23.360793+00	2025-05-14 11:17:23.360797+00	t	41	35
696	What is the primary purpose of the <code>x-transition</code> directive in Alpine.js?	4	x-transition	7	2025-05-14 11:17:23.360826+00	2025-05-14 11:17:23.360829+00	t	41	35
697	How do Alpine.js components typically access data or methods from a global store named 'cart' (defined via <code>Alpine.store('cart', ...)</code> )?	4	$store Alpine.store	8	2025-05-14 11:17:23.360842+00	2025-05-14 11:17:23.360846+00	t	41	35
698	When <code>x-model</code> is used with multiple checkboxes sharing the same model property name (e.g., <code>x-model="selectedOptions"</code>), what kind of data structure is typically bound to that property?	4	x-model checkboxes	9	2025-05-14 11:17:23.360858+00	2025-05-14 11:17:23.360861+00	t	41	35
699	In the context of creating an advanced modal component in Alpine.js, what is the purpose of the <code>x-teleport</code> directive?	4	Modals x-teleport	10	2025-05-14 11:17:23.360874+00	2025-05-14 11:17:23.360877+00	t	41	35
700	During the "entering" phase of an element (e.g., when <code>x-show</code> becomes true), which <code>x-transition</code> classes define the "from" (initial) and "to" (final) states of the animation respectively?	4	x-transition classes	11	2025-05-14 11:17:23.36089+00	2025-05-14 11:17:23.360893+00	t	41	35
701	What is the primary purpose of the <code>x-model</code> directive in Alpine.js?	4	x-model	12	2025-05-14 11:17:23.360906+00	2025-05-14 11:17:23.360909+00	t	41	35
702	In the context of Alpine.js, what does "declarative programming" primarily mean?	4	Declarative Programming	13	2025-05-14 11:17:23.360922+00	2025-05-14 11:17:23.360925+00	t	41	35
703	How is the <code>$watch</code> magic property typically used in an Alpine.js component?	4	$watch	14	2025-05-14 11:17:23.360938+00	2025-05-14 11:17:23.360941+00	t	41	35
704	In Alpine.js, what is the primary benefit of using the <code>.debounce</code> modifier with <code>x-model</code>, such as in <code>input type="text" x-model.debounce.500ms="searchTerm"</code>?	4	x-model .debounce	15	2025-05-14 11:17:23.360954+00	2025-05-14 11:17:23.360957+00	t	41	35
705	How can you use <code>x-for</code> to iterate a fixed number of times, for example, 5 times?	4	x-for range	16	2025-05-14 11:17:23.360969+00	2025-05-14 11:17:23.360973+00	t	41	35
706	What is the commonly used shorthand syntax for the `x-on:click` directive in Alpine.js?	4	x-on Shorthand	17	2025-05-14 11:17:23.360985+00	2025-05-14 11:17:23.360989+00	t	41	35
707	In Alpine.js, if a component dispatches an event using <code>$dispatch('myEvent', {...})</code> and another component needs to listen for this event regardless of its DOM relationship (e.g., they are siblings or in different branches), how can the listener be set up?	4	$dispatch .window	18	2025-05-14 11:17:23.361001+00	2025-05-14 11:17:23.361004+00	t	41	35
708	What is the effect of using the <code>.lazy</code> modifier with <code>x-model</code> (e.g., <code>x-model.lazy="query"</code>) on a text input?	4	x-model .lazy	19	2025-05-14 11:17:23.361017+00	2025-05-14 11:17:23.36102+00	t	41	35
709	What CSS rule is typically defined to make the <code>x-cloak</code> directive effective in Alpine.js?	4	x-cloak CSS	20	2025-05-14 11:17:23.361032+00	2025-05-14 11:17:23.361036+00	t	41	35
710	What capability does the <code>$store</code> magic property provide in Alpine.js?	4	$store Alpine.store	1	2025-05-14 11:17:25.281977+00	2025-05-14 11:17:25.281993+00	t	42	35
711	What is the primary function of the <code>$dispatch('eventName', detailObject)</code> magic property in Alpine.js?	4	$dispatch	2	2025-05-14 11:17:25.282014+00	2025-05-14 11:17:25.282018+00	t	42	35
712	What happens if you use <code>x-ref="itemElement"</code> on an element that is inside an <code>x-for</code> loop in Alpine.js?	4	x-ref x-for	3	2025-05-14 11:17:25.282033+00	2025-05-14 11:17:25.282036+00	t	42	35
713	If a child Alpine.js component defines a data property in its <code>x-data</code> with the same name as a property in its parent's <code>x-data</code> (e.g., both have <code>x-data="{ name: '...' }"</code>), what occurs within the child's scope?	4	State Shadowing	4	2025-05-14 11:17:25.28205+00	2025-05-14 11:17:25.282053+00	t	42	35
714	What is the primary purpose of the <code>x-cloak</code> directive in Alpine.js?	4	x-cloak FOUC	5	2025-05-14 11:17:25.282075+00	2025-05-14 11:17:25.282079+00	t	42	35
715	What is a primary characteristic of Alpine.js as a JavaScript framework, as described in the provided text?	4	Definition	6	2025-05-14 11:17:25.282097+00	2025-05-14 11:17:25.2821+00	t	42	35
716	What is the primary function of the <code>x-for</code> directive in Alpine.js?	4	x-for	7	2025-05-14 11:17:25.282113+00	2025-05-14 11:17:25.282117+00	t	42	35
717	How does Alpine.js primarily achieve its "lightweight" nature according to the text?	4	Lightweight Nature	8	2025-05-14 11:17:25.28213+00	2025-05-14 11:17:25.282135+00	t	42	35
718	What is a key advantage of using the Alpine.js DevTools browser extension for debugging Alpine components compared to relying solely on standard browser developer tools?	4	DevTools Advantage	9	2025-05-14 11:17:25.28215+00	2025-05-14 11:17:25.282153+00	t	42	35
719	Within an Alpine.js `x-on` event handler expression, how can you access the native browser event object?	4	x-on $event	10	2025-05-14 11:17:25.282166+00	2025-05-14 11:17:25.282169+00	t	42	35
720	If an input field contained within an element is hidden using `x-show="someCondition"` and then later reshown when `someCondition` becomes true again, what generally happens to the value previously typed into that input field?	4	x-show State Preservation	11	2025-05-14 11:17:25.282183+00	2025-05-14 11:17:25.282186+00	t	42	35
721	What is the primary purpose of the `x-bind` directive (or its common shorthand `:`) in Alpine.js?	4	x-bind Purpose	12	2025-05-14 11:17:25.282198+00	2025-05-14 11:17:25.282201+00	t	42	35
722	What is the primary purpose of the <code>x-ref</code> directive in Alpine.js?	4	x-ref	13	2025-05-14 11:17:25.282214+00	2025-05-14 11:17:25.282217+00	t	42	35
723	When building dynamic UI components like dropdowns or modals with Alpine.js, how are ARIA attributes typically managed to improve accessibility?	4	ARIA Attributes	14	2025-05-14 11:17:25.282231+00	2025-05-14 11:17:25.282234+00	t	42	35
724	How can a nested (child) Alpine.js component access reactive data defined in the <code>x-data</code> of its parent Alpine.js component?	4	Nested Components State	15	2025-05-14 11:17:25.282246+00	2025-05-14 11:17:25.282249+00	t	42	35
725	What is the primary role of the `x-trap.inert` directive when building an accessible modal dialog with Alpine.js?	4	x-trap.inert Accessibility	16	2025-05-14 11:17:25.282261+00	2025-05-14 11:17:25.282264+00	t	42	35
726	When building a tabs UI component with Alpine.js, what is a common approach to manage which tab and content panel are currently active?	4	Tabs State Management	17	2025-05-14 11:17:25.282277+00	2025-05-14 11:17:25.28228+00	t	42	35
727	For validating that a "password" field matches a "confirm password" field in Alpine.js, which approach is often effective for reacting to changes in either field?	4	Cross-Field Validation $watch	18	2025-05-14 11:17:25.282293+00	2025-05-14 11:17:25.282296+00	t	42	35
728	If you use a simple <code>x-transition</code> directive without specifying individual stage classes (e.g., <code>div x-show="show" x-transition.../div</code>), what kind of default animation does Alpine.js typically apply?	4	x-transition shorthands	19	2025-05-14 11:17:25.282308+00	2025-05-14 11:17:25.282311+00	t	42	35
729	What is a primary benefit of implementing client-side form validation with Alpine.js before submitting to a Django backend?	4	Client-Side Validation	20	2025-05-14 11:17:25.282323+00	2025-05-14 11:17:25.282326+00	t	42	35
730	When implementing a "near real-time" notification feed on Cloud Run using HTMX, why is polling often preferred over WebSockets or Server-Sent Events (SSE)?	5	Polling Strategy	1	2025-05-14 11:17:27.098361+00	2025-05-14 11:17:27.098377+00	t	43	36
731	When writing E2E tests for a Django application using Alpine.js with a tool like Selenium, what is the role of Django's <code>LiveServerTestCase</code>?	5	LiveServerTestCase Selenium	2	2025-05-14 11:17:27.098395+00	2025-05-14 11:17:27.098399+00	t	43	36
732	What is the purpose of the `waitFor` attribute in a Cloud Build `cloudbuild.yaml` step?	5	cloudbuild.yaml waitFor	3	2025-05-14 11:17:27.098412+00	2025-05-14 11:17:27.098415+00	t	43	36
733	When configuring a Google Cloud Storage bucket to serve public static assets, what IAM permission and principal are commonly used with Uniform Bucket-Level Access?	5	Public Bucket Access	4	2025-05-14 11:17:27.098429+00	2025-05-14 11:17:27.098432+00	t	43	36
734	How can you effectively test Django views that are designed to return HTML partials for HTMX requests, using Django's test client?	5	Django Test Client HTMX	5	2025-05-14 11:17:27.098445+00	2025-05-14 11:17:27.098448+00	t	43	36
735	When deploying a Django application to Cloud Run, what is the significance of the `--add-cloudsql-instances` flag in the `gcloud run deploy` command?	5	--add-cloudsql-instances	6	2025-05-14 11:17:27.098461+00	2025-05-14 11:17:27.098464+00	t	43	36
736	What is the purpose of the `--database-flags=cloudsql.iam_authentication=on` flag when creating a Cloud SQL instance using `gcloud sql instances create`?	5	IAM Authentication	7	2025-05-14 11:17:27.098477+00	2025-05-14 11:17:27.09848+00	t	43	36
737	Which of the following is a primary cost driver for Cloud Run services?	5	Cloud Run Costs	8	2025-05-14 11:17:27.098492+00	2025-05-14 11:17:27.098495+00	t	43	36
738	When creating a Cloud SQL for PostgreSQL instance for a Django application, why is it generally recommended to choose the same GCP region for Cloud SQL as for your Cloud Run service?	5	Region Colocation	9	2025-05-14 11:17:27.098508+00	2025-05-14 11:17:27.098511+00	t	43	36
739	Which GCP service is primarily responsible for building a Docker image from your Django application code, pushing it to a registry, and potentially deploying it to Cloud Run as part of a CI/CD pipeline?	5	Cloud Build Role	10	2025-05-14 11:17:27.098524+00	2025-05-14 11:17:27.098527+00	t	43	36
740	To test custom validation logic in a Django model's `clean()` method or field validators, which model method should you typically call on an instance before asserting for `ValidationError`?	5	full_clean()	11	2025-05-14 11:17:27.09854+00	2025-05-14 11:17:27.098543+00	t	43	36
741	What is a GCP Project primarily used for?	5	GCP Project Purpose	12	2025-05-14 11:17:27.098555+00	2025-05-14 11:17:27.098558+00	t	43	36
742	What is a critical characteristic of Google Cloud Storage bucket names?	5	Bucket Naming	13	2025-05-14 11:17:27.098571+00	2025-05-14 11:17:27.098574+00	t	43	36
743	What is a critical Django setting that must be set to <code>False</code> in a production environment on GCP to avoid exposing sensitive information?	5	DEBUG Setting	14	2025-05-14 11:17:27.098587+00	2025-05-14 11:17:27.09859+00	t	43	36
744	When configuring IAM policies, why is it generally recommended to use Predefined Roles (e.g., `roles/run.admin`, `roles/storage.objectAdmin`) over Primitive Roles (Owner, Editor, Viewer)?	5	IAM Roles	15	2025-05-14 11:17:27.098602+00	2025-05-14 11:17:27.098606+00	t	43	36
745	Why is it a security best practice to run the application process (e.g., Gunicorn) as a non-root user inside a Docker container?	5	Non-root User	16	2025-05-14 11:17:27.098618+00	2025-05-14 11:17:27.098621+00	t	43	36
746	In the context of Cloud Run, what does the `--concurrency` setting control?	5	Concurrency Setting	17	2025-05-14 11:17:27.098633+00	2025-05-14 11:17:27.098636+00	t	43	36
747	How does Cloud Run typically inject a database password (stored in Secret Manager) into a Django application's environment?	5	Secret Manager Integration	18	2025-05-14 11:17:27.098649+00	2025-05-14 11:17:27.098652+00	t	43	36
748	What is the primary benefit of using multi-stage builds in a `Dockerfile` for a Django application?	5	Multi-stage Builds	19	2025-05-14 11:17:27.098664+00	2025-05-14 11:17:27.098667+00	t	43	36
749	When running Gunicorn for a Django application inside a Docker container (e.g., for Cloud Run), why is it important to bind to `0.0.0.0` (e.g., `gunicorn myproject.wsgi:application --bind 0.0.0.0:$PORT`)?	5	Gunicorn Binding	20	2025-05-14 11:17:27.098679+00	2025-05-14 11:17:27.098683+00	t	43	36
750	What is the primary benefit of using the `django-environ` package for managing Django settings?	5	django-environ	1	2025-05-14 11:17:28.913789+00	2025-05-14 11:17:28.913841+00	t	44	37
751	In `cloudbuild.yaml`, what does a substitution like `${SHORT_SHA}` represent?	5	Cloud Build Substitutions	2	2025-05-14 11:17:28.913861+00	2025-05-14 11:17:28.913865+00	t	44	37
752	When mapping a custom domain to a Cloud Run service, what is a key benefit provided by Cloud Run regarding HTTPS?	5	Custom Domain HTTPS	3	2025-05-14 11:17:28.913879+00	2025-05-14 11:17:28.913883+00	t	44	37
753	In Django's test framework, how can you simulate an HTMX request when using the test client (<code>django.test.Client</code>)?	5	Testing HTMX Requests	4	2025-05-14 11:17:28.913897+00	2025-05-14 11:17:28.9139+00	t	44	37
754	In Django template debugging, what does the `{% debug %}` tag output?	5	debug tag	5	2025-05-14 11:17:28.913913+00	2025-05-14 11:17:28.913917+00	t	44	37
755	What is a key benefit of using `django.test.TestCase` for writing model tests, regarding the database?	5	TestCase Database	6	2025-05-14 11:17:28.91393+00	2025-05-14 11:17:28.913933+00	t	44	37
756	If your Cloud Run service needs to connect to a Cloud SQL instance with a private IP address, what additional GCP networking component is typically required?	5	VPC Connector	7	2025-05-14 11:17:28.913948+00	2025-05-14 11:17:28.913951+00	t	44	37
757	What is a robust, serverless-friendly way to run Django database migrations for a Cloud Run deployment, especially in a CI/CD pipeline?	5	Migration Strategy	8	2025-05-14 11:17:28.913964+00	2025-05-14 11:17:28.913967+00	t	44	37
758	What is the main advantage of using the Cloud SQL Auth Proxy for connecting to a Cloud SQL instance from a local development machine?	5	Cloud SQL Auth Proxy	9	2025-05-14 11:17:28.913979+00	2025-05-14 11:17:28.913982+00	t	44	37
759	What is a common challenge when writing End-to-End (E2E) tests for asynchronous HTMX operations, such as content loading and swapping?	5	E2E Testing Asynchronicity	10	2025-05-14 11:17:28.914009+00	2025-05-14 11:17:28.914012+00	t	44	37
760	Why are End-to-End (E2E) tests particularly useful for testing Alpine.js components within a Django application?	5	E2E Testing	11	2025-05-14 11:17:28.914025+00	2025-05-14 11:17:28.914028+00	t	44	37
761	What is the primary role of a Cloud Build Trigger?	5	Cloud Build Triggers	12	2025-05-14 11:17:28.914041+00	2025-05-14 11:17:28.914044+00	t	44	37
762	If `DEBUG = True` is inadvertently left in a production Django `settings.py`, what is a primary security risk?	5	DEBUG Setting	13	2025-05-14 11:17:28.914057+00	2025-05-14 11:17:28.91406+00	t	44	37
763	If a Django form's <code>is_valid()</code> method returns <code>False</code> during testing, how can you inspect the specific validation errors?	5	Testing form.errors	14	2025-05-14 11:17:28.914072+00	2025-05-14 11:17:28.914076+00	t	44	37
764	What is the main purpose of Google Cloud Secret Manager in a Django deployment on GCP?	5	Secret Manager	15	2025-05-14 11:17:28.914088+00	2025-05-14 11:17:28.914091+00	t	44	37
765	What is the main purpose of the `gcloud init` command when setting up the Google Cloud CLI?	5	gcloud init	16	2025-05-14 11:17:28.914104+00	2025-05-14 11:17:28.914107+00	t	44	37
766	When testing Django authentication workflows, what is the primary role of `django.test.Client`?	5	Test Client	17	2025-05-14 11:17:28.91412+00	2025-05-14 11:17:28.914123+00	t	44	37
767	What is the general approach to unit testing a custom method (e.g., `product.calculate_final_price()`) on a Django model?	5	Testing Custom Methods	18	2025-05-14 11:17:28.914135+00	2025-05-14 11:17:28.914139+00	t	44	37
768	When deploying a Django application to Google Cloud Platform, what is a primary advantage of using Cloud Run, especially regarding cost for applications with variable traffic?	5	Cloud Run Cost	19	2025-05-14 11:17:28.914151+00	2025-05-14 11:17:28.914154+00	t	44	37
769	What is the primary benefit of setting `string_if_invalid` in Django's `TEMPLATES` setting during development, e.g., `string_if_invalid = 'INVALID: %s'`?	5	string_if_invalid	20	2025-05-14 11:17:28.914167+00	2025-05-14 11:17:28.91417+00	t	44	37
770	When HTMX swaps new HTML content (e.g., a partial from a Django view) into the DOM, and that HTML contains Alpine.js directives like <code>x-data</code>, what generally happens?	6	HTMX Swap Alpine Init	1	2025-05-14 11:17:30.729991+00	2025-05-14 11:17:30.730006+00	t	45	38
771	How does the <code>django-htmx</code> package's <code>HtmxMiddleware</code> primarily simplify CSRF token handling for HTMX requests in Django?	6	django-htmx CSRF	2	2025-05-14 11:17:30.730026+00	2025-05-14 11:17:30.730029+00	t	45	38
772	Which of the following is a key benefit provided by the <code>django-htmx</code> package?	6	django-htmx package	3	2025-05-14 11:17:30.730043+00	2025-05-14 11:17:30.730047+00	t	45	38
773	If a Django view responding to an HTMX request includes an <code>HX-Trigger: myCustomEvent</code> header, what is the primary effect on the client side?	6	HX-Trigger Header	4	2025-05-14 11:17:30.73006+00	2025-05-14 11:17:30.730063+00	t	45	38
774	How can an Alpine.js component listen for HTMX lifecycle events, such as <code>htmx:afterSwap</code>, to trigger client-side logic?	6	HTMX Events Alpine Listener	5	2025-05-14 11:17:30.730076+00	2025-05-14 11:17:30.730079+00	t	45	38
775	What is the significance of using <code>hx-push-url="true"</code> in the Live Search Product Catalog project when filters or search terms are applied?	6	hx-push-url	6	2025-05-14 11:17:30.730092+00	2025-05-14 11:17:30.730096+00	t	45	38
776	What is a key synergistic strength of using Django, HTMX, and Alpine.js together?	6	Strengths Synergy	7	2025-05-14 11:17:30.730108+00	2025-05-14 11:17:30.730111+00	t	45	38
777	When is Alpine.js typically used in a Django/HTMX/Alpine.js application?	6	Alpine.js Role	8	2025-05-14 11:17:30.730124+00	2025-05-14 11:17:30.730127+00	t	45	38
778	In the Live Search Product Catalog project, what is a common <code>hx-trigger</code> configuration for a search input field to provide a "live" search experience?	6	hx-trigger	9	2025-05-14 11:17:30.73014+00	2025-05-14 11:17:30.730143+00	t	45	38
779	When caching an HTML partial whose content varies per user (e.g., "My Orders"), what is a key consideration for Django's `@cache_page` decorator or the `{% cache %}` template tag?	6	User-Specific Caching	10	2025-05-14 11:17:30.730156+00	2025-05-14 11:17:30.730159+00	t	45	38
780	What is a primary benefit of using Django's `{% include "path/to/partial.html" %}` tag within a full-page template that also serves HTMX partials?	6	Include Partial DRY	11	2025-05-14 11:17:30.730171+00	2025-05-14 11:17:30.730175+00	t	45	38
781	In a Django view, what is the primary way to determine if an incoming request was made by HTMX, assuming <code>django-htmx</code> is installed?	6	request.htmx	12	2025-05-14 11:17:30.730187+00	2025-05-14 11:17:30.73019+00	t	45	38
782	Why is it crucial for Django views serving HTML partials for HTMX to implement their own authorization checks, even if the main page loading them has checks?	6	Authorization Partials	13	2025-05-14 11:17:30.730202+00	2025-05-14 11:17:30.730206+00	t	45	38
783	What is Server-Sent Events (SSE) and why is it often preferred for features like notification feeds in the Django/HTMX stack?	6	Server-Sent Events	14	2025-05-14 11:17:30.730218+00	2025-05-14 11:17:30.730221+00	t	45	38
784	In an integrated Django, HTMX, and Alpine.js stack, what is the primary role of HTMX?	6	HTMX Role	15	2025-05-14 11:17:30.730233+00	2025-05-14 11:17:30.730236+00	t	45	38
785	In the Interactive To-Do List project, how is the "inline editing" feature primarily implemented using HTMX and Alpine.js?	6	Inline Editing	16	2025-05-14 11:17:30.730249+00	2025-05-14 11:17:30.730252+00	t	45	38
786	What is a key reason to use Alpine.js alongside HTMX in a Django project, according to the text?	6	Synergy	17	2025-05-14 11:17:30.730264+00	2025-05-14 11:17:30.730267+00	t	45	38
787	What is the primary purpose of the <code>django_htmx.middleware.HtmxDetailsMiddleware</code> when integrating HTMX with Django?	6	HtmxDetailsMiddleware	18	2025-05-14 11:17:30.73028+00	2025-05-14 11:17:30.730283+00	t	45	38
788	How does Django's role adapt when integrated with HTMX for dynamic updates?	6	Django View Adaptation	19	2025-05-14 11:17:30.730295+00	2025-05-14 11:17:30.730298+00	t	45	38
789	What is a potential trade-off or limitation to consider when choosing the Django/HTMX/Alpine.js stack?	6	Trade-offs Limitations	20	2025-05-14 11:17:30.730311+00	2025-05-14 11:17:30.730314+00	t	45	38
790	What is the core principle of Progressive Enhancement in the context of a Django/HTMX/Alpine.js application?	6	Core Principle	1	2025-05-14 11:17:32.54176+00	2025-05-14 11:17:32.541775+00	t	46	39
791	When HTMX loads an HTML fragment containing Alpine.js component definitions (e.g., using `x-data`), how does Alpine.js typically become aware of and initialize these new components?	6	Alpine.js Initialization	2	2025-05-14 11:17:32.541793+00	2025-05-14 11:17:32.541798+00	t	46	39
792	How can an Alpine.js component effectively listen for global HTMX lifecycle events, such as `htmx:beforeRequest`, to manage a shared loading indicator state?	6	HTMX Events Loading State	3	2025-05-14 11:17:32.541833+00	2025-05-14 11:17:32.541837+00	t	46	39
793	What is a primary advantage of using a Class-Based View (CBV) mixin, like `HtmxTemplateMixin`, in Django for handling HTMX requests?	6	CBV Mixin Benefit	4	2025-05-14 11:17:32.541851+00	2025-05-14 11:17:32.541854+00	t	46	39
794	For maintainability in a Django/HTMX/Alpine.js application, what is the recommended core role for Alpine.js?	6	Maintainability Responsibilities	5	2025-05-14 11:17:32.541868+00	2025-05-14 11:17:32.541871+00	t	46	39
795	What is described as the primary security risk of directly embedding Django template variables into an `x-data` attribute string, for instance, in `x-data="{ name: '{{ user_name }}' }"`?	6	x-data XSS Risk	6	2025-05-14 11:17:32.541885+00	2025-05-14 11:17:32.541889+00	t	46	39
796	How does HTMX primarily complement Django's templating engine?	6	Templating Synergy	7	2025-05-14 11:17:32.541902+00	2025-05-14 11:17:32.541905+00	t	46	39
797	When integrating Alpine.js with Django templates, how does Django's template engine typically handle Alpine.js directives like `x-data` or `x-show` present in the HTML?	6	Directive Rendering	8	2025-05-14 11:17:32.541918+00	2025-05-14 11:17:32.541922+00	t	46	39
798	In an HTMX-enhanced Django formset, why is it crucial to correctly manage form prefixes (e.g., `form-0`, `form-1`) and potentially pass a `form_idx` when adding new forms dynamically?	6	Form Prefixing form_idx	9	2025-05-14 11:17:32.541935+00	2025-05-14 11:17:32.541939+00	t	46	39
799	Consider a Django view handling an HTMX request for a "Like" button. What is the typical structure of the HTTP response from this Django view?	6	Partial Response Example	10	2025-05-14 11:17:32.541953+00	2025-05-14 11:17:32.541956+00	t	46	39
800	If HTMX initiates a POST request from a non-form element (e.g., a button with `hx-post`), how does it typically transmit the CSRF token to a Django backend?	6	CSRF AJAX Header	11	2025-05-14 11:17:32.54198+00	2025-05-14 11:17:32.541984+00	t	46	39
801	When a new task is added in the To-Do List project using an HTMX POST request, what does the Django view typically return?	6	HTMX POST Response	12	2025-05-14 11:17:32.541996+00	2025-05-14 11:17:32.542+00	t	46	39
802	When a <code>&lt;form&gt;</code> element wraps multiple filter inputs (e.g., search box, category checkboxes) and has HTMX attributes for triggering requests, how are the values of all filters typically included in the HTMX request?	6	Form Serialization	13	2025-05-14 11:17:32.542013+00	2025-05-14 11:17:32.542016+00	t	46	39
803	If you use the Django template tag `{{ my_django_data|json_script:"myDataId" }}` to embed data, how would you typically access and parse this data to initialize an Alpine.js component's state via `x-data`?	6	json_script Usage	14	2025-05-14 11:17:32.54203+00	2025-05-14 11:17:32.542033+00	t	46	39
804	When creating an `HtmxTemplateMixin` for Django Class-Based Views to serve different templates for HTMX and standard requests, which CBV method is typically overridden to implement this logic?	6	HtmxTemplateMixin Method	15	2025-05-14 11:17:32.542046+00	2025-05-14 11:17:32.542049+00	t	46	39
805	What is the primary benefit of using Django's <code>{% raw %}{% include %}{% endraw %}</code> template tag for components that will also be served as HTMX partials?	6	Include Tag Benefits	16	2025-05-14 11:17:32.542062+00	2025-05-14 11:17:32.542065+00	t	46	39
806	What is the core principle for organizing Django views that need to serve both full HTML pages for initial loads and HTML partials for HTMX requests?	6	Full Partial Rendering	17	2025-05-14 11:17:32.542078+00	2025-05-14 11:17:32.542081+00	t	46	39
807	In a Django Class-Based View (CBV), which method is typically overridden to conditionally return different template names based on whether <code>request.htmx</code> is true?	6	CBV Template Selection	18	2025-05-14 11:17:32.542093+00	2025-05-14 11:17:32.542097+00	t	46	39
808	If an Alpine.js component is loaded into the page via an HTMX swap, how can it notify other existing Alpine.js components on the page about its arrival or a specific state change it wants to announce?	6	$dispatch Swapped Content	19	2025-05-14 11:17:32.542109+00	2025-05-14 11:17:32.542112+00	t	46	39
809	What is a common characteristic of an HTML file designed to be a "partial template" for HTMX responses?	6	Partial Template Structure	20	2025-05-14 11:17:32.542125+00	2025-05-14 11:17:32.542128+00	t	46	39
810	Which of the following is a common and appropriate scenario for using custom JavaScript in conjunction with HTMX?	7	JS Use Case	1	2025-05-14 11:17:34.363134+00	2025-05-14 11:17:34.363149+00	t	47	40
811	In the context of HTMX, what does "declarative vs. imperative" primarily refer to when comparing HTMX to traditional JavaScript AJAX?	7	Declarative vs Imperative	2	2025-05-14 11:17:34.363168+00	2025-05-14 11:17:34.363172+00	t	47	40
812	How can an HTMX AJAX request be programmatically cancelled using JavaScript and HTMX events?	7	htmx:beforeRequest preventDefault	3	2025-05-14 11:17:34.363186+00	2025-05-14 11:17:34.363189+00	t	47	40
813	What is the main function of the `hx-sync` attribute in HTMX?	7	hx-sync purpose	4	2025-05-14 11:17:34.363202+00	2025-05-14 11:17:34.363205+00	t	47	40
814	Which statement best describes a key strength of HTMX regarding JavaScript usage in web development?	7	HTMX Strengths JavaScript	5	2025-05-14 11:17:34.363218+00	2025-05-14 11:17:34.363221+00	t	47	40
815	How does HTMX typically approach client-side state management?	7	HTMX State Management	6	2025-05-14 11:17:34.363234+00	2025-05-14 11:17:34.363238+00	t	47	40
816	In which scenario is a full SPA framework generally more suitable than HTMX when working with a Django backend?	7	SPA Use Case	7	2025-05-14 11:17:34.36325+00	2025-05-14 11:17:34.363254+00	t	47	40
817	If an inline edit form, submitted via HTMX, fails server-side validation in Django, what is the recommended response from the server?	7	Validation Error Response	8	2025-05-14 11:17:34.363266+00	2025-05-14 11:17:34.36327+00	t	47	40
818	What is the core principle of "Progressive Enhancement" as it applies to web development with Django and HTMX?	7	Progressive Enhancement Principle	9	2025-05-14 11:17:34.363282+00	2025-05-14 11:17:34.363286+00	t	47	40
819	When using `hx-ws="send"` on an HTML form element, what does HTMX typically do upon form submission?	7	hx-ws send	10	2025-05-14 11:17:34.363298+00	2025-05-14 11:17:34.363301+00	t	47	40
820	If an HTMX interaction results in the removal of an element from the DOM (e.g., via `hx-swap="outerHTML"` on the element itself and a successful delete action), what is often an efficient and appropriate HTTP response from the Django server?	7	Deletion Response	11	2025-05-14 11:17:34.363314+00	2025-05-14 11:17:34.363317+00	t	47	40
821	What is the primary purpose of the `hx-confirm` attribute in HTMX?	7	hx-confirm purpose	12	2025-05-14 11:17:34.363329+00	2025-05-14 11:17:34.363332+00	t	47	40
822	After a user successfully saves changes through an inline edit form submitted via HTMX, what should the Django server typically return?	7	Save Success Response	13	2025-05-14 11:17:34.363345+00	2025-05-14 11:17:34.363348+00	t	47	40
823	What `Content-Type` header must a server send for a response to be correctly interpreted as a Server-Sent Events (SSE) stream by the browser and HTMX?	7	SSE Content-Type	14	2025-05-14 11:17:34.36336+00	2025-05-14 11:17:34.363363+00	t	47	40
824	What is the primary purpose of the <code>htmx-request</code> CSS class that HTMX automatically adds to elements?	7	htmx-request Class	15	2025-05-14 11:17:34.363376+00	2025-05-14 11:17:34.363379+00	t	47	40
825	What is generally the recommended and more robust approach for including the HTMX JavaScript library in a production Django project?	7	CDN vs Static Files	16	2025-05-14 11:17:34.363391+00	2025-05-14 11:17:34.363395+00	t	47	40
826	What critical server-side requirement must be met when using `hx-push-url` for HTMX-driven navigation?	7	hx-push-url server-side	17	2025-05-14 11:17:34.363408+00	2025-05-14 11:17:34.363411+00	t	47	40
827	When implementing sortable and paginable data tables with HTMX, why is using `hx-push-url="true"` on sorting and pagination links beneficial?	7	Tables hx-push-url	18	2025-05-14 11:17:34.363424+00	2025-05-14 11:17:34.363427+00	t	47	40
828	What is the primary architectural difference between a Django application using HTMX and one using a SPA framework (like React/Vue) with Django as a backend?	7	Architectural Difference	19	2025-05-14 11:17:34.363439+00	2025-05-14 11:17:34.363442+00	t	47	40
829	In the HTMX trigger `hx-trigger="keyup changed"`, what is the effect of the `changed` modifier?	7	hx-trigger changed	20	2025-05-14 11:17:34.363454+00	2025-05-14 11:17:34.363458+00	t	47	40
830	For a dynamic search feature using HTMX, what crucial piece of information does the HTMX-enabled input field typically send to the Django server with each request?	7	Dynamic Search Query	1	2025-05-14 11:17:36.17596+00	2025-05-14 11:17:36.175976+00	t	48	41
831	What is the primary purpose of the `hx-swap-oob` attribute in HTMX when used in a Django application?	7	hx-swap-oob purpose	2	2025-05-14 11:17:36.175995+00	2025-05-14 11:17:36.175999+00	t	48	41
832	When a Django Channels WebSocket consumer sends a message to an HTMX client, what format is the message payload generally expected to be in for HTMX to perform DOM updates?	7	WebSocket Message Content	3	2025-05-14 11:17:36.176014+00	2025-05-14 11:17:36.176017+00	t	48	41
833	What is the most fundamental technique for minimizing the payload size of responses from HTMX endpoints in a Django application?	7	Payload Minimization	4	2025-05-14 11:17:36.176031+00	2025-05-14 11:17:36.176034+00	t	48	41
834	What is the purpose of an event filter like `[someCondition === true]` in an HTMX trigger, e.g., `hx-trigger="click[myCheckbox.checked === true]"`?	7	hx-trigger event filter	5	2025-05-14 11:17:36.176047+00	2025-05-14 11:17:36.17605+00	t	48	41
835	In the browser's Network Developer Tools, which <code>HX-</code> prefixed request header is fundamental for a Django backend (especially with <code>django-htmx</code>) to identify that a request originated from HTMX and likely expects a partial HTML response?	7	HX-Request Header	6	2025-05-14 11:17:36.176063+00	2025-05-14 11:17:36.176067+00	t	48	41
836	When an element has `hx-sse="swap:myEventName"`, what action does HTMX perform?	7	hx-sse swap	7	2025-05-14 11:17:36.17608+00	2025-05-14 11:17:36.176083+00	t	48	41
837	What is the fundamental principle of Hypermedia as the Engine of Application State (HATEOAS) that HTMX helps realize in web applications?	7	HATEOAS	8	2025-05-14 11:17:36.176096+00	2025-05-14 11:17:36.176099+00	t	48	41
838	What is a potential trade-off of using HTMX that developers should be mindful of, especially if not managed correctly?	7	HTMX Trade-offs Chattiness	9	2025-05-14 11:17:36.176112+00	2025-05-14 11:17:36.176115+00	t	48	41
839	When a Django view returns an HTML fragment intended for an out-of-band swap, how does HTMX identify the specific DOM element to update with this fragment?	7	hx-swap-oob targeting	10	2025-05-14 11:17:36.176128+00	2025-05-14 11:17:36.176131+00	t	48	41
840	Which of the following best describes the primary advantage of HTMX expecting HTML fragments from the server instead of JSON?	7	HTML Fragments vs JSON	11	2025-05-14 11:17:36.176143+00	2025-05-14 11:17:36.176146+00	t	48	41
841	If an element has `hx-sync="this:drop"`, how does it affect new HTMX requests if a request from this element is already in flight?	7	hx-sync drop	12	2025-05-14 11:17:36.176159+00	2025-05-14 11:17:36.176162+00	t	48	41
842	What is a common and effective HTMX pattern for closing a modal whose content is loaded into a `div` with `id="modal-wrapper"`?	7	Modals Closing	13	2025-05-14 11:17:36.176174+00	2025-05-14 11:17:36.176177+00	t	48	41
843	In an HTMX active search input, what is the primary benefit of using `hx-trigger="keyup changed delay:300ms"`?	7	Active Search hx-trigger	14	2025-05-14 11:17:36.17619+00	2025-05-14 11:17:36.176193+00	t	48	41
844	What does the `HX-History-Restore-Request: true` header, sent by HTMX, indicate to the server?	7	HX-History-Restore-Request	15	2025-05-14 11:17:36.176206+00	2025-05-14 11:17:36.176209+00	t	48	41
845	When implementing inline editing with HTMX, what is the typical server response when an "Edit" button is clicked for a piece of content?	7	Edit Flow	16	2025-05-14 11:17:36.176222+00	2025-05-14 11:17:36.176225+00	t	48	41
846	When implementing dynamic tabs with HTMX, what is a common setup for the <code>hx-target</code> attribute on the tab buttons?	7	Dynamic Tabs Targeting	17	2025-05-14 11:17:36.176237+00	2025-05-14 11:17:36.17624+00	t	48	41
847	What is the purpose of the <code>hx-target</code> attribute in HTMX?	7	hx-target	18	2025-05-14 11:17:36.176253+00	2025-05-14 11:17:36.176256+00	t	48	41
848	When handling a Django form submission via HTMX (e.g., <code>hx-post</code>), if the form validation fails, what should the Django view typically return in its HTTP response?	7	Form Validation Errors	19	2025-05-14 11:17:36.176268+00	2025-05-14 11:17:36.176271+00	t	48	41
849	Which HTMX attribute is used to instruct an element to make an HTTP POST request, typically for submitting data or triggering state changes on the server?	7	hx-post	20	2025-05-14 11:17:36.176283+00	2025-05-14 11:17:36.176286+00	t	48	41
850	What is generally the recommended way to manage permissions for a large number of users in Django?	8	Group Permissions	1	2025-05-14 11:17:37.991865+00	2025-05-14 11:17:37.991884+00	t	49	42
851	Which of the following settings is essential for `django-allauth` due to its use of `django.contrib.sites`?\n<pre><code class="language-python">\n# project/settings.py\n# ??? = 1\n</code></pre>	8	django-allauth SITE_ID	2	2025-05-14 11:17:37.991906+00	2025-05-14 11:17:37.99191+00	t	49	42
852	What is the most significant way Django's ORM helps prevent SQL Injection vulnerabilities?	8	SQL Injection ORM	3	2025-05-14 11:17:37.991927+00	2025-05-14 11:17:37.991931+00	t	49	42
853	Consider the following Django settings snippet:\n<pre><code class="language-python">\nINSTALLED_APPS = [\n    # ... other apps ...\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    # ...\n]\n</code></pre>\nWhy is `'django.contrib.contenttypes'` essential for Django's authentication system?	8	INSTALLED_APPS ContentTypes	4	2025-05-14 11:17:37.991946+00	2025-05-14 11:17:37.991949+00	t	49	42
854	To prevent Insecure Direct Object References (IDOR) in a Django view that displays an order (e.g., <code>/orders/&lt;order_id&gt;/</code>), what is a critical check the view must perform in addition to ensuring the user is logged in?	8	IDOR Prevention	5	2025-05-14 11:17:37.991963+00	2025-05-14 11:17:37.991966+00	t	49	42
855	What is the primary purpose of the `authenticate(self, request, **credentials)` method in a Django authentication backend?	8	authenticate method	6	2025-05-14 11:17:37.991979+00	2025-05-14 11:17:37.991983+00	t	49	42
856	If you need to add a `date_of_birth` field to your user entity and potentially change the login identifier from `username` to `email`, which approach for customizing the User model is generally more suitable in Django?	8	AbstractUser	7	2025-05-14 11:17:37.991996+00	2025-05-14 11:17:37.992+00	t	49	42
857	How are default permissions (add, change, delete, view) typically created for a Django model?	8	Default Permissions	8	2025-05-14 11:17:37.992013+00	2025-05-14 11:17:37.992016+00	t	49	42
858	When would you typically choose to inherit from `AbstractBaseUser` rather than `AbstractUser` for a custom User model in Django?	8	AbstractBaseUser	9	2025-05-14 11:17:37.992029+00	2025-05-14 11:17:37.992033+00	t	49	42
859	When is the most critical time to decide on and implement a custom User model in a Django project?	8	Timing	10	2025-05-14 11:17:37.992047+00	2025-05-14 11:17:37.99205+00	t	49	42
860	How can you check if the currently logged-in user has a specific permission, say `'myapp.can_edit_widget'`, within a Django function-based view?	8	has_perm	11	2025-05-14 11:17:37.992064+00	2025-05-14 11:17:37.992067+00	t	49	42
861	How can you check for a user's permission within a Django template, for example, to conditionally display an "Edit" button if the user has the `'myapp.change_post'` permission?	8	Template Permissions	12	2025-05-14 11:17:37.992086+00	2025-05-14 11:17:37.99209+00	t	49	42
862	What is the primary purpose of the `django.contrib.contenttypes` framework in relation to Django's permission system?	8	ContentType Framework	13	2025-05-14 11:17:37.992103+00	2025-05-14 11:17:37.992106+00	t	49	42
863	Which of the following is NOT a core component of Django's built-in authentication framework?	8	Core Components	14	2025-05-14 11:17:37.992119+00	2025-05-14 11:17:37.992123+00	t	49	42
864	How can you define custom permissions for a Django model, such as `can_publish_post` for a `Post` model?	8	Custom Permissions	15	2025-05-14 11:17:37.992136+00	2025-05-14 11:17:37.992139+00	t	49	42
865	Which decorator is commonly used in Django to protect a function-based view so that only users with a specific permission can access it, raising a `PermissionDenied` exception if the check fails?	8	permission_required decorator	16	2025-05-14 11:17:37.992152+00	2025-05-14 11:17:37.992155+00	t	49	42
866	If you create a custom User model named `MyUser` in an app called `accounts`, what should the `AUTH_USER_MODEL` setting in `settings.py` be?	8	AUTH_USER_MODEL	17	2025-05-14 11:17:37.992168+00	2025-05-14 11:17:37.992171+00	t	49	42
867	What is the standard signature for a function intended to be used as a custom admin action in Django?	8	Admin Action Signature	18	2025-05-14 11:17:37.992184+00	2025-05-14 11:17:37.992187+00	t	49	42
868	What is a common cause for a "CSRF verification failed" error when submitting a Django form via a POST request?	8	CSRF Debugging	19	2025-05-14 11:17:37.992199+00	2025-05-14 11:17:37.992203+00	t	49	42
869	What is the fundamental difference between authentication and authorization in the context of web application security?	8	Core Concepts	20	2025-05-14 11:17:37.992215+00	2025-05-14 11:17:37.992218+00	t	49	42
870	What is the primary purpose of the `SOCIALACCOUNT_PROVIDERS` setting in `django-allauth`?	8	SOCIALACCOUNT_PROVIDERS	1	2025-05-14 11:17:39.802032+00	2025-05-14 11:17:39.802048+00	t	50	43
871	What is Django's primary defense mechanism against Cross-Site Scripting (XSS) vulnerabilities within its template system?	8	XSS Auto-escaping	2	2025-05-14 11:17:39.802067+00	2025-05-14 11:17:39.802071+00	t	50	43
872	What is the primary function of the `fieldsets` attribute within a Django `ModelAdmin` class?	8	fieldsets ModelAdmin	3	2025-05-14 11:17:39.802085+00	2025-05-14 11:17:39.802089+00	t	50	43
873	In a Django Class-Based View (CBV), which mixin is used to restrict access based on permissions, and which attribute specifies the required permission?	8	PermissionRequiredMixin	4	2025-05-14 11:17:39.802102+00	2025-05-14 11:17:39.802106+00	t	50	43
874	What is the purpose of the `USERNAME_FIELD` attribute in a custom Django User model?	8	USERNAME_FIELD	5	2025-05-14 11:17:39.802119+00	2025-05-14 11:17:39.802123+00	t	50	43
875	What is the primary security-related function of the `SECRET_KEY` variable in Django's `settings.py` file?	8	SECRET_KEY	6	2025-05-14 11:17:39.802137+00	2025-05-14 11:17:39.80214+00	t	50	43
876	How can you display a calculated value or the result of a model method as a column in the Django admin's change list view?	8	list_display Methods	7	2025-05-14 11:17:39.802153+00	2025-05-14 11:17:39.802156+00	t	50	43
877	In the context of configuring URLs for the Django admin site in `urls.py`, what does `admin.site.urls` represent?	8	admin.site.urls	8	2025-05-14 11:17:39.802169+00	2025-05-14 11:17:39.802172+00	t	50	43
878	How should you reference the active User model when defining a `ForeignKey` in another model (e.g., a `Post` model with an `author` field)?	8	Referencing User Model	9	2025-05-14 11:17:39.802184+00	2025-05-14 11:17:39.802187+00	t	50	43
879	When using `django-allauth`, where do you typically configure the Client ID and Client Secret for a social provider like Google?	8	django-allauth Configuration	10	2025-05-14 11:17:39.8022+00	2025-05-14 11:17:39.802204+00	t	50	43
880	In Django's typical request-response cycle for a protected resource, which process must occur first?	8	Process Order	11	2025-05-14 11:17:39.802216+00	2025-05-14 11:17:39.802219+00	t	50	43
881	To make a custom Django model manageable through the admin interface, what is the typical first step involving the app's `admin.py` file?	8	admin.py Model Registration	12	2025-05-14 11:17:39.802232+00	2025-05-14 11:17:39.802235+00	t	50	43
882	If a model field is included in the `readonly_fields` tuple of a `ModelAdmin` class, what additional step is typically required for that field to be visible on the admin change form?	8	readonly_fields Visibility	13	2025-05-14 11:17:39.802248+00	2025-05-14 11:17:39.802251+00	t	50	43
883	In a Django `ModelAdmin` class, what is the primary purpose of the `list_display` attribute?	8	list_display ModelAdmin	14	2025-05-14 11:17:39.802263+00	2025-05-14 11:17:39.802266+00	t	50	43
884	If you create a custom authentication backend and omit `'django.contrib.auth.backends.ModelBackend'` from `AUTHENTICATION_BACKENDS`, what is a likely consequence?	8	ModelBackend	15	2025-05-14 11:17:39.802279+00	2025-05-14 11:17:39.802282+00	t	50	43
885	How does Django's <code>CsrfViewMiddleware</code> primarily protect against Cross-Site Request Forgery attacks?	8	CSRF Protection	16	2025-05-14 11:17:39.802294+00	2025-05-14 11:17:39.802297+00	t	50	43
886	To enable the Django admin interface, which application must be included in the `INSTALLED_APPS` list in `settings.py`?	8	INSTALLED_APPS admin	17	2025-05-14 11:17:39.80231+00	2025-05-14 11:17:39.802313+00	t	50	43
887	What functionality does the `search_fields` attribute in a `ModelAdmin` class provide for the admin interface?	8	search_fields ModelAdmin	18	2025-05-14 11:17:39.802325+00	2025-05-14 11:17:39.802328+00	t	50	43
888	During the OAuth 2.0 flow for social login, what is typically exchanged for an `access_token`?	8	OAuth Access Token	19	2025-05-14 11:17:39.802341+00	2025-05-14 11:17:39.802344+00	t	50	43
889	In the context of social authentication using OAuth 2.0, what is the primary role of the `client_secret`?	8	OAuth Client Secret	20	2025-05-14 11:17:39.802357+00	2025-05-14 11:17:39.80236+00	t	50	43
890	What is the primary outcome of running the `python manage.py check --deploy` command?	9	check --deploy	1	2025-05-14 11:17:41.615496+00	2025-05-14 11:17:41.615531+00	t	51	44
891	Why is it necessary to add an app (e.g., `'library'` or `'library.apps.LibraryConfig'`) to the `INSTALLED_APPS` list in `settings.py`?	9	INSTALLED_APPS	2	2025-05-14 11:17:41.615568+00	2025-05-14 11:17:41.615573+00	t	51	44
892	Why is a deep understanding of Django's core infrastructure, beyond just the MVT pattern, considered crucial for developers?	9	Developer Understanding	3	2025-05-14 11:17:41.615587+00	2025-05-14 11:17:41.615591+00	t	51	44
893	Consider the Python code `value = os.environ.get('MY_CONFIG_VAR')` in Django's `settings.py`. If the environment variable `MY_CONFIG_VAR` is not set in the shell environment or any loaded `.env` file, and no default value is provided to `get()`, what will be the value of the `value` variable?	9	os.environ.get Default	4	2025-05-14 11:17:41.615605+00	2025-05-14 11:17:41.615608+00	t	51	44
894	According to The Twelve-Factor App methodology, where is the recommended location for storing configuration that varies between deployments (e.g., development, staging, production), such as database credentials or API keys?	9	Environment Variables Twelve-Factor	5	2025-05-14 11:17:41.615621+00	2025-05-14 11:17:41.615625+00	t	51	44
895	What is the main role of the `collectstatic` command in the context of Django's infrastructure and its interaction with Templates?	9	collectstatic Templates	6	2025-05-14 11:17:41.615638+00	2025-05-14 11:17:41.615641+00	t	51	44
896	How does the `settings.py` file primarily connect to Django Models within the MVT (Model-View-Template) architecture?	9	settings.py Models	7	2025-05-14 11:17:41.615654+00	2025-05-14 11:17:41.615657+00	t	51	44
897	In Django's MVT (Model-View-Template) architecture, what is the primary responsibility of the Template layer?	9	Template Role MVT	8	2025-05-14 11:17:41.61567+00	2025-05-14 11:17:41.615673+00	t	51	44
898	In Django's Model-View-Template (MVT) architecture, what is the primary role of the "View" component?	9	View Role	9	2025-05-14 11:17:41.615686+00	2025-05-14 11:17:41.615689+00	t	51	44
899	Which `manage.py` command is used to launch an interactive Python interpreter session with your Django project's environment fully loaded, allowing direct interaction with models and other components?	9	shell	10	2025-05-14 11:17:41.615702+00	2025-05-14 11:17:41.615706+00	t	51	44
900	When logging an exception in a Django view using <code>logger.error()</code>, what is the effect of passing <code>exc_info=True</code>?	9	exc_info	11	2025-05-14 11:17:41.615718+00	2025-05-14 11:17:41.615722+00	t	51	44
901	When `DEBUG = False` in Django settings, what is the default behavior if an unhandled exception occurs in a view?	9	Production Error Handling	12	2025-05-14 11:17:41.615739+00	2025-05-14 11:17:41.615742+00	t	51	44
902	What is the primary purpose of the `python manage.py runserver` command in a Django project?	9	runserver	13	2025-05-14 11:17:41.615756+00	2025-05-14 11:17:41.615759+00	t	51	44
903	What does the "Fat Models, Thin Views" principle primarily advocate for in Django application architecture?	9	Principle Definition	14	2025-05-14 11:17:41.615772+00	2025-05-14 11:17:41.615775+00	t	51	44
904	What is the primary role of the `manage.py` file in a Django project?	9	manage.py	15	2025-05-14 11:17:41.615787+00	2025-05-14 11:17:41.61579+00	t	51	44
905	What is the main function of the `python manage.py createsuperuser` command in Django?	9	createsuperuser	16	2025-05-14 11:17:41.615817+00	2025-05-14 11:17:41.61582+00	t	51	44
906	In a Django model, when is it most appropriate to use the `@property` decorator for a method?	9	Model @property	17	2025-05-14 11:17:41.615833+00	2025-05-14 11:17:41.615836+00	t	51	44
907	In a Django view, what is the recommended way to handle a situation where a specific object queried using <code>MyModel.objects.get(pk=...)</code> is not found in the database?	9	DoesNotExist Http404	18	2025-05-14 11:17:41.615849+00	2025-05-14 11:17:41.615853+00	t	51	44
908	What is a common reason to override a Django model's `save()` method?	9	Overriding save()	19	2025-05-14 11:17:41.615865+00	2025-05-14 11:17:41.615868+00	t	51	44
909	When organizing Django templates for use with HTMX, why is it beneficial to create small, reusable HTML partials (e.g., <code>_item_list.html</code>)?	9	Template Partials	20	2025-05-14 11:17:41.615881+00	2025-05-14 11:17:41.615884+00	t	51	44
910	Which of the following operations typically bypasses a model's custom `save()` method by default?	9	save() Bypass	1	2025-05-14 11:17:43.427958+00	2025-05-14 11:17:43.427978+00	t	52	45
911	Which command is used to create a new Django project in the current directory, avoiding an extra level of nesting for the project files?	9	startproject command	2	2025-05-14 11:17:43.428011+00	2025-05-14 11:17:43.428022+00	t	52	45
912	When an HTMX form submission results in validation errors in a Django view, what is a common and effective way for the view to respond?	9	HTTP 422 Validation	3	2025-05-14 11:17:43.428048+00	2025-05-14 11:17:43.428054+00	t	52	45
913	Which of the following is NOT a core responsibility of a Django view?	9	View Responsibilities	4	2025-05-14 11:17:43.428077+00	2025-05-14 11:17:43.428085+00	t	52	45
914	What is the key difference between a Django project and a Django app?	9	Project vs App	5	2025-05-14 11:17:43.428099+00	2025-05-14 11:17:43.428103+00	t	52	45
915	How do you define custom views to handle 404 (Page Not Found) and 500 (Server Error) responses in a Django project?	9	Custom Error Views	6	2025-05-14 11:17:43.428117+00	2025-05-14 11:17:43.42812+00	t	52	45
916	Which is NOT a primary benefit of adhering to the "Fat Models, Thin Views" principle?	9	Principle Benefits	7	2025-05-14 11:17:43.428134+00	2025-05-14 11:17:43.428137+00	t	52	45
917	What critical line of code must be included in an overridden `save()` method of a Django model to ensure data is actually persisted to the database?	9	super().save()	8	2025-05-14 11:17:43.42815+00	2025-05-14 11:17:43.428153+00	t	52	45
918	What is a key benefit of the Separation of Concerns promoted by Django's MVT pattern, particularly concerning views?	9	Separation of Concerns	9	2025-05-14 11:17:43.428166+00	2025-05-14 11:17:43.428169+00	t	52	45
919	What is the main purpose of a `requirements.txt` file in a Python/Django project?	9	requirements.txt	10	2025-05-14 11:17:43.428182+00	2025-05-14 11:17:43.428185+00	t	52	45
920	In Django's logging configuration, what is the primary role of a "Handler"?	9	Logging Handler	11	2025-05-14 11:17:43.428198+00	2025-05-14 11:17:43.428201+00	t	52	45
921	What is a primary advantage of using Django Channels for handling SSE or WebSocket connections compared to traditional Django request-response mechanisms like `StreamingHttpResponse`?	10	Channels Benefit	1	2025-05-14 11:17:45.237662+00	2025-05-14 11:17:45.237676+00	t	53	46
922	In Django REST Framework (DRF), what is the primary function of a Serializer?	10	DRF Serializer Purpose	2	2025-05-14 11:17:45.237696+00	2025-05-14 11:17:45.2377+00	t	53	46
923	What is the purpose of the `X_FRAME_OPTIONS` setting in Django, typically set to `'DENY'`?	10	X-Frame-Options	3	2025-05-14 11:17:45.237714+00	2025-05-14 11:17:45.237718+00	t	53	46
924	Which Django setting is used to define a list of validators that new passwords must pass, enforcing policies like minimum length or preventing common passwords?	10	AUTH_PASSWORD_VALIDATORS	4	2025-05-14 11:17:45.237732+00	2025-05-14 11:17:45.237735+00	t	53	46
925	Why is it critical to set `DEBUG = False` in a production Django environment?	10	DEBUG Setting	5	2025-05-14 11:17:45.237748+00	2025-05-14 11:17:45.237751+00	t	53	46
926	What is the purpose of "salting" in password hashing?	10	Password Salting	6	2025-05-14 11:17:45.237765+00	2025-05-14 11:17:45.237769+00	t	53	46
927	How does Django's CSRF protection mechanism (Synchronizer Token Pattern) work at a high level?	10	CSRF Mechanism	7	2025-05-14 11:17:45.237782+00	2025-05-14 11:17:45.237785+00	t	53	46
928	In Django Channels, what is the role of the `ProtocolTypeRouter` typically defined in `asgi.py`?	10	ProtocolTypeRouter	8	2025-05-14 11:17:45.237799+00	2025-05-14 11:17:45.237823+00	t	53	46
929	Why is using HTTPS crucial for all authentication traffic in a web application?	10	HTTPS	9	2025-05-14 11:17:45.237836+00	2025-05-14 11:17:45.23784+00	t	53	46
930	In a custom Django management command class that inherits from `django.core.management.base.BaseCommand`, which method is specifically used to define the command-line arguments that the command accepts?	10	add_arguments	10	2025-05-14 11:17:45.237853+00	2025-05-14 11:17:45.237856+00	t	53	46
931	What is the role of the `ALLOWED_HOSTS` setting in Django when `DEBUG = False`?	10	ALLOWED_HOSTS	11	2025-05-14 11:17:45.237869+00	2025-05-14 11:17:45.237873+00	t	53	46
932	Which specific Django middleware is responsible for populating the `request.user` attribute with either a `User` object (for logged-in users) or an `AnonymousUser` instance (for users not logged in)?	10	AuthenticationMiddleware	12	2025-05-14 11:17:45.237885+00	2025-05-14 11:17:45.237889+00	t	53	46
933	What is the primary purpose of the `{% csrf_token %}` template tag in Django forms?	10	CSRF Protection	13	2025-05-14 11:17:45.237902+00	2025-05-14 11:17:45.237905+00	t	53	46
934	What is the purpose of HTTP Strict Transport Security (HSTS) and settings like `SECURE_HSTS_SECONDS`?	10	HSTS	14	2025-05-14 11:17:45.237918+00	2025-05-14 11:17:45.237921+00	t	53	46
935	When creating a simple read-only API endpoint using Django REST Framework to list all <code>Article</code> objects, which generic view is most commonly used?	10	ListAPIView	15	2025-05-14 11:17:45.237934+00	2025-05-14 11:17:45.237937+00	t	53	46
936	Why is the order of middleware classes in Django's <code>settings.MIDDLEWARE</code> list crucial?	10	Middleware Order	16	2025-05-14 11:17:45.23795+00	2025-05-14 11:17:45.237968+00	t	53	46
937	Which security best practice involves using the `SECURE_SSL_REDIRECT = True` setting in Django?	10	HTTPS Enforcement	17	2025-05-14 11:17:45.237982+00	2025-05-14 11:17:45.237986+00	t	53	46
938	When consuming external APIs in a Django view, why is it crucial to include a <code>timeout</code> parameter in your <code>requests.get()</code> or <code>requests.post()</code> calls?	10	requests timeout	18	2025-05-14 11:17:45.237999+00	2025-05-14 11:17:45.238002+00	t	53	46
939	If you want to create a custom Django management command named `my_script` within an application called `reporting`, where should the Python file for this command typically be located?	10	Command File Location	19	2025-05-14 11:17:45.238015+00	2025-05-14 11:17:45.238018+00	t	53	46
940	What is a primary advantage of using a third-party library like `django-crispy-forms` for rendering Django forms in templates?	10	django-crispy-forms	20	2025-05-14 11:17:45.238031+00	2025-05-14 11:17:45.238034+00	t	53	46
941	What is a "channel layer" in the context of Django Channels?	10	Channel Layer	1	2025-05-14 11:17:47.049975+00	2025-05-14 11:17:47.049991+00	t	54	47
942	What is the primary security function of the `django.middleware.csrf.CsrfViewMiddleware` component in Django?	10	CsrfViewMiddleware	2	2025-05-14 11:17:47.05001+00	2025-05-14 11:17:47.050014+00	t	54	47
943	Which built-in Django middleware is primarily responsible for enabling session functionality, allowing data to be stored and retrieved on a per-visitor basis (e.g., populating `request.session`)?	10	SessionMiddleware	3	2025-05-14 11:17:47.050028+00	2025-05-14 11:17:47.050031+00	t	54	47
944	What is the name of the primary method within a custom Django management command class (subclass of `BaseCommand`) where you implement the core logic that gets executed when the command is run?	10	handle Method	4	2025-05-14 11:17:47.050045+00	2025-05-14 11:17:47.050049+00	t	54	47
945	In a Django middleware's <code>__call__(self, request)</code> method, where would you typically place code to modify the <code>HttpResponse</code> object just before it's sent back to the client?	10	Middleware Response Modification	5	2025-05-14 11:17:47.050062+00	2025-05-14 11:17:47.050066+00	t	54	47
946	In a Django Channels WebSocket consumer, what is the purpose of `await self.channel_layer.group_add(group_name, self.channel_name)`?	10	group_add	6	2025-05-14 11:17:47.050079+00	2025-05-14 11:17:47.050083+00	t	54	47
947	What is the role of the <code>get_response</code> argument in a Django middleware's <code>__init__(self, get_response)</code> method?	10	Middleware get_response	7	2025-05-14 11:17:47.050096+00	2025-05-14 11:17:47.050099+00	t	54	47
948	In Django's request/response processing pipeline, in what order are middleware components generally processed during the initial request phase (before the view is called)?	10	Middleware Order Request	8	2025-05-14 11:17:47.050112+00	2025-05-14 11:17:47.050116+00	t	54	47
949	What is a key benefit of using <code>response.raise_for_status()</code> when consuming an external API with the <code>requests</code> library in a Django view?	10	requests raise_for_status	9	2025-05-14 11:17:47.050128+00	2025-05-14 11:17:47.050131+00	t	54	47
950	What is a likely consequence if `django.contrib.sessions.middleware.SessionMiddleware` is placed *after* `django.contrib.auth.middleware.AuthenticationMiddleware` in the `MIDDLEWARE` list in `settings.py`?	10	Middleware Order Error	10	2025-05-14 11:17:47.050144+00	2025-05-14 11:17:47.050147+00	t	54	47
951	In a Django project using Channels for features like SSE or WebSockets, what is the role of the <code>ASGI_APPLICATION</code> setting in <code>settings.py</code>?	10	ASGI_APPLICATION	11	2025-05-14 11:17:47.05016+00	2025-05-14 11:17:47.050163+00	t	54	47
952	What is the primary mechanism Django uses to protect plaintext passwords from being stored in the database?	10	Password Hashing	12	2025-05-14 11:17:47.050176+00	2025-05-14 11:17:47.050179+00	t	54	47
953	What happens when an HTML partial loaded via an HTMX swap contains elements with Alpine.js directives like <code>x-data</code>?	11	Alpine.js Initialization	1	2025-05-14 11:17:48.863846+00	2025-05-14 11:17:48.863862+00	t	55	48
954	In a Django and HTMX setup, if HTMX fetches new data as a JSON array, how could <code>x-for</code> be used to display this new data within an Alpine component?	11	x-for HTMX	2	2025-05-14 11:17:48.863882+00	2025-05-14 11:17:48.863885+00	t	55	48
955	What is the primary purpose of <code>functools.wraps</code> when writing a custom Python decorator?	11	functools.wraps	3	2025-05-14 11:17:48.863899+00	2025-05-14 11:17:48.863903+00	t	55	48
956	If multiple decorators are applied to a single Django view function, in what order are they typically applied and executed?	11	Decorator Order	4	2025-05-14 11:17:48.863916+00	2025-05-14 11:17:48.86392+00	t	55	48
\.


--
-- Data for Name: multi_choice_quiz_quiz; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.multi_choice_quiz_quiz (id, title, description, created_at, updated_at, is_active) FROM stdin;
1	01 Django Core & ORM: Django Models - Quiz 1		2025-05-14 11:16:10.131041+00	2025-05-14 11:16:10.131069+00	t
2	01 Django Core & ORM: Django Models - Quiz 2		2025-05-14 11:16:12.082445+00	2025-05-14 11:16:12.082466+00	t
3	01 Django Core & ORM: Django Models - Quiz 3		2025-05-14 11:16:13.58671+00	2025-05-14 11:16:13.586732+00	t
4	01 Django Core & ORM: Django Models - Quiz 4		2025-05-14 11:16:15.084183+00	2025-05-14 11:16:15.084201+00	t
5	02 Software Testing & Quality Assurance: Django Testing - Quiz 1		2025-05-14 11:16:16.90304+00	2025-05-14 11:16:16.903058+00	t
6	02 Software Testing & Quality Assurance: Python Testing - Quiz 2		2025-05-14 11:16:19.13885+00	2025-05-14 11:16:19.138869+00	t
7	03 JavaScript & Frontend Development: JavaScript Frameworks - Quiz 1		2025-05-14 11:16:20.952388+00	2025-05-14 11:16:20.952406+00	t
8	04 Python Programming (General): Python Standard Library - Quiz 1		2025-05-14 11:16:22.771857+00	2025-05-14 11:16:22.771874+00	t
9	05 Python Programming (General): Data Handling (Pandas) - Quiz 1		2025-05-14 11:16:24.587427+00	2025-05-14 11:16:24.587445+00	t
10	01 Cloud Run & Docker Essentials: Cloud Run Docker Essentials - Quiz 1		2025-05-14 11:16:26.40055+00	2025-05-14 11:16:26.400566+00	t
11	02 Cloud SQL: Cloud SQL Basics - Quiz 1		2025-05-14 11:16:28.638931+00	2025-05-14 11:16:28.638949+00	t
12	03 Secret Manager: Secret Management - Quiz 1		2025-05-14 11:16:30.457541+00	2025-05-14 11:16:30.457559+00	t
13	04 CI/CD with Cloud Build: CI CD Cloud Build - Quiz 1		2025-05-14 11:16:32.270604+00	2025-05-14 11:16:32.270621+00	t
14	05 Cloud Storage: Cloud Storage - Quiz 1		2025-05-14 11:16:34.096457+00	2025-05-14 11:16:34.096477+00	t
15	06 Monitoring & Logging: Monitoring Logging - Quiz 1		2025-05-14 11:16:35.919999+00	2025-05-14 11:16:35.920018+00	t
16	01 Cloud Run 01: Cloud Run Setup - Quiz 1		2025-05-14 11:16:37.739778+00	2025-05-14 11:16:37.739795+00	t
17	02 Cloud Run 02: Container & Docker - Quiz 1		2025-05-14 11:16:39.555702+00	2025-05-14 11:16:39.555721+00	t
18	03 Essential Django Authentication and Authorization: Authentication - Quiz 1		2025-05-14 11:16:41.377497+00	2025-05-14 11:16:41.377516+00	t
19	03 Essential Django Authentication and Authorization: Authentication - Quiz 2		2025-05-14 11:16:42.877014+00	2025-05-14 11:16:42.877032+00	t
20	01 Foundations of Software Testing & Pytest Essentials: Thinking Like a Tester - Quiz 1		2025-05-14 11:16:44.697382+00	2025-05-14 11:16:44.6974+00	t
21	01 Foundations of Software Testing & Pytest Essentials: Benefits of Testing - Quiz 2		2025-05-14 11:16:46.93743+00	2025-05-14 11:16:46.93746+00	t
22	01 Foundations of Software Testing & Pytest Essentials: Test Refactoring - Quiz 3		2025-05-14 11:16:48.751224+00	2025-05-14 11:16:48.751242+00	t
23	02 End-to-End Testing with Playwright & pytest-playwright: Playwright Actions - Quiz 1		2025-05-14 11:16:50.567206+00	2025-05-14 11:16:50.567224+00	t
24	02 End-to-End Testing with Playwright & pytest-playwright: Playwright Navigation - Quiz 2		2025-05-14 11:16:52.805429+00	2025-05-14 11:16:52.805448+00	t
25	02 End-to-End Testing with Playwright & pytest-playwright: Playwright Actions - Quiz 3		2025-05-14 11:16:54.305712+00	2025-05-14 11:16:54.305729+00	t
26	03 Django Unit & Integration Testing with Pytest: Django Form Validation - Quiz 1		2025-05-14 11:16:56.128729+00	2025-05-14 11:16:56.128747+00	t
27	03 Django Unit & Integration Testing with Pytest: Pytest Django Integration - Quiz 2		2025-05-14 11:16:57.950355+00	2025-05-14 11:16:57.950372+00	t
28	03 Django Unit & Integration Testing with Pytest: GET Requests - Quiz 3		2025-05-14 11:16:59.791938+00	2025-05-14 11:16:59.792136+00	t
29	04 Specialized Testing, Mocking, and Test Operations: GitHub Actions - Quiz 1		2025-05-14 11:17:01.657877+00	2025-05-14 11:17:01.657895+00	t
30	04 Specialized Testing, Mocking, and Test Operations: GitHub Actions - Quiz 2		2025-05-14 11:17:03.159196+00	2025-05-14 11:17:03.159212+00	t
31	05 Advanced E2E Testing Strategies & Techniques: Playwright Viewport - Quiz 1		2025-05-14 11:17:04.97569+00	2025-05-14 11:17:04.975886+00	t
32	05 Advanced E2E Testing Strategies & Techniques: Brittle Locators - Quiz 2		2025-05-14 11:17:06.798771+00	2025-05-14 11:17:06.798789+00	t
33	06 Python Programming (General): Test Execution - Quiz 1		2025-05-14 11:17:08.615454+00	2025-05-14 11:17:08.615472+00	t
34	01 Django Models & ORM: Query Optimization - Quiz 1		2025-05-14 11:17:10.430839+00	2025-05-14 11:17:10.430858+00	t
35	01 Django Models & ORM: One-to-Many Relationships - Quiz 2		2025-05-14 11:17:12.247508+00	2025-05-14 11:17:12.247526+00	t
36	01 Django Models & ORM: Model Inheritance - Quiz 3		2025-05-14 11:17:14.068498+00	2025-05-14 11:17:14.06852+00	t
37	02 Django Forms & Media/Static Files: Django ModelForms - Quiz 1		2025-05-14 11:17:15.891484+00	2025-05-14 11:17:15.891501+00	t
38	02 Django Forms & Media/Static Files: Django Advanced Forms - Quiz 2		2025-05-14 11:17:17.702957+00	2025-05-14 11:17:17.702988+00	t
39	03 Django Views, URLs & Templates (DTL): Generic View Customization - Quiz 1		2025-05-14 11:17:19.521324+00	2025-05-14 11:17:19.52134+00	t
40	03 Django Views, URLs & Templates (DTL): View Types - Quiz 2		2025-05-14 11:17:21.332195+00	2025-05-14 11:17:21.332212+00	t
41	04 Alpine.js: Alpine.js Directives - Quiz 1		2025-05-14 11:17:23.14874+00	2025-05-14 11:17:23.148759+00	t
42	04 Alpine.js: Alpine.js Directives - Quiz 2		2025-05-14 11:17:25.069365+00	2025-05-14 11:17:25.069382+00	t
43	05 Testing & Deployment with Docker & GCP: HTMX Cloud Run - Quiz 1		2025-05-14 11:17:26.885303+00	2025-05-14 11:17:26.885321+00	t
44	05 Testing & Deployment with Docker & GCP: Cloud Build CI/CD - Quiz 2		2025-05-14 11:17:28.699001+00	2025-05-14 11:17:28.69902+00	t
45	06 The Django-HTMX-Alpine (DHA) Stack & Projects: Alpine.js HTMX Synergy - Quiz 1		2025-05-14 11:17:30.51787+00	2025-05-14 11:17:30.517889+00	t
46	06 The Django-HTMX-Alpine (DHA) Stack & Projects: Django Alpine Integration - Quiz 2		2025-05-14 11:17:32.329693+00	2025-05-14 11:17:32.329712+00	t
47	07 HTMX: HTMX Request Control - Quiz 1		2025-05-14 11:17:34.151129+00	2025-05-14 11:17:34.151148+00	t
48	07 HTMX: HTMX Use Cases - Quiz 2		2025-05-14 11:17:35.96405+00	2025-05-14 11:17:35.964069+00	t
49	08 Django Admin, Authentication & Authorization: Django Permissions - Quiz 1		2025-05-14 11:17:37.7797+00	2025-05-14 11:17:37.77972+00	t
50	08 Django Admin, Authentication & Authorization: Django Admin Customization - Quiz 2		2025-05-14 11:17:39.590051+00	2025-05-14 11:17:39.590069+00	t
51	09 Django Fundamentals & Project Setup: manage.py Commands - Quiz 1		2025-05-14 11:17:41.403433+00	2025-05-14 11:17:41.403451+00	t
52	09 Django Fundamentals & Project Setup: Fat Models Thin Views - Quiz 2		2025-05-14 11:17:43.215886+00	2025-05-14 11:17:43.215903+00	t
53	10 Advanced Django & Asynchronous Operations: Security Best Practices - Quiz 1		2025-05-14 11:17:45.025553+00	2025-05-14 11:17:45.02557+00	t
54	10 Advanced Django & Asynchronous Operations: Django Channels - Quiz 2		2025-05-14 11:17:46.838407+00	2025-05-14 11:17:46.838424+00	t
55	11 Python Programming (General): View Decorators - Quiz 1		2025-05-14 11:17:48.652197+00	2025-05-14 11:17:48.652217+00	t
\.


--
-- Data for Name: multi_choice_quiz_quiz_topics; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.multi_choice_quiz_quiz_topics (id, quiz_id, topic_id) FROM stdin;
1	1	1
2	2	1
3	3	1
4	4	1
5	5	2
6	6	3
7	7	4
8	8	5
9	9	6
10	10	7
11	11	8
12	12	9
13	13	10
14	14	11
15	15	12
16	16	13
17	17	14
18	18	15
19	19	15
20	20	16
21	21	17
22	22	18
23	23	19
24	24	20
25	25	19
26	26	21
27	27	22
28	28	23
29	29	24
30	30	24
31	31	25
32	32	26
33	33	27
34	34	28
35	35	29
36	36	30
37	37	31
38	38	32
39	39	33
40	40	34
41	41	35
42	42	35
43	43	36
44	44	37
45	45	38
46	46	39
47	47	40
48	48	41
49	49	42
50	50	43
51	51	44
52	52	45
53	53	46
54	54	47
55	55	48
\.


--
-- Data for Name: multi_choice_quiz_quizattempt; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.multi_choice_quiz_quizattempt (id, score, total_questions, percentage, start_time, end_time, attempt_details, quiz_id, user_id) FROM stdin;
1	3	4	75	2025-05-14 11:25:07.810496+00	2025-05-14 11:25:06.556+00	{"956": {"user_answer_idx": 0, "correct_answer_idx": 3}}	55	\N
2	4	4	100	2025-05-14 19:33:50.744063+00	2025-05-14 19:33:50.075+00	\N	55	1
3	12	12	100	2025-05-14 21:08:38.81858+00	2025-05-14 21:08:37.408+00	\N	54	1
4	11	11	100	2025-05-14 21:15:15.501465+00	2025-05-14 21:15:14.024+00	\N	52	1
5	16	20	80	2025-05-15 06:16:18.549518+00	2025-05-15 06:16:14.968+00	{"841": {"user_answer_idx": 2, "correct_answer_idx": 0}, "842": {"user_answer_idx": 1, "correct_answer_idx": 3}, "845": {"user_answer_idx": 3, "correct_answer_idx": 1}, "846": {"user_answer_idx": 3, "correct_answer_idx": 4}}	48	1
6	18	20	90	2025-05-15 17:06:20.256305+00	2025-05-15 17:06:19.516+00	{"116": {"user_answer_idx": 4, "correct_answer_idx": 1}, "117": {"user_answer_idx": 3, "correct_answer_idx": 4}}	7	1
7	18	20	90	2025-05-16 06:20:41.109095+00	2025-05-16 06:20:40.854+00	{"934": {"user_answer_idx": 0, "correct_answer_idx": 1}, "935": {"user_answer_idx": 1, "correct_answer_idx": 3}}	53	1
8	20	20	100	2025-05-16 07:39:28.335251+00	2025-05-16 07:39:28.026+00	\N	51	1
\.


--
-- Data for Name: multi_choice_quiz_topic; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.multi_choice_quiz_topic (id, name, description) FROM stdin;
1	Django Models	
2	Django Testing	
3	Python Testing	
4	JavaScript Frameworks	
5	Python Standard Library	
6	Data Handling (Pandas)	
7	Cloud Run Docker Essentials	
8	Cloud SQL Basics	
9	Secret Management	
10	CI CD Cloud Build	
11	Cloud Storage	
12	Monitoring Logging	
13	Cloud Run Setup	
14	Container & Docker	
15	Authentication	
16	Thinking Like a Tester	
17	Benefits of Testing	
18	Test Refactoring	
19	Playwright Actions	
20	Playwright Navigation	
21	Django Form Validation	
22	Pytest Django Integration	
23	GET Requests	
24	GitHub Actions	
25	Playwright Viewport	
26	Brittle Locators	
27	Test Execution	
28	Query Optimization	
29	One-to-Many Relationships	
30	Model Inheritance	
31	Django ModelForms	
32	Django Advanced Forms	
33	Generic View Customization	
34	View Types	
35	Alpine.js Directives	
36	HTMX Cloud Run	
37	Cloud Build CI/CD	
38	Alpine.js HTMX Synergy	
39	Django Alpine Integration	
40	HTMX Request Control	
41	HTMX Use Cases	
42	Django Permissions	
43	Django Admin Customization	
44	manage.py Commands	
45	Fat Models Thin Views	
46	Security Best Practices	
47	Django Channels	
48	View Decorators	
\.


--
-- Data for Name: pages_systemcategory; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.pages_systemcategory (id, name, slug, description) FROM stdin;
1	Django Core & Fundamentals	django-core-fundamentals	
2	General & Foundational Programming	general-foundational-programming	
3	Deployment & DevOps (GCP Focus)	deployment-devops-gcp-focus	
4	Django Testing	django-testing	
5	End-to-End Testing (Playwright)	end-to-end-testing-playwright	
6	Django Frontend Integration (HTMX & Alpine.js)	django-frontend-integration-htmx-alpinejs	
\.


--
-- Data for Name: pages_systemcategory_quizzes; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.pages_systemcategory_quizzes (id, systemcategory_id, quiz_id) FROM stdin;
1	1	1
2	1	2
3	1	3
4	1	4
5	2	5
6	2	6
7	2	7
8	2	8
9	2	9
10	3	10
11	3	11
12	3	12
13	3	13
14	3	14
15	3	15
16	3	16
17	3	17
18	1	18
19	1	19
20	4	20
21	4	21
22	4	22
23	5	23
24	5	24
25	5	25
26	4	26
27	4	27
28	4	28
29	4	29
30	4	30
31	5	31
32	5	32
33	4	33
34	1	34
35	1	35
36	1	36
37	1	37
38	1	38
39	1	39
40	1	40
41	6	41
42	6	42
43	3	43
44	3	44
45	6	45
46	6	46
47	6	47
48	6	48
49	1	49
50	1	50
51	1	51
52	1	52
53	1	53
54	1	54
55	1	55
\.


--
-- Data for Name: pages_usercollection; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.pages_usercollection (id, name, description, created_at, updated_at, user_id) FROM stdin;
\.


--
-- Data for Name: pages_usercollection_quizzes; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.pages_usercollection_quizzes (id, usercollection_id, quiz_id) FROM stdin;
\.


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 52, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 1, true);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 1, false);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 13, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 20, true);


--
-- Name: multi_choice_quiz_option_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.multi_choice_quiz_option_id_seq', 4780, true);


--
-- Name: multi_choice_quiz_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.multi_choice_quiz_question_id_seq', 956, true);


--
-- Name: multi_choice_quiz_quiz_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.multi_choice_quiz_quiz_id_seq', 55, true);


--
-- Name: multi_choice_quiz_quiz_topics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.multi_choice_quiz_quiz_topics_id_seq', 55, true);


--
-- Name: multi_choice_quiz_quizattempt_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.multi_choice_quiz_quizattempt_id_seq', 8, true);


--
-- Name: multi_choice_quiz_topic_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.multi_choice_quiz_topic_id_seq', 48, true);


--
-- Name: pages_systemcategory_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.pages_systemcategory_id_seq', 6, true);


--
-- Name: pages_systemcategory_quizzes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.pages_systemcategory_quizzes_id_seq', 55, true);


--
-- Name: pages_usercollection_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.pages_usercollection_id_seq', 1, false);


--
-- Name: pages_usercollection_quizzes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.pages_usercollection_quizzes_id_seq', 1, false);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: multi_choice_quiz_option multi_choice_quiz_option_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_option
    ADD CONSTRAINT multi_choice_quiz_option_pkey PRIMARY KEY (id);


--
-- Name: multi_choice_quiz_option multi_choice_quiz_option_question_id_position_c3bd0206_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_option
    ADD CONSTRAINT multi_choice_quiz_option_question_id_position_c3bd0206_uniq UNIQUE (question_id, "position");


--
-- Name: multi_choice_quiz_question multi_choice_quiz_question_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_question
    ADD CONSTRAINT multi_choice_quiz_question_pkey PRIMARY KEY (id);


--
-- Name: multi_choice_quiz_quiz multi_choice_quiz_quiz_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_quiz
    ADD CONSTRAINT multi_choice_quiz_quiz_pkey PRIMARY KEY (id);


--
-- Name: multi_choice_quiz_quiz_topics multi_choice_quiz_quiz_topics_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_quiz_topics
    ADD CONSTRAINT multi_choice_quiz_quiz_topics_pkey PRIMARY KEY (id);


--
-- Name: multi_choice_quiz_quiz_topics multi_choice_quiz_quiz_topics_quiz_id_topic_id_db6696b6_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_quiz_topics
    ADD CONSTRAINT multi_choice_quiz_quiz_topics_quiz_id_topic_id_db6696b6_uniq UNIQUE (quiz_id, topic_id);


--
-- Name: multi_choice_quiz_quizattempt multi_choice_quiz_quizattempt_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_quizattempt
    ADD CONSTRAINT multi_choice_quiz_quizattempt_pkey PRIMARY KEY (id);


--
-- Name: multi_choice_quiz_topic multi_choice_quiz_topic_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_topic
    ADD CONSTRAINT multi_choice_quiz_topic_name_key UNIQUE (name);


--
-- Name: multi_choice_quiz_topic multi_choice_quiz_topic_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_topic
    ADD CONSTRAINT multi_choice_quiz_topic_pkey PRIMARY KEY (id);


--
-- Name: pages_systemcategory pages_systemcategory_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_systemcategory
    ADD CONSTRAINT pages_systemcategory_name_key UNIQUE (name);


--
-- Name: pages_systemcategory pages_systemcategory_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_systemcategory
    ADD CONSTRAINT pages_systemcategory_pkey PRIMARY KEY (id);


--
-- Name: pages_systemcategory_quizzes pages_systemcategory_qui_systemcategory_id_quiz_i_2ce33982_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_systemcategory_quizzes
    ADD CONSTRAINT pages_systemcategory_qui_systemcategory_id_quiz_i_2ce33982_uniq UNIQUE (systemcategory_id, quiz_id);


--
-- Name: pages_systemcategory_quizzes pages_systemcategory_quizzes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_systemcategory_quizzes
    ADD CONSTRAINT pages_systemcategory_quizzes_pkey PRIMARY KEY (id);


--
-- Name: pages_systemcategory pages_systemcategory_slug_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_systemcategory
    ADD CONSTRAINT pages_systemcategory_slug_key UNIQUE (slug);


--
-- Name: pages_usercollection pages_usercollection_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_usercollection
    ADD CONSTRAINT pages_usercollection_pkey PRIMARY KEY (id);


--
-- Name: pages_usercollection_quizzes pages_usercollection_qui_usercollection_id_quiz_i_4b959856_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_usercollection_quizzes
    ADD CONSTRAINT pages_usercollection_qui_usercollection_id_quiz_i_4b959856_uniq UNIQUE (usercollection_id, quiz_id);


--
-- Name: pages_usercollection_quizzes pages_usercollection_quizzes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_usercollection_quizzes
    ADD CONSTRAINT pages_usercollection_quizzes_pkey PRIMARY KEY (id);


--
-- Name: pages_usercollection pages_usercollection_user_id_name_8e7da53a_uniq; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_usercollection
    ADD CONSTRAINT pages_usercollection_user_id_name_8e7da53a_uniq UNIQUE (user_id, name);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: multi_choice_quiz_option_question_id_dfc77329; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_choice_quiz_option_question_id_dfc77329 ON public.multi_choice_quiz_option USING btree (question_id);


--
-- Name: multi_choice_quiz_question_quiz_id_84bd94db; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_choice_quiz_question_quiz_id_84bd94db ON public.multi_choice_quiz_question USING btree (quiz_id);


--
-- Name: multi_choice_quiz_question_topic_id_be2218db; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_choice_quiz_question_topic_id_be2218db ON public.multi_choice_quiz_question USING btree (topic_id);


--
-- Name: multi_choice_quiz_quiz_topics_quiz_id_a9b392e3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_choice_quiz_quiz_topics_quiz_id_a9b392e3 ON public.multi_choice_quiz_quiz_topics USING btree (quiz_id);


--
-- Name: multi_choice_quiz_quiz_topics_topic_id_d055c582; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_choice_quiz_quiz_topics_topic_id_d055c582 ON public.multi_choice_quiz_quiz_topics USING btree (topic_id);


--
-- Name: multi_choice_quiz_quizattempt_quiz_id_cb5adf0d; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_choice_quiz_quizattempt_quiz_id_cb5adf0d ON public.multi_choice_quiz_quizattempt USING btree (quiz_id);


--
-- Name: multi_choice_quiz_quizattempt_user_id_7a251c97; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_choice_quiz_quizattempt_user_id_7a251c97 ON public.multi_choice_quiz_quizattempt USING btree (user_id);


--
-- Name: multi_choice_quiz_topic_name_0450c3db_like; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_choice_quiz_topic_name_0450c3db_like ON public.multi_choice_quiz_topic USING btree (name varchar_pattern_ops);


--
-- Name: pages_systemcategory_name_709a6496_like; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX pages_systemcategory_name_709a6496_like ON public.pages_systemcategory USING btree (name varchar_pattern_ops);


--
-- Name: pages_systemcategory_quizzes_quiz_id_df9be1b5; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX pages_systemcategory_quizzes_quiz_id_df9be1b5 ON public.pages_systemcategory_quizzes USING btree (quiz_id);


--
-- Name: pages_systemcategory_quizzes_systemcategory_id_eb54f6e6; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX pages_systemcategory_quizzes_systemcategory_id_eb54f6e6 ON public.pages_systemcategory_quizzes USING btree (systemcategory_id);


--
-- Name: pages_systemcategory_slug_121fec04_like; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX pages_systemcategory_slug_121fec04_like ON public.pages_systemcategory USING btree (slug varchar_pattern_ops);


--
-- Name: pages_usercollection_quizzes_quiz_id_c107904e; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX pages_usercollection_quizzes_quiz_id_c107904e ON public.pages_usercollection_quizzes USING btree (quiz_id);


--
-- Name: pages_usercollection_quizzes_usercollection_id_ee906bca; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX pages_usercollection_quizzes_usercollection_id_ee906bca ON public.pages_usercollection_quizzes USING btree (usercollection_id);


--
-- Name: pages_usercollection_user_id_14adc517; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX pages_usercollection_user_id_14adc517 ON public.pages_usercollection USING btree (user_id);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: multi_choice_quiz_option multi_choice_quiz_op_question_id_dfc77329_fk_multi_cho; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_option
    ADD CONSTRAINT multi_choice_quiz_op_question_id_dfc77329_fk_multi_cho FOREIGN KEY (question_id) REFERENCES public.multi_choice_quiz_question(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: multi_choice_quiz_question multi_choice_quiz_qu_quiz_id_84bd94db_fk_multi_cho; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_question
    ADD CONSTRAINT multi_choice_quiz_qu_quiz_id_84bd94db_fk_multi_cho FOREIGN KEY (quiz_id) REFERENCES public.multi_choice_quiz_quiz(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: multi_choice_quiz_quiz_topics multi_choice_quiz_qu_quiz_id_a9b392e3_fk_multi_cho; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_quiz_topics
    ADD CONSTRAINT multi_choice_quiz_qu_quiz_id_a9b392e3_fk_multi_cho FOREIGN KEY (quiz_id) REFERENCES public.multi_choice_quiz_quiz(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: multi_choice_quiz_quizattempt multi_choice_quiz_qu_quiz_id_cb5adf0d_fk_multi_cho; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_quizattempt
    ADD CONSTRAINT multi_choice_quiz_qu_quiz_id_cb5adf0d_fk_multi_cho FOREIGN KEY (quiz_id) REFERENCES public.multi_choice_quiz_quiz(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: multi_choice_quiz_question multi_choice_quiz_qu_topic_id_be2218db_fk_multi_cho; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_question
    ADD CONSTRAINT multi_choice_quiz_qu_topic_id_be2218db_fk_multi_cho FOREIGN KEY (topic_id) REFERENCES public.multi_choice_quiz_topic(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: multi_choice_quiz_quiz_topics multi_choice_quiz_qu_topic_id_d055c582_fk_multi_cho; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_quiz_topics
    ADD CONSTRAINT multi_choice_quiz_qu_topic_id_d055c582_fk_multi_cho FOREIGN KEY (topic_id) REFERENCES public.multi_choice_quiz_topic(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: multi_choice_quiz_quizattempt multi_choice_quiz_quizattempt_user_id_7a251c97_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_choice_quiz_quizattempt
    ADD CONSTRAINT multi_choice_quiz_quizattempt_user_id_7a251c97_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pages_systemcategory_quizzes pages_systemcategory_quiz_id_df9be1b5_fk_multi_cho; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_systemcategory_quizzes
    ADD CONSTRAINT pages_systemcategory_quiz_id_df9be1b5_fk_multi_cho FOREIGN KEY (quiz_id) REFERENCES public.multi_choice_quiz_quiz(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pages_systemcategory_quizzes pages_systemcategory_systemcategory_id_eb54f6e6_fk_pages_sys; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_systemcategory_quizzes
    ADD CONSTRAINT pages_systemcategory_systemcategory_id_eb54f6e6_fk_pages_sys FOREIGN KEY (systemcategory_id) REFERENCES public.pages_systemcategory(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pages_usercollection_quizzes pages_usercollection_quiz_id_c107904e_fk_multi_cho; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_usercollection_quizzes
    ADD CONSTRAINT pages_usercollection_quiz_id_c107904e_fk_multi_cho FOREIGN KEY (quiz_id) REFERENCES public.multi_choice_quiz_quiz(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pages_usercollection pages_usercollection_user_id_14adc517_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_usercollection
    ADD CONSTRAINT pages_usercollection_user_id_14adc517_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pages_usercollection_quizzes pages_usercollection_usercollection_id_ee906bca_fk_pages_use; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pages_usercollection_quizzes
    ADD CONSTRAINT pages_usercollection_usercollection_id_ee906bca_fk_pages_use FOREIGN KEY (usercollection_id) REFERENCES public.pages_usercollection(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: -
--

GRANT ALL ON SCHEMA public TO cloudsqlsuperuser;


--
-- PostgreSQL database dump complete
--

