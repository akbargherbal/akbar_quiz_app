"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Custom test runner to generate log files
TEST_RUNNER = "multi_choice_quiz.test_runner.LoggingTestRunner"


# Helper function for environment variables
def get_env_variable(var_name, default=None):
    """Gets an environment variable or raises an error if not set (unless default is provided)."""
    value = os.environ.get(var_name, default)
    if value is None and default is None:
        # Only raise error if no default was provided and the variable is missing
        raise ImproperlyConfigured(
            f"Required environment variable '{var_name}' is not set."
        )
    return value


# Environment determination
ENVIRONMENT = get_env_variable("ENVIRONMENT", "development")
DEBUG = (
    ENVIRONMENT == "development"
)  # DEBUG is True only if ENVIRONMENT is 'development'

# SECURITY WARNING: keep the secret key used in production secret!
if DEBUG:
    SECRET_KEY = get_env_variable(
        "SECRET_KEY",
        "django-insecure-m2*xxptb5lol_-d+nls$*n0p%1co9k5*vjm2h+to9ko#=q3a_s",
    )
else:
    # In production, SECRET_KEY MUST be set via the environment
    SECRET_KEY = get_env_variable("SECRET_KEY")  # No default allowed here

# ALLOWED_HOSTS configuration
ALLOWED_HOSTS = ["localhost", "127.0.0.1"]  # Default allowed hosts
# Add App Engine URL to ALLOWED_HOSTS if available
app_engine_url = get_env_variable("APPENGINE_URL", None)
if app_engine_url:
    ALLOWED_HOSTS.append(app_engine_url)


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    # Whitenoise - essential for serving static files efficiently in prod
    # Place it BEFORE django.contrib.staticfiles
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "multi_choice_quiz",
    "pages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # Whitenoise Middleware: Should be placed high up, right after SecurityMiddleware
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database configuration
# SQLite is NOT persistent on App Engine Standard (filesystem is read-only/ephemeral)
if DEBUG:
    # Local development using SQLite for simplicity
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    # Production configuration using Cloud SQL
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": get_env_variable("DB_NAME"),
            "USER": get_env_variable("DB_USER"),
            "PASSWORD": get_env_variable("DB_PASSWORD"),
            # HOST: Special path for App Engine to connect via Cloud SQL Auth Proxy
            "HOST": get_env_variable("DB_HOST"),
            "PORT": get_env_variable("DB_PORT", "5432"),
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"

# STATIC_ROOT: The directory where collectstatic will gather all static files
STATIC_ROOT = BASE_DIR / "staticfiles"

# STATICFILES_STORAGE: Use Whitenoise's specialized storage backend
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Login redirect
LOGIN_REDIRECT_URL = "/"
